# Grammar for rockit grammars, version 0.5.1
#
# Copyright (C) 2001 Robert Feldt, <feldt@ce.chalmers.se>.  
# All rights reserved.
#
# This file is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# This file is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
# License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this file (in the file "COPYING-LESSER"); if not,
# write to the Free Software Foundation, Inc., 59 Temple Place,
# Suite 330, Boston, MA  02111-1307  USA
#
# If you have any question, send an electronic message to
# Robert Feldt (feldt@ce.chalmers.se), or write to:
#
# Robert Feldt
# Brolyckan 1
# 433 69 Sävedalen
# SWEDEN
#
Grammar RockitGrammar
 Tokens
  Blank		      = /\s+/                                  [:Skip]
  Comment	      = /#.*$/                                 [:Skip]
  Regexp	      = /\/((\\\/)|[^\/])*\/[iomx]*/
  String	      = /('((\\')|[^'])*')|("((\\")|[^"])*")/
  Arrow		      = /(->)|(::=)|(:)/
  Int		      = /\d+/
  SymbolName	      = /[A-Z][A-Za-z_\d]*/
  LanguageName        = /[A-Za-z\d]+([-_]*[A-Za-z\d]+)*/ 
  ProductionReference = /[A-Z][A-Za-z]*\d+/

 Productions
  Grammar -> 
    'Grammar' LanguageName Tokens? Productions Priorities?
      [Grammar: _, language, tokens, productions, priorities]

  Tokens      -> 'Tokens' TokenSpec+                [^: _,tokens]
  TokenSpec   -> 
    SymbolName '=' (String | Regexp) TokenOpts?     [: tokenname,_,regexp,
                                                                 options]
  TokenOpts   -> '[' /:Skip/i ']'                   [^: _,options,_]

  Productions -> 'Productions' Prod+                [Productions: _,productions]
  Prod        -> SymbolName Arrow list(Alt, '|')    [Prod: nonterminal, _,alts]
  Alt         -> Element+ AstSpec?                  [Alt: elements, astspec]
  Element     -> SymbolName                         [^]
              |  (String | Regexp)                  [ImplicitToken: regexp]
              |  Element '?'                        [Maybe: element, _]
              |  Element '+'                        [Plus: element, _]
              |  Element '*'                        [Mult: element, _]
              |  '(' list(Element, '|') ')'         [Or: _, elements, _]
              |  '(' Element+ ')'                   [Sequence: _,elements,_]
              |  'list(' Element ',' Element ')'    [List: _, element, _, 
                                                           delimiter]
  AstSpec     -> '[' ProdSpec? ElemSpecs?  ']'      [: _,prodspec,elemspecs,_]
  ElemSpecs   -> ': ' list(ElemSpec, ',')           [^: _, specs]
  ElemSpec    -> (/[a-z][a-z\d]*/ | '_')            [^: name]
  ProdSpec    -> (SymbolName | '^')                 [^: name]

  Priorities -> 'Priorities' Priority+              [^: _, priorities]
  Priority   -> 
     ('left(' | 'right(') list(ProdRef, ',') ')'    [Associativity: relation, 
                                                            productionrefs,_]
   | ProdRef (('>' | '=') ProdRef)+                 [Precedence: first,rest]
   | Priority ','                                   [^: priority, _]
  ProdRef -> (SymbolName | ProductionReference)     [^]
