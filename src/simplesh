#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.5
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Simplesh < Racc::Parser

module_eval(<<'...end simplesh.y/module_eval...', 'simplesh.y', 90)
  
	def parse(str)
	  @q = []
	  until str.empty?
	    case str
	    when /\A\s+/
	    when /\A&&/
		  @q.push [$&, $&]
	    when /\A\-?\d+\.\d+/
	      @q.push [:NUMBER, $&.to_f]
	    when /\A\-?[\d]+/
	      @q.push [:NUMBER, $&.to_i]
		when /\A\:([\w\-]+)/
		  @q.push [:IDENT, $1.intern]
		when /\A[\w\-][\w\-\=]*/
          @q.push [:IDENT, $&]
	    when /\A.|\n/o
	      s = $&
	      @q.push [s, s]
	    end
	    str = $'
	  end
	  @q.push [false, '$end']
	  puts @q.inspect if ENV['DEBUG']
	  do_parse
	end

	def next_token
	  @q.shift
	end
	
...end simplesh.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    10,    10,    29,     2,     2,     5,     5,    41,    19,     9,
     9,     2,    17,    10,    22,    33,     2,     9,     5,    22,
    19,    10,     9,     2,     2,     5,     5,    23,    10,     9,
     9,     2,    22,     5,    22,    19,    19,     9,     2,     2,
     5,    19,    28,    10,     9,     9,     2,    43,     5,    39,
    19,    19,     9,     2,     2,     5,    20,    21,    13,     9,
     9,    14,    15,    16,    45,    37,    38,    38,    14,    15,
    20,    21,    20,    21,    19,    26 ]

racc_action_check = [
     0,    43,    11,     0,    43,     0,    43,    29,     2,     0,
    43,     2,     2,    38,    34,    18,    38,     2,    38,    18,
    28,     5,    38,    28,     5,    28,     5,     5,    22,    28,
     5,    22,    35,    22,     4,    15,    20,    22,    15,    20,
    15,    10,    10,    12,    15,    20,    12,    39,    12,    26,
    14,    21,    12,    14,    21,    14,    31,    31,     1,    14,
    21,     1,     1,     1,    44,    24,    24,    44,    40,    40,
     3,     3,    32,    32,    19,     7 ]

racc_action_pointer = [
    -9,    55,    -1,    66,    17,    12,   nil,    64,   nil,   nil,
    32,     2,    34,   nil,    41,    26,   nil,   nil,     2,    65,
    27,    42,    19,   nil,    50,   nil,    40,   nil,    11,     7,
   nil,    52,    68,   nil,    -3,    15,   nil,   nil,     4,    35,
    62,   nil,   nil,    -8,    51,   nil ]

racc_action_default = [
   -28,    -5,   -28,    -9,   -18,   -28,   -12,   -15,   -25,   -24,
   -26,   -28,    -2,    -3,   -28,   -28,    -4,   -22,   -28,   -26,
   -28,   -28,   -28,   -17,   -28,   -19,   -28,   -27,   -28,   -28,
    -1,    -7,    -8,   -21,   -10,   -11,   -23,   -16,   -28,   -13,
    -6,    46,   -20,   -28,   -28,   -14 ]

racc_goto_table = [
    24,    25,    18,    11,    27,    31,    32,    40,   nil,   nil,
   nil,   nil,   nil,    27,   nil,    30,   nil,   nil,    36,   nil,
    34,    35,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,    44,    25 ]

racc_goto_check = [
     8,     2,     5,     1,     9,     4,     4,     3,   nil,   nil,
   nil,   nil,   nil,     9,   nil,     1,   nil,   nil,     2,   nil,
     5,     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,     8,     2 ]

racc_goto_pointer = [
   nil,     3,    -4,   -21,    -9,     0,   nil,   nil,    -5,    -6 ]

racc_goto_default = [
   nil,   nil,    12,     1,     3,     4,     6,     7,   nil,     8 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 20, :_reduce_none,
  1, 20, :_reduce_none,
  2, 21, :_reduce_3,
  2, 21, :_reduce_4,
  1, 21, :_reduce_5,
  3, 21, :_reduce_6,
  3, 22, :_reduce_7,
  3, 22, :_reduce_8,
  1, 22, :_reduce_9,
  3, 23, :_reduce_10,
  3, 23, :_reduce_11,
  1, 23, :_reduce_12,
  3, 25, :_reduce_13,
  6, 25, :_reduce_14,
  1, 25, :_reduce_15,
  3, 26, :_reduce_16,
  2, 26, :_reduce_17,
  1, 26, :_reduce_18,
  1, 27, :_reduce_19,
  3, 27, :_reduce_20,
  3, 24, :_reduce_21,
  2, 24, :_reduce_22,
  3, 24, :_reduce_23,
  1, 24, :_reduce_24,
  1, 24, :_reduce_25,
  1, 28, :_reduce_26,
  2, 28, :_reduce_27 ]

racc_reduce_n = 28

racc_shift_n = 46

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  ";" => 3,
  "*" => 4,
  "/" => 5,
  "+" => 6,
  "-" => 7,
  "\\n" => 8,
  :IDENT => 9,
  "=" => 10,
  "." => 11,
  "(" => 12,
  ")" => 13,
  "[" => 14,
  "]" => 15,
  "," => 16,
  "&&" => 17,
  :NUMBER => 18 }

racc_nt_base = 19

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\";\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\"\\\\n\"",
  "IDENT",
  "\"=\"",
  "\".\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "\"&&\"",
  "NUMBER",
  "$start",
  "program",
  "line",
  "expr",
  "mulex",
  "term",
  "basic_line",
  "array",
  "basic_result",
  "command" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'simplesh.y', 16)
  def _reduce_3(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 17)
  def _reduce_4(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 18)
  def _reduce_5(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 19)
  def _reduce_6(val, _values)
     $vals[val[0]] = val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 21)
  def _reduce_7(val, _values)
     val[0] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 22)
  def _reduce_8(val, _values)
     val[0] - val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 23)
  def _reduce_9(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 25)
  def _reduce_10(val, _values)
     val[0] * val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 26)
  def _reduce_11(val, _values)
     val[0] / val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 27)
  def _reduce_12(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 29)
  def _reduce_13(val, _values)
     val[0].send(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 30)
  def _reduce_14(val, _values)
     val[0].send(val[2], *val[4]) 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 31)
  def _reduce_15(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 33)
  def _reduce_16(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 34)
  def _reduce_17(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 35)
  def _reduce_18(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 37)
  def _reduce_19(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 38)
  def _reduce_20(val, _values)
     val[0] + [val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 40)
  def _reduce_21(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 41)
  def _reduce_22(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 42)
  def _reduce_23(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 43)
  def _reduce_24(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 45)
  def _reduce_25(val, _values)
    			if $vals[val[0]]
				return $vals[val[0]]
			else
				begin
			    	r = []
			    	er_t = nil
			    	in_t = nil
			    	o_t = nil
			    	p = Open4::popen4(val[0]) do |pid, stdin, stdout, stderr|
			    		er_t = Thread.new do
			    			loop do
			    				$stderr.print stderr.read(stderr.stat.size)
			    				$stderr.flush
			    			end
			    		end
            	
			    		in_t = Thread.new do
			    			loop do
			    				data = gets
			    				stdin.write(data)
			    			end
			    		end
		    		
			    		o_t = Thread.new do
			    			loop do
			    				r << stdout.read(stdout.stat.size)
			    			end
			    		end
			    	end
			    	er_t.kill
			    	in_t.kill
			    	o_t.kill
			    	r.join("")
				rescue Errno::ENOENT, TypeError
					val[0]
				end
			end
		
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 84)
  def _reduce_26(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 85)
  def _reduce_27(val, _values)
     "#{val[0]} #{val[1]}" 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Simplesh


require 'rubygems'
gem 'open4'
require 'open4'
require 'termios'

$vals = {}

parser = Simplesh.new
puts
puts 'type "Q" to quit.'
puts
while true
  puts
  print '? '
  str = gets.chop!
  break if /q/i =~ str
  begin
    puts parser.parse(str)
  rescue ParseError
    puts $!
  end
end
