#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.5
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Simplesh < Racc::Parser

module_eval(<<'...end simplesh.y/module_eval...', 'simplesh.y', 48)
  
  def parse(str)
    @str = str
    yyparse self, :scan
  end

  private

  def scan
    str = @str
    until str.empty?
      case str
      when /\A\s+/
        str = $'
      when /\A[\w\.\-]+/
        yield :IDENT, $&
        str = $'
      else
        c = str[0,1]
        yield c, c
        str = str[1..-1]
      end
    end
    yield false, '$'   # is optional from Racc 1.3.7
  end

...end simplesh.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     1,     8,     2,     1,     5,     2,     2,     9,    10 ]

racc_action_check = [
     0,     3,     0,     1,     1,     1,     2,     6,     8 ]

racc_action_pointer = [
    -2,     1,     2,     1,   nil,   nil,     4,   nil,     8,   nil,
   nil ]

racc_action_default = [
    -6,    -6,    -4,    -6,    -3,    -2,    -6,    -5,    -6,    -1,
    11 ]

racc_goto_table = [
     3,     6,     7 ]

racc_goto_check = [
     1,     1,     2 ]

racc_goto_pointer = [
   nil,     0,     0 ]

racc_goto_default = [
   nil,   nil,     4 ]

racc_reduce_table = [
  0, 0, :racc_error,
  3, 6, :_reduce_1,
  2, 6, :_reduce_2,
  1, 6, :_reduce_3,
  1, 7, :_reduce_4,
  2, 7, :_reduce_5 ]

racc_reduce_n = 6

racc_shift_n = 11

racc_token_table = {
  false => 0,
  :error => 1,
  "(" => 2,
  ")" => 3,
  :IDENT => 4 }

racc_nt_base = 5

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"(\"",
  "\")\"",
  "IDENT",
  "$start",
  "result",
  "contents" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'simplesh.y', 7)
  def _reduce_1(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 8)
  def _reduce_2(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 10)
  def _reduce_3(val, _values)
    										er_t = nil
										in_t = nil
										o_t = nil
	 									p = Open4::popen4(val[0]) do |pid, stdin, stdout, stderr|
											er_t = Thread.new do
												loop do
													$stderr.print stderr.read(stderr.stat.size)
													$stderr.flush
												end
											end

											in_t = Thread.new do
												loop do
													data = gets
													stdin.write(data)
												end
											end
											
											o_t = Thread.new do
												loop do
													$stdout.print stdout.read(stdout.stat.size)
													$stdout.flush
												end
											end
										end
										er_t.kill
										in_t.kill
										o_t.kill
										p
									
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 42)
  def _reduce_4(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 43)
  def _reduce_5(val, _values)
     "#{val[0]} #{val[1]}" 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Simplesh


require 'rubygems'
gem 'open4'
require 'open4'

parser = Simplesh.new
puts
puts 'type "Q" to quit.'
puts
while true
  puts
  print '? '
  str = gets.chop!
  break if /q/i =~ str
  begin
    puts parser.parse(str)
  rescue ParseError
    puts $!
  end
end
