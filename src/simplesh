#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.5
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Simplesh < Racc::Parser

module_eval(<<'...end simplesh.y/module_eval...', 'simplesh.y', 99)
  
	def parse(str)
	  @q = []
	  until str.empty?
	    case str
	    when /\A\s+/
	    when /\A&&/
		  @q.push [$&, $&]
	    when /\A\-?\d+\.\d+/
	      @q.push [:NUMBER, $&.to_f]
	    when /\A\-?[\d]+/
	      @q.push [:NUMBER, $&.to_i]
		when /\A\:([\w\-]+)/
		  @q.push [:IDENT, $1.intern]
		when /\A[\w\-][\w\-\=]*/
          @q.push [:IDENT, $&]
                when /\A\/([^\/]+)\//
          @q.push [:IDENT, Regexp.new($1)]
		when /\A\.\.*/
          @q.push [:IDENT, $&]
	    when /\A.|\n/o
	      s = $&
	      @q.push [s, s]
	    end
	    str = $'
	  end
	  @q.push [false, '$end']
	  puts @q.inspect if ENV['DEBUG']
	  do_parse
	end

	def next_token
	  @q.shift
	end
	
...end simplesh.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     1,     1,    29,     5,     5,     8,     8,    13,     1,    12,
    12,     5,    35,     8,    29,     1,     1,    12,     5,     5,
     8,     8,    47,    13,    12,    12,     5,    22,    13,    29,
    13,     5,    12,     5,    29,     1,    29,    12,     5,    12,
     8,    31,    13,    13,    12,     5,     5,     8,    45,    46,
    13,    12,    12,     5,    13,     8,    38,     5,    16,    12,
    29,    13,    13,    12,     5,     5,     8,    19,    49,    51,
    12,    12,    46,    20,    21,    18,    24,    25,    26,    27,
    28,    24,    25,    26,    27,    28,    24,    25,    26,    27,
    28,    13,    14,    20,    21,    33,    29 ]

racc_action_check = [
     0,    49,    40,     0,    49,     0,    49,    13,    46,     0,
    49,    46,    16,    46,    39,     3,    29,    46,     3,    29,
     3,    29,    33,     5,     3,    29,     5,     5,    28,    41,
    27,    28,     5,    27,    42,     8,    43,    28,     8,    27,
     8,     8,    21,    25,     8,    21,    25,    21,    32,    32,
    14,    21,    25,    14,    24,    14,    23,    24,     2,    14,
    23,    20,    26,    24,    20,    26,    20,     4,    47,    50,
    20,    26,    50,     4,     4,     4,     6,     6,     6,     6,
     6,    37,    37,    37,    37,    37,    36,    36,    36,    36,
    36,     1,     1,    34,    34,    10,     7 ]

racc_action_pointer = [
   -12,    79,    58,     3,    64,    11,    72,    76,    23,   nil,
    81,   nil,   nil,    -5,    38,   nil,    12,   nil,   nil,   nil,
    49,    30,   nil,    40,    42,    31,    50,    18,    16,     4,
   nil,   nil,    30,    10,    84,   nil,    82,    77,   nil,    -6,
   -18,     9,    14,    16,   nil,   nil,    -4,    53,   nil,   -11,
    53,   nil ]

racc_action_default = [
   -31,   -29,   -31,    -2,    -5,   -31,    -9,   -21,   -31,   -15,
   -18,   -28,   -27,   -29,   -31,   -30,   -31,    -1,    -4,    -3,
   -31,   -31,   -25,   -31,   -31,   -31,   -31,   -31,   -31,   -31,
   -22,   -20,   -31,   -31,    -6,    52,    -7,    -8,   -24,   -10,
   -11,   -12,   -13,   -14,   -26,   -19,   -31,   -16,   -23,   -31,
   -31,   -17 ]

racc_goto_table = [
    32,    30,    15,     2,    23,    34,    17,    36,    37,   nil,
   nil,   nil,   nil,   nil,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    44,    39,    40,    41,    42,    43,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    48,
   nil,    50,    30 ]

racc_goto_check = [
     8,     2,     9,     1,     5,     3,     1,     4,     4,   nil,
   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,     5,     5,     5,     5,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,
   nil,     8,     2 ]

racc_goto_pointer = [
   nil,     3,    -7,    -9,   -13,    -1,   nil,   nil,    -8,     1 ]

racc_goto_default = [
   nil,   nil,     3,     4,     6,     7,     9,    10,   nil,    11 ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 23, :_reduce_none,
  1, 23, :_reduce_none,
  2, 24, :_reduce_3,
  2, 24, :_reduce_4,
  1, 24, :_reduce_5,
  3, 24, :_reduce_6,
  3, 25, :_reduce_7,
  3, 25, :_reduce_8,
  1, 25, :_reduce_9,
  3, 26, :_reduce_10,
  3, 26, :_reduce_11,
  3, 26, :_reduce_12,
  3, 26, :_reduce_13,
  3, 26, :_reduce_14,
  1, 26, :_reduce_15,
  3, 28, :_reduce_16,
  6, 28, :_reduce_17,
  1, 28, :_reduce_18,
  3, 29, :_reduce_19,
  2, 29, :_reduce_20,
  1, 29, :_reduce_21,
  1, 30, :_reduce_22,
  3, 30, :_reduce_23,
  3, 27, :_reduce_24,
  2, 27, :_reduce_25,
  3, 27, :_reduce_26,
  1, 27, :_reduce_27,
  1, 27, :_reduce_28,
  1, 31, :_reduce_29,
  2, 31, :_reduce_30 ]

racc_reduce_n = 31

racc_shift_n = 52

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  ";" => 3,
  "*" => 4,
  "/" => 5,
  "%" => 6,
  "&" => 7,
  "|" => 8,
  "+" => 9,
  "-" => 10,
  "\\n" => 11,
  :IDENT => 12,
  "=" => 13,
  "." => 14,
  "(" => 15,
  ")" => 16,
  "[" => 17,
  "]" => 18,
  "," => 19,
  "&&" => 20,
  :NUMBER => 21 }

racc_nt_base = 22

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\";\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"&\"",
  "\"|\"",
  "\"+\"",
  "\"-\"",
  "\"\\\\n\"",
  "IDENT",
  "\"=\"",
  "\".\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "\"&&\"",
  "NUMBER",
  "$start",
  "program",
  "line",
  "expr",
  "mulex",
  "term",
  "basic_line",
  "array",
  "basic_result",
  "command" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'simplesh.y', 17)
  def _reduce_3(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 18)
  def _reduce_4(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 19)
  def _reduce_5(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 20)
  def _reduce_6(val, _values)
     $vals[val[0]] = val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 22)
  def _reduce_7(val, _values)
     val[0] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 23)
  def _reduce_8(val, _values)
     val[0] - val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 24)
  def _reduce_9(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 26)
  def _reduce_10(val, _values)
     val[0] * val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 27)
  def _reduce_11(val, _values)
     val[0] / val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 28)
  def _reduce_12(val, _values)
     val[0] % val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 29)
  def _reduce_13(val, _values)
     val[0] & val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 30)
  def _reduce_14(val, _values)
     val[0] | val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 31)
  def _reduce_15(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 33)
  def _reduce_16(val, _values)
     val[0].send(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 34)
  def _reduce_17(val, _values)
     val[0].send(val[2], *val[4]) 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 35)
  def _reduce_18(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 37)
  def _reduce_19(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 38)
  def _reduce_20(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 39)
  def _reduce_21(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 41)
  def _reduce_22(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 42)
  def _reduce_23(val, _values)
     val[0] + [val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 44)
  def _reduce_24(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 45)
  def _reduce_25(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 46)
  def _reduce_26(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 47)
  def _reduce_27(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 49)
  def _reduce_28(val, _values)
    			if $vals[val[0]]
				return $vals[val[0]]
			else
				begin
					case val[0]
					when /^cd (.*)$/
						return Dir.chdir($1)
					end
					
			    	r = []
			    	er_t = nil
			    	in_t = nil
			    	o_t = nil
			    	p = Open4::popen4(val[0]) do |pid, stdin, stdout, stderr|
			    		er_t = Thread.new do
			    			loop do
			    				$stderr.print stderr.read(stderr.stat.size)
			    				$stderr.flush
			    			end
			    		end
            	
			    		in_t = Thread.new do
			    			loop do
			    				data = gets
			    				stdin.write(data)
			    			end
			    		end
		    		
			    		o_t = Thread.new do
			    			loop do
			    				r << stdout.read(stdout.stat.size)
			    			end
			    		end
			    	end
			    	er_t.kill
			    	in_t.kill
			    	o_t.kill
			    	r.join("")
				rescue Errno::ENOENT, TypeError
					val[0]
				end
			end
		
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 93)
  def _reduce_29(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 94)
  def _reduce_30(val, _values)
     "#{val[0]} #{val[1]}" 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Simplesh


require 'rubygems'
gem 'open4'
require 'open4'

$vals = {}

parser = Simplesh.new
puts
puts 'type "Q" to quit.'
puts
while true
  puts
  print '? '
  if str = gets
    str.chop!
    break if /q/i =~ str
    begin
      puts parser.parse(str)
    rescue ParseError
      puts $!
    end
  else
    exit
  end
end
