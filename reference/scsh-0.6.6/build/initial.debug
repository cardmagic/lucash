; Package uid -> name
(0 low-structures)
(1 debug-low-structures)
(2 alt-features-structures)
(3 cheat-features-structures)
(4 the-interfaces)
(5 meta-module-system)
(6 run-time-structures)
(7 compiler-structures)
(8 initial-structures)
(9 debug-structures)
(10 usual-structures)
(11 alt-low-structures)
(12 compiler-structures)
(13 linker-structures)
(14 scheme-level-0)
(15 scheme-level-1)
(16 records)
(17 export-the-record-type)
(18 define-record-types)
(19 methods)
(20 number-i/o)
(21 fluids)
(22 wind)
(23 session-data)
(24 i/o)
(25 channels)
(26 channel-i/o)
(27 conditions)
(28 writing)
(29 reading)
(30 scheme-level-2)
(31 features)
(32 templates)
(33 continuations)
(34 more-types)
(35 enumerated)
(36 architecture)
(37 exceptions)
(38 interrupts)
(39 rts-sigevents)
(40 threads)
(41 scheduler)
(42 root-scheduler)
(43 enum-case)
(44 queues)
(45 locks)
(46 usual-resumer)
(47 weak)
(48 display-conditions)
(49 meta-types)
(50 bindings)
(51 names)
(52 thingies)
(53 nodes)
(54 compiler-envs)
(55 syntactic)
(56 usual-macros)
(57 var-utilities)
(58 debug-data)
(59 stack-check)
(60 segments)
(61 primops)
(62 reconstruction)
(63 compiler)
(64 reading-forms)
(65 flat-environments)
(66 interfaces)
(67 packages)
(68 scan-package)
(69 optimizer)
(70 compile-packages)
(71 defpackage)
(72 types)
(73 module-system)
(74 usages)
(75 analysis)
(76 inline)
(77 strong)
(78 tables)
(79 filenames)
(80 environments)
(81 evaluation)
(82 ensures-loaded)
(83 for-reification)
(84 scheme)
(85 mini-command)
(86 initial-system)
-
; Location uid -> (name . package-uid)
(0 (and . 14))
(1 (cond . 14))
(2 (do . 14))
(3 (let . 14))
(4 (let* . 14))
(5 (or . 14))
(6 (code-quote . 14))
(7 (quote . 14))
(8 (unspecific . 14))
(9 (define-syntax . 14))
(10 (lambda . 14))
(11 (begin . 14))
(12 (unassigned . 14))
(13 (flat-lambda . 14))
(14 (define . 14))
(15 (primitive-procedure . 14))
(16 (if . 14))
(17 (letrec-syntax . 14))
(18 (%file-name% . 14))
(19 (let-syntax . 14))
(20 (structure-ref . 14))
(21 (loophole . 14))
(22 (letrec . 14))
(23 (lap . 14))
(24 (set! . 14))
(25 (call . 14))
(26 (atan . 14))
(27 (set-location-defined?! . 14))
(28 (acos . 14))
(29 (vm-extension . 14))
(30 (asin . 14))
(31 (location-defined? . 14))
(32 (time . 14))
(33 (template-set! . 14))
(34 (cons . 14))
(35 (wait . 14))
(36 (trap . 14))
(37 (assq . 14))
(38 (make-weak-pointer . 14))
(39 (lookup-shared-binding . 14))
(40 (push . 14))
(41 (set-contents! . 14))
(42 (read-char . 14))
(43 (make-cell . 14))
(44 (sqrt . 14))
(45 (* . 14))
(46 (contents . 14))
(47 (+ . 14))
(48 (peek-char . 14))
(49 (- . 14))
(50 (continuation-set! . 14))
(51 (/ . 14))
(52 (weak-pointer? . 14))
(53 (quotient . 14))
(54 (close-channel . 14))
(55 (channel-abort . 14))
(56 (char? . 14))
(57 (< . 14))
(58 (= . 14))
(59 (cell? . 14))
(60 (> . 14))
(61 (make-location . 14))
(62 (imag-part . 14))
(63 (set-port-data! . 14))
(64 (make-template . 14))
(65 (real? . 14))
(66 (real-part . 14))
(67 (get-cont-from-heap . 14))
(68 (record-length . 14))
(69 (port-data . 14))
(70 (pair? . 14))
(71 (make-port . 14))
(72 (set-port-lock! . 14))
(73 (return-from-exception . 14))
(74 (location? . 14))
(75 (channel-maybe-read . 14))
(76 (checked-record-ref . 14))
(77 (add-finalizer! . 14))
(78 (rational? . 14))
(79 (template? . 14))
(80 (port-lock . 14))
(81 (vector-length . 14))
(82 (make-continuation . 14))
(83 (string-length . 14))
(84 (shared-binding-ref . 14))
(85 (port? . 14))
(86 (angle . 14))
(87 (false . 14))
(88 (remainder . 14))
(89 (continuation? . 14))
(90 (channel-ready? . 14))
(91 (binary-reduce1 . 14))
(92 (binary-reduce2 . 14))
(93 (char<? . 14))
(94 (char=? . 14))
(95 (<= . 14))
(96 (magnitude . 14))
(97 (>= . 14))
(98 (with-continuation . 14))
(99 (floor . 14))
(100 (apply . 14))
(101 (memory-status . 14))
(102 (checked-record-set! . 14))
(103 (inexact->exact . 14))
(104 (exact->inexact . 14))
(105 (error . 14))
(106 (extended-number-length . 14))
(107 (open-channels-list . 14))
(108 (channel-id . 14))
(109 (shared-binding-set! . 14))
(110 (numerator . 14))
(111 (eof-object . 14))
(112 (byte-vector-length . 14))
(113 (record-ref . 14))
(114 (make-polar . 14))
(115 (write-char . 14))
(116 (symbol->string . 14))
(117 (exact? . 14))
(118 (vector-ref . 14))
(119 (add-pending-channel . 14))
(120 (set-current-thread! . 14))
(121 (immutable? . 14))
(122 (set-exception-handlers! . 14))
(123 (string-ref . 14))
(124 (set-port-index! . 14))
(125 (make-shared-binding . 14))
(126 (current-thread . 14))
(127 (channel-status . 14))
(128 (set-port-limit! . 14))
(129 (shared-binding-name . 14))
(130 (port-index . 14))
(131 (make-immutable! . 14))
(132 (set-enabled-interrupts! . 14))
(133 (port-limit . 14))
(134 (ascii->char . 14))
(135 (char->ascii . 14))
(136 (undefine-shared-binding . 14))
(137 (record-set! . 14))
(138 (shared-binding? . 14))
(139 (eof-object? . 14))
(140 (set-interrupt-handlers! . 14))
(141 (record . 14))
(142 (schedule-interrupt . 14))
(143 (channel-maybe-write . 14))
(144 (extended-number-ref . 14))
(145 (vector-set! . 14))
(146 (copy-bytes! . 14))
(147 (string-set! . 14))
(148 (call-external-value . 14))
(149 (values . 14))
(150 (intern . 14))
(151 (vector . 14))
(152 (byte-vector-ref . 14))
(153 (make-double . 14))
(154 (make-record . 14))
(155 (set-location-id! . 14))
(156 (location-id . 14))
(157 (bitwise-and . 14))
(158 (eq? . 14))
(159 (write-image . 14))
(160 (double? . 14))
(161 (extended-number-set! . 14))
(162 (make-vector . 14))
(163 (record? . 14))
(164 (make-string . 14))
(165 (set-port-buffer! . 14))
(166 (primitive-catch . 14))
(167 (string-hash . 14))
(168 (template-length . 14))
(169 (number? . 14))
(170 (port-buffer . 14))
(171 (byte-vector-set! . 14))
(172 (bitwise-ior . 14))
(173 (set-car! . 14))
(174 (closure-env . 14))
(175 (vector? . 14))
(176 (bitwise-not . 14))
(177 (set-cdr! . 14))
(178 (symbol? . 14))
(179 (string? . 14))
(180 (car . 14))
(181 (bitwise-xor . 14))
(182 (cdr . 14))
(183 (find-all-records . 14))
(184 (continuation-length . 14))
(185 (log . 14))
(186 (message . 14))
(187 (tan . 14))
(188 (collect . 14))
(189 (cos . 14))
(190 (channel-os-index . 14))
(191 (make-extended-number . 14))
(192 (set-port-status! . 14))
(193 (sin . 14))
(194 (exp . 14))
(195 (pop . 14))
(196 (port-status . 14))
(197 (return-from-callback . 14))
(198 (set-port-locked?! . 14))
(199 (make-byte-vector . 14))
(200 (weak-pointer-ref . 14))
(201 (call-with-values . 14))
(202 (denominator . 14))
(203 (port-locked? . 14))
(204 (reverse-list->string . 14))
(205 (extended-number? . 14))
(206 (shared-binding-is-import? . 14))
(207 (find-all . 14))
(208 (cell-ref . 14))
(209 (byte-vector? . 14))
(210 (string=? . 14))
(211 (open-channel . 14))
(212 (channel? . 14))
(213 (make-rectangular . 14))
(214 (set-session-data! . 14))
(215 (template-ref . 14))
(216 (set-port-handler! . 14))
(217 (make-closure . 14))
(218 (session-data . 14))
(219 (integer? . 14))
(220 (signal-condition . 14))
(221 (port-handler . 14))
(222 (set-port-pending-eof?! . 14))
(223 (define-shared-binding . 14))
(224 (arithmetic-shift . 14))
(225 (complex? . 14))
(226 (port-pending-eof? . 14))
(227 (cell-set! . 14))
(228 (binary-comparison-reduce2 . 14))
(229 (closure? . 14))
(230 (continuation-ref . 14))
(231 (closure-template . 14))
(232 (current-cont . 14))
(233 (char->integer . 14))
(234 (integer->char . 14))
(235 (ascii-limit . 14))
(236 (ascii-whitespaces . 14))
(237 (procedure? . 14))
(238 (invoke-closure . 14))
(239 (primitive-cwcc . 14))
(240 (make-undefined-location . 14))
(241 (location-assigned? . 14))
(242 (vector-unassigned? . 14))
(243 (string-copy . 14))
(244 (string->symbol . 14))
(245 (input-port? . 14))
(246 (output-port? . 14))
(247 (make-code-vector . 14))
(248 (code-vector? . 14))
(249 (code-vector-length . 14))
(250 (code-vector-ref . 14))
(251 (code-vector-set! . 14))
(252 (channel-read . 14))
(253 (buffer-length . 14))
(254 (channel-write . 14))
(255 (lookup-imported-binding . 14))
(256 (lookup-exported-binding . 14))
(257 (define-imported-binding . 14))
(258 (define-exported-binding . 14))
(259 (undefine-imported-binding . 14))
(260 (undefine-exported-binding . 14))
(261 (byte-vector . 14))
(262 (secret-length . 14))
(263 (debug-message . 14))
(264 (make-condition . 14))
(265 (signal . 14))
(266 (warn . 14))
(267 (syntax-error . 14))
(268 (call-error . 14))
(269 (case . 15))
(270 (quasiquote . 15))
(271 (syntax-rules . 15))
(272 (not . 15))
(273 (boolean? . 15))
(274 (eqv? . 15))
(275 (equal? . 15))
(276 (max . 15))
(277 (min . 15))
(278 (max-or-min . 15))
(279 (abs . 15))
(280 (zero? . 15))
(281 (positive? . 15))
(282 (negative? . 15))
(283 (even? . 15))
(284 (odd? . 15))
(285 (caar . 15))
(286 (cadr . 15))
(287 (cdar . 15))
(288 (cddr . 15))
(289 (caaar . 15))
(290 (caadr . 15))
(291 (cadar . 15))
(292 (caddr . 15))
(293 (cdaar . 15))
(294 (cdadr . 15))
(295 (cddar . 15))
(296 (cdddr . 15))
(297 (caaaar . 15))
(298 (caaadr . 15))
(299 (caadar . 15))
(300 (caaddr . 15))
(301 (cadaar . 15))
(302 (cadadr . 15))
(303 (caddar . 15))
(304 (cadddr . 15))
(305 (cdaaar . 15))
(306 (cdaadr . 15))
(307 (cdadar . 15))
(308 (cdaddr . 15))
(309 (cddaar . 15))
(310 (cddadr . 15))
(311 (cdddar . 15))
(312 (cddddr . 15))
(313 (null? . 15))
(314 (list . 15))
(315 (length . 15))
(316 (real-length . 15))
(317 (append . 15))
(318 (reverse . 15))
(319 (append-reverse . 15))
(320 (list-tail . 15))
(321 (list-ref . 15))
(322 (mem . 15))
(323 (memq . 15))
(324 (memv . 15))
(325 (member . 15))
(326 (ass . 15))
(327 (assv . 15))
(328 (assoc . 15))
(329 (list? . 15))
(330 (char>? . 15))
(331 (char>=? . 15))
(332 (char<=? . 15))
(333 (char-whitespace? . 15))
(334 (char-lower-case? . 15))
(335 (char-upper-case? . 15))
(336 (char-numeric? . 15))
(337 (char-alphabetic? . 15))
(338 (char-case-delta . 15))
(339 (make-character-map . 15))
(340 (upcase-map . 15))
(341 (char-upcase . 15))
(342 (downcase-map . 15))
(343 (char-downcase . 15))
(344 (char-ci-compare . 15))
(345 (char-ci=? . 15))
(346 (char-ci<? . 15))
(347 (char-ci<=? . 15))
(348 (char-ci>? . 15))
(349 (char-ci>=? . 15))
(350 (string . 15))
(351 (substring . 15))
(352 (string-append . 15))
(353 (string->list . 15))
(354 (list->string . 15))
(355 (string-fill! . 15))
(356 (make-string=? . 15))
(357 (string-ci=? . 15))
(358 (make-string<? . 15))
(359 (string<? . 15))
(360 (string-ci<? . 15))
(361 (string>? . 15))
(362 (string<=? . 15))
(363 (string>=? . 15))
(364 (string-ci>? . 15))
(365 (string-ci<=? . 15))
(366 (string-ci>=? . 15))
(367 (vector->list . 15))
(368 (list->vector . 15))
(369 (vector-fill! . 15))
(370 (map . 15))
(371 (map1 . 15))
(372 (map2+ . 15))
(373 (for-each . 15))
(374 (for-each1 . 15))
(375 (for-each2+ . 15))
(376 (delay . 15))
(377 (make-promise . 15))
(378 (force . 15))
(379 (unspecific . 15))
(380 (reduce . 15))
(381 (filter . 15))
(382 (pos . 15))
(383 (posq . 15))
(384 (posv . 15))
(385 (position . 15))
(386 (any . 15))
(387 (every . 15))
(388 (sublist . 15))
(389 (last . 15))
(390 (insert . 15))
(391 (fold . 15))
(392 (fold->2 . 15))
(393 (fold->3 . 15))
(394 (mvlet . 15))
(395 (mvlet-helper . 15))
(396 (copy-vars . 15))
(397 (mvlet* . 15))
(398 (inexact? . 15))
(399 (modulo . 15))
(400 (ceiling . 15))
(401 (truncate . 15))
(402 (round . 15))
(403 (gcd . 15))
(404 (euclid . 15))
(405 (lcm . 15))
(406 (expt . 15))
(407 (raise-to-integer-power . 15))
(408 (rationalize . 15))
(409 (simplest-rational . 15))
(410 (record-type . 16))
(411 (*record-type-uid* . 16))
(412 (*record-type* . 16))
(413 (make-record-type . 16))
(414 (record-type? . 16))
(415 (record-type-resumer . 16))
(416 (set-record-type-resumer! . 16))
(417 (record-type-uid . 16))
(418 (record-type-name . 16))
(419 (record-type-field-names . 16))
(420 (record-type-number-of-fields . 16))
(421 (record-type-discloser . 16))
(422 (set-record-type-discloser! . 16))
(423 (record-type-fields . 16))
(424 (record-field-index . 16))
(425 (record-constructor . 16))
(426 (record-accessor . 16))
(427 (record-modifier . 16))
(428 (record-predicate . 16))
(429 (define-record-discloser . 16))
(430 (make-default-record-discloser . 16))
(431 (disclose-record . 16))
(432 (define-record-resumer . 16))
(433 (default-record-resumer . 16))
(434 (initialize-records! . 16))
(435 (resume-record . 16))
(436 (:record-type . 16))
(437 (define-record-type . 18))
(438 (define-constructor . 18))
(439 (define-accessors . 18))
(440 (define-accessor . 18))
(441 (:simple-type . 19))
(442 (really-make-simple-type . 19))
(443 (simple-type-id . 19))
(444 (simple-type-priority . 19))
(445 (simple-type-predicate . 19))
(446 (simple-type-superiors . 19))
(447 (simple-type? . 19))
(448 (make-simple-type . 19))
(449 (compute-priority . 19))
(450 (*increment* . 19))
(451 (%type-priority . 19))
(452 (%type-predicate . 19))
(453 (%same-type? . 19))
(454 (define-simple-type . 19))
(455 (:syntax . 19))
(456 (:values . 19))
(457 (value? . 19))
(458 (:value . 19))
(459 (:zero . 19))
(460 (:number . 19))
(461 (:complex . 19))
(462 (:real . 19))
(463 (:rational . 19))
(464 (:integer . 19))
(465 (:exact-integer . 19))
(466 (:boolean . 19))
(467 (:symbol . 19))
(468 (:char . 19))
(469 (:null . 19))
(470 (:pair . 19))
(471 (:vector . 19))
(472 (:string . 19))
(473 (:procedure . 19))
(474 (:input-port . 19))
(475 (:output-port . 19))
(476 (:eof-object . 19))
(477 (:record . 19))
(478 (record-type-priority . 19))
(479 (:method-info . 19))
(480 (really-make-method-info . 19))
(481 (method-info-proc . 19))
(482 (method-info-n-ary? . 19))
(483 (method-info-types . 19))
(484 (method-info? . 19))
(485 (make-method-info . 19))
(486 (empty-method-list . 19))
(487 (insert-method . 19))
(488 (same-applicability? . 19))
(489 (every2 . 19))
(490 (more-specific? . 19))
(491 (more-specific-type? . 19))
(492 (:method-table . 19))
(493 (really-make-method-table . 19))
(494 (method-table-id . 19))
(495 (method-table-set-perform! . 19))
(496 (method-table-get-perform . 19))
(497 (make-generic . 19))
(498 (method-table-prototype . 19))
(499 (method-table-methods . 19))
(500 (set-method-table-methods! . 19))
(501 (method-table? . 19))
(502 (make-method-table . 19))
(503 (make-cell-for-generic . 19))
(504 (add-to-method-table! . 19))
(505 (set-final-method! . 19))
(506 (apply-generic . 19))
(507 (define-generic . 19))
(508 (methods->perform . 19))
(509 (last-action . 19))
(510 (one-action . 19))
(511 (argument-sequence-predicate . 19))
(512 (check-for-next . 19))
(513 (check-next . 19))
(514 (method-info . 19))
(515 (method-internal . 19))
(516 (with-next-method . 19))
(517 (define-method . 19))
(518 (&add-method! . 19))
(519 (add-method! . 19))
(520 (&type-predicate . 19))
(521 (type-predicate . 19))
(522 (&type-priority . 19))
(523 (type-priority . 19))
(524 (&type-superiors . 19))
(525 (type-superiors . 19))
(526 (&same-type? . 19))
(527 (same-type? . 19))
(528 (:singleton . 19))
(529 (singleton . 19))
(530 (singleton-value . 19))
(531 (compare-to . 19))
(532 (&disclose . 19))
(533 (disclose . 19))
(534 (proc->discloser . 19))
(535 (&number->string . 20))
(536 (real-number->string . 20))
(537 (number->string . 20))
(538 (integer->string . 20))
(539 (string->number . 20))
(540 (&really-string->number . 20))
(541 (really-string->number . 20))
(542 (:integer-string . 20))
(543 (set-exactness . 20))
(544 (string->integer . 20))
(545 (:thread . 21))
(546 (make-thread . 21))
(547 (thread-cell-env . 21))
(548 (thread-dynamic-point . 21))
(549 (thread-dynamic-env . 21))
(550 (get-dynamic-env . 21))
(551 (set-dynamic-env! . 21))
(552 (get-dynamic-point . 21))
(553 (set-dynamic-point! . 21))
(554 (with-dynamic-env . 21))
(555 (empty-dynamic-env . 21))
(556 (:fluid . 21))
(557 (make-fluid . 21))
(558 (fluid-top-level-value . 21))
(559 (set-fluid-top-level-value! . 21))
(560 (fluid . 21))
(561 (set-fluid! . 21))
(562 (let-fluid . 21))
(563 (let-fluids . 21))
(564 (fluid-cell-ref . 21))
(565 (fluid-cell-set! . 21))
(566 (:thread-cell . 21))
(567 (make-thread-cell . 21))
(568 (thread-cell-default . 21))
(569 (get-thread-cell-env . 21))
(570 (set-thread-cell-env! . 21))
(571 (empty-thread-cell-env . 21))
(572 (thread-cell-ref . 21))
(573 (thread-cell-set! . 21))
(574 (initialize-dynamic-state! . 21))
(575 (define-enumeration . 35))
(576 (components . 35))
(577 (enum . 35))
(578 (enumerand->name . 35))
(579 (name->enumerand . 35))
(580 (lookup-enumerand . 35))
(581 (architecture-version . 36))
(582 (bits-used-per-byte . 36))
(583 (byte-limit . 36))
(584 (define-instruction-set . 36))
(585 (op . 36))
(586 (op-enumeration . 36))
(587 (op-count . 36))
(588 (opcode-arg-specs . 36))
(589 (interrupt . 36))
(590 (interrupt-enumeration . 36))
(591 (interrupt-count . 36))
(592 (exception . 36))
(593 (exception-enumeration . 36))
(594 (exception-count . 36))
(595 (current-port-marker . 36))
(596 (current-port-marker-enumeration . 36))
(597 (current-port-marker-count . 36))
(598 (maximum-stack-args . 36))
(599 (*last-protocol* . 36))
(600 (next-protocol . 36))
(601 (two-byte-nargs-protocol . 36))
(602 (two-byte-nargs+list-protocol . 36))
(603 (big-stack-protocol . 36))
(604 (args+nargs-protocol . 36))
(605 (nary-dispatch-protocol . 36))
(606 (maximum-external-call-args . 36))
(607 (default-stack-space . 36))
(608 (environment-stack-size . 36))
(609 (continuation-stack-size . 36))
(610 (available-stack-space . 36))
(611 (time-option . 36))
(612 (time-option-enumeration . 36))
(613 (time-option-count . 36))
(614 (memory-status-option . 36))
(615 (memory-status-option-enumeration . 36))
(616 (memory-status-option-count . 36))
(617 (channel-status-option . 36))
(618 (channel-status-option-enumeration . 36))
(619 (channel-status-option-count . 36))
(620 (port-status-options . 36))
(621 (port-status-options-enumeration . 36))
(622 (port-status-options-count . 36))
(623 (stob . 36))
(624 (stob-enumeration . 36))
(625 (stob-count . 36))
(626 (least-b-vector-type . 36))
(627 (stob-data . 36))
(628 (:queue . 44))
(629 (really-make-queue . 44))
(630 (queue-tail . 44))
(631 (set-queue-tail! . 44))
(632 (queue-head . 44))
(633 (set-queue-head! . 44))
(634 (queue-uid . 44))
(635 (queue? . 44))
(636 (*queue-uid* . 44))
(637 (make-queue . 44))
(638 (queue-empty? . 44))
(639 (enqueue! . 44))
(640 (queue-front . 44))
(641 (dequeue! . 44))
(642 (maybe-dequeue! . 44))
(643 (on-queue? . 44))
(644 (delete-from-queue! . 44))
(645 (delete-from-queue-if! . 44))
(646 (queue->list . 44))
(647 (queue-length . 44))
(648 (*condition-types* . 27))
(649 (condition-supertypes . 27))
(650 (define-condition-type . 27))
(651 (condition-predicate . 27))
(652 (condition? . 27))
(653 (condition-type . 27))
(654 (condition-stuff . 27))
(655 (error? . 27))
(656 (call-error? . 27))
(657 (read-error? . 27))
(658 (exception? . 27))
(659 (exception-opcode . 27))
(660 (exception-reason . 27))
(661 (exception-arguments . 27))
(662 (make-exception . 27))
(663 (warning? . 27))
(664 (syntax-error? . 27))
(665 (interrupt? . 27))
(666 (*session-data-initializers* . 23))
(667 (make-session-data-slot! . 23))
(668 (session-data-ref . 23))
(669 (session-data-set! . 23))
(670 (initialize-session-data! . 23))
(671 (initialize-interrupts! . 38))
(672 (interrupt-handlers . 38))
(673 (set-interrupt-handler! . 38))
(674 (no-interrupts . 38))
(675 (all-interrupts . 38))
(676 (with-interrupts-inhibited . 38))
(677 (with-interrupts-allowed . 38))
(678 (disable-interrupts! . 38))
(679 (enable-interrupts! . 38))
(680 (with-interrupts . 38))
(681 (enabled-interrupts . 38))
(682 (*post-gc-procedures* . 38))
(683 (call-after-gc! . 38))
(684 (post-gc-handler . 38))
(685 (required-post-gc-space . 38))
(686 (space-shortage-handler . 38))
(687 (call-before-heap-overflow! . 38))
(688 (dynamic-wind . 22))
(689 (call-with-current-continuation . 22))
(690 (continuation->procedure . 22))
(691 (:point . 22))
(692 (make-point . 22))
(693 (point-parent . 22))
(694 (point-dynamic-env . 22))
(695 (point-out . 22))
(696 (point-in . 22))
(697 (point-depth . 22))
(698 (travel-to-point! . 22))
(699 (template-overhead . 32))
(700 (template-code . 32))
(701 (template-info . 32))
(702 (set-template-code! . 32))
(703 (set-template-info! . 32))
(704 (:closure . 34))
(705 (:code-vector . 34))
(706 (:location . 34))
(707 (:template . 34))
(708 (:channel . 34))
(709 (:port . 34))
(710 (:double . 34))
(711 (:weak-pointer . 34))
(712 (:shared-binding . 34))
(713 (continuation-cont . 33))
(714 (real-continuation-pc . 33))
(715 (real-continuation-template . 33))
(716 (continuation-env . 33))
(717 (exception-continuation-pc . 33))
(718 (exception-continuation-template . 33))
(719 (exception-continuation-exception . 33))
(720 (exception-continuation? . 33))
(721 (continuation-pc . 33))
(722 (continuation-template . 33))
(723 (normal-continuation-overhead . 33))
(724 (exception-continuation-overhead . 33))
(725 (continuation-arg . 33))
(726 (continuation-arg-count . 33))
(727 (:continuation . 33))
(728 (continuation-parent . 33))
(729 (define-exception-handler . 37))
(730 (signal-exception . 37))
(731 (exception-handlers . 37))
(732 (extend-opcode! . 37))
(733 (really-signal-condition . 37))
(734 (with-handler . 37))
(735 ($condition-handlers . 37))
(736 (initialize-exceptions! . 37))
(737 (last-resort-condition-handler . 37))
(738 (report-utter-lossage . 37))
(739 (continuation-preview . 37))
(740 (ignore-errors . 37))
(741 (report-errors-as-warnings . 37))
(742 (:thread . 40))
(743 (really-make-thread . 40))
(744 (thread-name . 40))
(745 (thread-uid . 40))
(746 (thread-current-task . 40))
(747 (set-thread-current-task! . 40))
(748 (thread-events . 40))
(749 (set-thread-events! . 40))
(750 (thread-data . 40))
(751 (set-thread-data! . 40))
(752 (thread-scheduler . 40))
(753 (set-thread-scheduler! . 40))
(754 (thread-time . 40))
(755 (set-thread-time! . 40))
(756 (thread-arguments . 40))
(757 (set-thread-arguments! . 40))
(758 (thread-cell . 40))
(759 (set-thread-cell! . 40))
(760 (thread-continuation . 40))
(761 (set-thread-continuation! . 40))
(762 (thread-cell-env . 40))
(763 (thread-dynamic-point . 40))
(764 (set-thread-dynamic-point! . 40))
(765 (thread-dynamic-env . 40))
(766 (thread? . 40))
(767 (*thread-uid* . 40))
(768 (make-thread . 40))
(769 (thread-top-level . 40))
(770 (thread-uid->thread . 40))
(771 (threads-with-uid . 40))
(772 (all-threads . 40))
(773 (add-event! . 40))
(774 (thunk->continuation . 40))
(775 (compose-continuation . 40))
(776 (enqueue-thread! . 40))
(777 (maybe-dequeue-thread! . 40))
(778 (thread-queue-empty? . 40))
(779 (current-thread . 40))
(780 (set-current-thread! . 40))
(781 (event-type . 40))
(782 (event-type-enumeration . 40))
(783 (event-type-count . 40))
(784 (run . 40))
(785 (find-and-run-next-thread . 40))
(786 (debit-thread-times-and-run! . 40))
(787 (handle-timer-interrupt . 40))
(788 (run-next-thread . 40))
(789 (min . 40))
(790 (switch-to-thread . 40))
(791 (run-thread . 40))
(792 (suspend . 40))
(793 (suspend-to . 40))
(794 (debit-down! . 40))
(795 (exit . 40))
(796 (wait . 40))
(797 (waiting? . 40))
(798 (block . 40))
(799 (relinquish-timeslice . 40))
(800 (block-on-queue . 40))
(801 (upcall . 40))
(802 (propogate-upcall . 40))
(803 (kill-thread! . 40))
(804 (terminate-thread! . 40))
(805 (interrupt-thread . 40))
(806 (get-next-event! . 40))
(807 (event-pending? . 40))
(808 (schedule-event . 40))
(809 (schedule-wakeup . 40))
(810 (show-running . 40))
(811 (running? . 40))
(812 (spawn . 40))
(813 (spawn-on-root . 40))
(814 (spawn-on-scheduler . 40))
(815 (narrow . 40))
(816 (make-ready . 40))
(817 (clear-thread-cell! . 40))
(818 (schedule-interrupt! . 40))
(819 (cancel-timer-interrupt! . 40))
(820 (interrupt-timer-time . 40))
(821 (real-time . 40))
(822 (with-threads . 40))
(823 (start-multitasking . 40))
(824 (deadlock? . 40))
(825 (terminate? . 40))
(826 (terminate-current-thread . 40))
(827 (root-scheduler-slot . 40))
(828 (root-scheduler . 40))
(829 (sleep . 40))
(830 (register-dozer . 40))
(831 (insert-dozer! . 40))
(832 (coerce-to-nonnegative-integer . 40))
(833 (*dozers* . 40))
(834 (insert . 40))
(835 (wake-some-threads . 40))
(836 (:lock . 45))
(837 (really-make-lock . 45))
(838 (lock-uid . 45))
(839 (lock-queue . 45))
(840 (lock-owner-uid . 45))
(841 (set-lock-owner-uid! . 45))
(842 (lock? . 45))
(843 (*lock-uid* . 45))
(844 (make-lock . 45))
(845 (obtain-lock . 45))
(846 (maybe-obtain-lock . 45))
(847 (obtain-lock-multiple . 45))
(848 (release-lock . 45))
(849 (:port-handler . 24))
(850 (really-make-port-handler . 24))
(851 (port-handler-steal . 24))
(852 (port-handler-ready? . 24))
(853 (port-handler-buffer-proc . 24))
(854 (port-handler-close . 24))
(855 (port-handler-discloser . 24))
(856 (port-handler? . 24))
(857 (make-port-handler . 24))
(858 (disclose-port . 24))
(859 (obtain-port-lock . 24))
(860 (maybe-obtain-port-lock . 24))
(861 (release-port-lock . 24))
(862 (initialize-i/o-handlers! . 24))
(863 (one-arg-proc->handler . 24))
(864 (two-arg-proc->handler . 24))
(865 (read-char-handler . 24))
(866 (fill-port-buffer! . 24))
(867 (write-char-handler . 24))
(868 (empty-port-buffer! . 24))
(869 (port-flushed? . 24))
(870 (set-port-flushed?! . 24))
(871 (protect-port-op . 24))
(872 (close-input-port . 24))
(873 (close-output-port . 24))
(874 (define-port-op . 24))
(875 (real-char-ready? . 24))
(876 (read-block . 24))
(877 (really-read-block . 24))
(878 (buffer-length . 24))
(879 (read-more . 24))
(880 (okay-limits? . 24))
(881 (write-block . 24))
(882 (write-string . 24))
(883 (output-port-ready? . 24))
(884 (write-buffered-block . 24))
(885 (write-unbuffered-block . 24))
(886 (force-output . 24))
(887 (really-force-output . 24))
(888 (force-output-if-open . 24))
(889 (default-buffer-size . 24))
(890 (open-port? . 24))
(891 (open-port-mask . 24))
(892 (input-port-mask . 24))
(893 (open-input-port-mask . 24))
(894 (open-input-port-status . 24))
(895 (open-input-port? . 24))
(896 (make-input-port-closed! . 24))
(897 (make-input-port . 24))
(898 (okay-buffer? . 24))
(899 (output-port-mask . 24))
(900 (open-output-port-mask . 24))
(901 (open-output-port-status . 24))
(902 (open-output-port? . 24))
(903 (make-output-port-closed! . 24))
(904 (make-output-port . 24))
(905 (make-unbuffered-output-port . 24))
(906 (null-output-port-handler . 24))
(907 (make-null-output-port . 24))
(908 (*flush-these-ports* . 24))
(909 (initialize-output-port-list! . 24))
(910 (periodically-force-output! . 24))
(911 (output-port-forcers . 24))
(912 (periodically-flushed-ports . 24))
(913 (make-forcing-thunk . 24))
(914 (steal-port! . 24))
(915 (really-steal-port! . 24))
(916 (make-buffered-input-port . 24))
(917 (make-buffered-output-port . 24))
(918 (make-buffered-input-port-handler . 24))
(919 (make-char-ready? . 24))
(920 (make-buffered-output-port-handler . 24))
(921 ($current-input-port . 24))
(922 ($current-output-port . 24))
(923 ($current-error-port . 24))
(924 ($current-noise-port . 24))
(925 (current-input-port . 24))
(926 (current-output-port . 24))
(927 (current-error-port . 24))
(928 (current-noise-port . 24))
(929 (initialize-i/o . 24))
(930 (with-current-ports . 24))
(931 (call-with-current-input-port . 24))
(932 (call-with-current-output-port . 24))
(933 (call-with-current-noise-port . 24))
(934 (silently . 24))
(935 (newline . 24))
(936 (char-ready? . 24))
(937 (output-port-option . 24))
(938 (input-port-option . 24))
(939 (write . 28))
(940 (recurring-write . 28))
(941 (write-boolean . 28))
(942 (write-number . 28))
(943 (write-char-literal . 28))
(944 (character-name . 28))
(945 (write-string-literal . 28))
(946 (write-list . 28))
(947 (quotation? . 28))
(948 (write-vector . 28))
(949 (write-other . 28))
(950 (display-type-name . 28))
(951 (display . 28))
(952 (preferred-case . 29))
(953 (script-skip . 29))
(954 (multi-line-comment-skip . 29))
(955 (read . 29))
(956 (sub-read-carefully . 29))
(957 (reader-token-marker . 29))
(958 (make-reader-token . 29))
(959 (reader-token? . 29))
(960 (close-paren . 29))
(961 (dot . 29))
(962 (sub-read . 29))
(963 (read-dispatch-vector . 29))
(964 (read-terminating?-vector . 29))
(965 (set-standard-syntax! . 29))
(966 (set-standard-read-macro! . 29))
(967 (sub-read-list . 29))
(968 (gobble-line . 29))
(969 (*sharp-macros* . 29))
(970 (define-sharp-macro . 29))
(971 (sub-read-token . 29))
(972 (parse-token . 29))
(973 (bel . 29))
(974 (bs . 29))
(975 (ff . 29))
(976 (cr . 29))
(977 (ht . 29))
(978 (vt . 29))
(979 (strange-symbol-names . 29))
(980 (p-c-v . 29))
(981 (reading-error . 29))
(982 (input-channel? . 25))
(983 (output-channel? . 25))
(984 (with-fs-context-aligned* . 25))
(985 (set-with-fs-context-aligned*! . 25))
(986 (open-input-channel . 25))
(987 (open-output-channel . 25))
(988 (close-input-channel . 25))
(989 (close-output-channel . 25))
(990 (channel-port-ready? . 26))
(991 (input-channel-handler . 26))
(992 (input-channel->port . 26))
(993 (input-channel+closer->port . 26))
(994 (real-input-channel->port . 26))
(995 (output-channel-handler . 26))
(996 (make-unbuffered-output-channel-handler . 26))
(997 (output-channel->port . 26))
(998 (output-channel+closer->port . 26))
(999 (real-output-channel->port . 26))
(1000 (maybe-force-output . 26))
(1001 (:channel-cell . 26))
(1002 (make-channel-cell . 26))
(1003 (channel-cell-closer . 26))
(1004 (channel-cell-ref . 26))
(1005 (channel-cell? . 26))
(1006 (port->channel . 26))
(1007 (open-input-file . 26))
(1008 (open-output-file . 26))
(1009 (call-with-input-file . 26))
(1010 (call-with-output-file . 26))
(1011 (with-input-from-file . 26))
(1012 (with-output-to-file . 26))
(1013 (force-channel-output-ports! . 26))
(1014 (initialize-channel-i/o! . 26))
(1015 (make-i/o-completion-handler . 26))
(1016 (waiting-for-i/o? . 26))
(1017 (wait-for-channel . 26))
(1018 (nothing . 26))
(1019 (channel-check-waiter . 26))
(1020 (wait-for-channels . 26))
(1021 (steal-channel! . 26))
(1022 (channel-wait-count-slot . 26))
(1023 (channel-wait-count . 26))
(1024 (increment-channel-wait-count! . 26))
(1025 (decrement-channel-wait-count! . 26))
(1026 (channel-wait-cells-slot . 26))
(1027 (add-channel-wait-cell! . 26))
(1028 (fetch-channel-wait-cell! . 26))
(1029 (channel-has-waiter? . 26))
(1030 (:table . 78))
(1031 (really-make-table . 78))
(1032 (table-set!-procedure . 78))
(1033 (set-table-set!-procedure! . 78))
(1034 (table-ref-procedure . 78))
(1035 (set-table-ref-procedure! . 78))
(1036 (table-data . 78))
(1037 (set-table-data! . 78))
(1038 (table-size . 78))
(1039 (set-table-size! . 78))
(1040 (table? . 78))
(1041 (table-ref . 78))
(1042 (table-set! . 78))
(1043 (linear-table-size-limit . 78))
(1044 (next-table-size . 78))
(1045 (make-table-maker . 78))
(1046 (assoc->table-maker . 78))
(1047 (null-entry . 78))
(1048 (new-entry . 78))
(1049 (entry-value . 78))
(1050 (entry-key . 78))
(1051 (set-entry-value! . 78))
(1052 (delete-entry! . 78))
(1053 (make-assoc . 78))
(1054 (make-linear-table-ref . 78))
(1055 (make-linear-table-set! . 78))
(1056 (make->hash-table . 78))
(1057 (make-hash-table-ref . 78))
(1058 (make-hash-table-set! . 78))
(1059 (expand-hash-table! . 78))
(1060 (table-enter-alist! . 78))
(1061 (table-expand-table! . 78))
(1062 (table-walk . 78))
(1063 (really-table-walk . 78))
(1064 (alist-walk . 78))
(1065 (make-table-immutable! . 78))
(1066 (table->entry-list . 78))
(1067 (default-table-hash-function . 78))
(1068 (eqv?-assoc . 78))
(1069 (default-table-assoc . 78))
(1070 (symbol-hash . 78))
(1071 (make-table . 78))
(1072 (make-string-table . 78))
(1073 (make-symbol-table . 78))
(1074 (make-integer-table . 78))
(1075 (make-population . 47))
(1076 (add-to-population! . 47))
(1077 (weak-memq . 47))
(1078 (population-reduce . 47))
(1079 (population->list . 47))
(1080 (walk-population . 47))
(1081 (:meta-type . 49))
(1082 (really-make-type . 49))
(1083 (type-info . 49))
(1084 (type-more . 49))
(1085 (type-mask . 49))
(1086 (meta-type? . 49))
(1087 (make-type . 49))
(1088 (name->type-table . 49))
(1089 (mask->name-table . 49))
(1090 (name->type . 49))
(1091 (set-type-name! . 49))
(1092 (*mask* . 49))
(1093 (new-type-bit . 49))
(1094 (mask->type . 49))
(1095 (bottom-type . 49))
(1096 (error-type . 49))
(1097 (bottom-type? . 49))
(1098 (new-atomic-type . 49))
(1099 (named-atomic-type . 49))
(1100 (syntax-type . 49))
(1101 (other-static-type . 49))
(1102 (empty-rail-type . 49))
(1103 (rail-type . 49))
(1104 (make-optional-type . 49))
(1105 (make-rest-type . 49))
(1106 (head-type . 49))
(1107 (head-type-really . 49))
(1108 (tail-type . 49))
(1109 (empty-rail-type? . 49))
(1110 (rest-type? . 49))
(1111 (optional-type? . 49))
(1112 (mask/no-values . 49))
(1113 (mask/two-or-more . 49))
(1114 (mask/&rest . 49))
(1115 (value-type . 49))
(1116 (mask/value . 49))
(1117 (value-type? . 49))
(1118 (any-values-type . 49))
(1119 (any-arguments-type . 49))
(1120 (mask/one-or-more . 49))
(1121 (same-type? . 49))
(1122 (subtype? . 49))
(1123 (meet-type . 49))
(1124 (other-type-info . 49))
(1125 (meet-rail . 49))
(1126 (meet-procedure . 49))
(1127 (meet? . 49))
(1128 (meet-procedure? . 49))
(1129 (join-type . 49))
(1130 (join-rail . 49))
(1131 (join-procedure . 49))
(1132 (number-hierarchy . 49))
(1133 (integer-type . 49))
(1134 (rational-type . 49))
(1135 (real-type . 49))
(1136 (complex-type . 49))
(1137 (number-type . 49))
(1138 (exact-type . 49))
(1139 (inexact-type . 49))
(1140 (exact-integer-type . 49))
(1141 (inexact-real-type . 49))
(1142 (boolean-type . 49))
(1143 (pair-type . 49))
(1144 (null-type . 49))
(1145 (record-type . 49))
(1146 (any-procedure-type . 49))
(1147 (other-value-type . 49))
(1148 (mask/other . 49))
(1149 (make-other-type . 49))
(1150 (char-type . 49))
(1151 (unspecific-type . 49))
(1152 (string-type . 49))
(1153 (symbol-type . 49))
(1154 (vector-type . 49))
(1155 (escape-type . 49))
(1156 (structure-type . 49))
(1157 (mask/procedure . 49))
(1158 (procedure-type . 49))
(1159 (make-procedure-type . 49))
(1160 (procedure-type-domain . 49))
(1161 (procedure-type-codomain . 49))
(1162 (restrictive? . 49))
(1163 (sexp->type . 49))
(1164 (sexp->values-type . 49))
(1165 (type->sexp . 49))
(1166 (atomic-type->sexp . 49))
(1167 (rail-type->sexp . 49))
(1168 (disjoin-type . 49))
(1169 (disjoin-rest . 49))
(1170 (mask/number . 49))
(1171 (make-some-values-type . 49))
(1172 (proc . 49))
(1173 (some-values . 49))
(1174 (procedure-type? . 49))
(1175 (fixed-arity-procedure-type? . 49))
(1176 (procedure-type-arity . 49))
(1177 (procedure-type-argument-types . 49))
(1178 (variable-type . 49))
(1179 (variable-type? . 49))
(1180 (variable-value-type . 49))
(1181 (usual-variable-type . 49))
(1182 (undeclared-type . 49))
(1183 (compatible-types? . 49))
(1184 (:interface . 66))
(1185 (really-make-interface . 66))
(1186 (interface-name . 66))
(1187 (set-interface-name! . 66))
(1188 (interface-clients . 66))
(1189 (walk-method . 66))
(1190 (ref-method . 66))
(1191 (interface? . 66))
(1192 (make-interface . 66))
(1193 (interface-ref . 66))
(1194 (interface-member? . 66))
(1195 (for-each-declaration . 66))
(1196 (note-reference-to-interface! . 66))
(1197 (note-interface-name! . 66))
(1198 (make-simple-interface . 66))
(1199 (make-simple-interface-table . 66))
(1200 (make-compound-interface . 66))
(1201 (make-modified-interface . 66))
(1202 (process-commands . 66))
(1203 (okay-command? . 66))
(1204 (proper-list? . 66))
(1205 (process-prefix . 66))
(1206 (process-expose . 66))
(1207 (process-hide . 66))
(1208 (process-alias . 66))
(1209 (process-rename . 66))
(1210 (interface-lookup . 66))
(1211 (make-lookup . 66))
(1212 (prefix-match? . 66))
(1213 (remove-prefix . 66))
(1214 (make-default-walker . 66))
(1215 (cdr-assq . 66))
(1216 (make-alist-walker . 66))
(1217 (symbol-append . 66))
(1218 (binding? . 50))
(1219 (binding-type . 50))
(1220 (binding-place . 50))
(1221 (binding-static . 50))
(1222 (binding-path . 50))
(1223 (set-binding-place! . 50))
(1224 (make-binding . 50))
(1225 (add-path . 50))
(1226 (clobber-binding! . 50))
(1227 (impose-type . 50))
(1228 (forget-integration . 50))
(1229 (same-denotation? . 50))
(1230 (maybe-fix-place! . 50))
(1231 (follow-forwarding-pointers . 50))
(1232 (name? . 51))
(1233 (:generated . 51))
(1234 (make-generated . 51))
(1235 (generated-parent-name . 51))
(1236 (generated-env . 51))
(1237 (generated-token . 51))
(1238 (generated-name . 51))
(1239 (generated? . 51))
(1240 (generate-name . 51))
(1241 (generated-uid . 51))
(1242 (*generated-uid* . 51))
(1243 (name->symbol . 51))
(1244 (name-hash . 51))
(1245 (make-name-table . 51))
(1246 (desyntaxify . 51))
(1247 (make-qualified . 51))
(1248 (qualified? . 51))
(1249 (qualified-parent-name . 51))
(1250 (qualified-symbol . 51))
(1251 (qualified-uid . 51))
(1252 (name->qualified . 51))
(1253 (qualify-parent . 51))
(1254 (:transform . 51))
(1255 (really-make-transform . 51))
(1256 (transform-id . 51))
(1257 (transform-source . 51))
(1258 (transform-aux-names . 51))
(1259 (transform-type . 51))
(1260 (transform-env . 51))
(1261 (transform-procedure . 51))
(1262 (transform? . 51))
(1263 (make-transform . 51))
(1264 (maybe-apply-macro-transform . 51))
(1265 (apply-inline-transform . 51))
(1266 (make-keyword-comparator . 51))
(1267 (name->source-name . 51))
(1268 (bind-aliases . 51))
(1269 (make-name-generator . 51))
(1270 (lookup . 51))
(1271 (lookup . 54))
(1272 (bind1 . 54))
(1273 (bind . 54))
(1274 (bindrec . 54))
(1275 (make-compiler-env . 54))
(1276 (funny-name/macro-eval . 54))
(1277 (environment-macro-eval . 54))
(1278 (funny-name/define! . 54))
(1279 (environment-define! . 54))
(1280 (funny-name/package . 54))
(1281 (extract-package-from-environment . 54))
(1282 (funny-name/source-file-name . 54))
(1283 (bind-source-file-name . 54))
(1284 (source-file-name . 54))
(1285 (:thingie . 52))
(1286 (make-thingie . 52))
(1287 (thingie-want-type . 52))
(1288 (thingie-name . 52))
(1289 (thingie-binding . 52))
(1290 (thingie? . 52))
(1291 (:structure . 67))
(1292 (really-make-structure . 67))
(1293 (structure-name . 67))
(1294 (set-structure-name! . 67))
(1295 (structure-clients . 67))
(1296 (structure-package . 67))
(1297 (structure-interface-really . 67))
(1298 (set-structure-interface! . 67))
(1299 (structure-interface-thunk . 67))
(1300 (structure? . 67))
(1301 (structure-interface . 67))
(1302 (initialize-structure! . 67))
(1303 (make-structure . 67))
(1304 (make-modified-structure . 67))
(1305 (note-structure-name! . 67))
(1306 (structure-unstable? . 67))
(1307 (for-each-export . 67))
(1308 (:package . 67))
(1309 (really-make-package . 67))
(1310 (package-cached . 67))
(1311 (package-clients . 67))
(1312 (package-real-undefined-but-assigneds . 67))
(1313 (set-package-undefined-but-assigneds! . 67))
(1314 (package-real-undefineds . 67))
(1315 (set-package-undefineds! . 67))
(1316 (package-accesses-thunk . 67))
(1317 (package-opens-thunk . 67))
(1318 (set-package-opens-thunk! . 67))
(1319 (package->environment . 67))
(1320 (set-package->environment! . 67))
(1321 (package-loaded? . 67))
(1322 (set-package-loaded?! . 67))
(1323 (package-clauses . 67))
(1324 (package-file-name . 67))
(1325 (package-get-location . 67))
(1326 (set-package-get-location! . 67))
(1327 (package-integrate? . 67))
(1328 (set-package-integrate?! . 67))
(1329 (package-unstable? . 67))
(1330 (package-definitions . 67))
(1331 (package-opens-really . 67))
(1332 (set-package-opens! . 67))
(1333 (package-uid . 67))
(1334 (package? . 67))
(1335 (make-package . 67))
(1336 (really-package->environment . 67))
(1337 (lazy-table-accessor . 67))
(1338 (package-undefineds . 67))
(1339 (package-undefined-but-assigneds . 67))
(1340 (new-package-uid . 67))
(1341 (*package-uid* . 67))
(1342 (package-name-table . 67))
(1343 (package-name . 67))
(1344 (note-package-name! . 67))
(1345 (package-opens . 67))
(1346 (initialize-package-if-necessary! . 67))
(1347 (package-accesses . 67))
(1348 (make-simple-package . 67))
(1349 (package-definition . 67))
(1350 (package-define! . 67))
(1351 (package-add-static! . 67))
(1352 (package-refine-type! . 67))
(1353 (package-lookup . 67))
(1354 (really-package-lookup . 67))
(1355 (search-opens . 67))
(1356 (structure-lookup . 67))
(1357 (real-structure-lookup . 67))
(1358 (generic-lookup . 67))
(1359 (initialize-package! . 67))
(1360 (for-each-definition . 67))
(1361 (get-new-location . 67))
(1362 (make-new-location . 67))
(1363 ($get-location . 67))
(1364 (*location-uid* . 67))
(1365 (location-info-table . 67))
(1366 (flush-location-names . 67))
(1367 (link! . 67))
(1368 (really-link! . 67))
(1369 (get-location . 67))
(1370 (location-on-demand . 67))
(1371 (get-undefined . 67))
(1372 (location-for-assignment . 67))
(1373 (package-note-caching! . 67))
(1374 (note-caching! . 67))
(1375 (get-location-for-unassignable . 67))
(1376 (get-location-for-undefined . 67))
(1377 ($note-undefined . 67))
(1378 (cenv->package . 67))
(1379 (location-for-reference . 67))
(1380 (noting-undefined-variables . 67))
(1381 (print-undefined-names . 67))
(1382 (environment-ref . 80))
(1383 (environment-set! . 80))
(1384 (environment-define! . 80))
(1385 (*structure-ref . 80))
(1386 (carefully . 80))
(1387 ($interaction-environment . 80))
(1388 (interaction-environment . 80))
(1389 (set-interaction-environment! . 80))
(1390 (with-interaction-environment . 80))
(1391 (scheme-report-environment . 80))
(1392 (*scheme-report-environment* . 80))
(1393 (*null-environment* . 80))
(1394 (*scheme-report-number* . 80))
(1395 (set-scheme-report-environment! . 80))
(1396 (null-environment . 80))
(1397 (make-reflective-tower . 80))
(1398 (set-reflective-tower-maker! . 80))
(1399 (namestring . 79))
(1400 (directory-component-separator . 79))
(1401 (type-component-separator . 79))
(1402 (namestring-component . 79))
(1403 (file-name-preferred-case . 79))
(1404 (*scheme-file-type* . 79))
(1405 (*load-file-type* . 79))
(1406 (file-name-directory . 79))
(1407 (file-name-nondirectory . 79))
(1408 (file-nondirectory-position . 79))
(1409 (string-posq . 79))
(1410 (*translations* . 79))
(1411 (translations . 79))
(1412 (set-translation! . 79))
(1413 (translate . 79))
(1414 ($note-file-package . 64))
(1415 (read-forms . 64))
(1416 (read-forms-from-port . 64))
(1417 (:operator . 53))
(1418 (make-operator . 53))
(1419 (operator-name . 53))
(1420 (operator-uid . 53))
(1421 (operator-nargs . 53))
(1422 (operator-type . 53))
(1423 (set-operator-type! . 53))
(1424 (operator? . 53))
(1425 (usual-operator-type . 53))
(1426 (get-operator . 53))
(1427 (*operator-uid* . 53))
(1428 (operators-table . 53))
(1429 (number-of-operators . 53))
(1430 (the-operators . 53))
(1431 (make-operator-table . 53))
(1432 (operator-table-ref . 53))
(1433 (operator-lookup . 53))
(1434 (operator-define! . 53))
(1435 (:node . 53))
(1436 (really-make-node . 53))
(1437 (node-plist . 53))
(1438 (set-node-plist! . 53))
(1439 (node-form . 53))
(1440 (node-operator-id . 53))
(1441 (node? . 53))
(1442 (make-node . 53))
(1443 (node-ref . 53))
(1444 (node-set! . 53))
(1445 (node-operator . 53))
(1446 (node-predicate . 53))
(1447 (make-similar-node . 53))
(1448 (force-node . 53))
(1449 (schemify . 53))
(1450 (schemifiers . 53))
(1451 (schemify-node . 53))
(1452 (schemify-nodes . 53))
(1453 (define-schemifier . 53))
(1454 (schemify-lambda . 53))
(1455 (schemify-formals . 53))
(1456 (schemify-sexp . 53))
(1457 (number-of-required-args . 57))
(1458 (n-ary? . 57))
(1459 (normalize-formals . 57))
(1460 (scan-forms . 55))
(1461 (expand-scanned-form . 55))
(1462 (scan-define . 55))
(1463 (expand-define . 55))
(1464 (scan-define-syntax . 55))
(1465 (expand-form . 55))
(1466 (expand-head . 55))
(1467 (destructure-define . 55))
(1468 (make-operator-predicate . 55))
(1469 (define? . 55))
(1470 (begin? . 55))
(1471 (define-syntax? . 55))
(1472 (static-value . 55))
(1473 (expand-body . 55))
(1474 (scan-body-forms . 55))
(1475 (body-lossage . 55))
(1476 (expand . 55))
(1477 (expand-list . 55))
(1478 (expand-literal . 55))
(1479 (expand-call . 55))
(1480 (expand-name . 55))
(1481 (expand-macro-application . 55))
(1482 (expand-operator-form . 55))
(1483 (expanders . 55))
(1484 (define-expander . 55))
(1485 (unspecific-node . 55))
(1486 (expand-structure-ref . 55))
(1487 (expand-lambda . 55))
(1488 (bind-names . 55))
(1489 (names? . 55))
(1490 (expand-letrec . 55))
(1491 (process-syntax . 55))
(1492 (this-long? . 55))
(1493 (at-least-this-long? . 55))
(1494 (specs? . 55))
(1495 (literal? . 55))
(1496 (syntax? . 55))
(1497 (begin-node? . 55))
(1498 (call-node? . 55))
(1499 (name-node? . 55))
(1500 (operator/literal . 55))
(1501 (operator/quote . 55))
(1502 (operator/call . 55))
(1503 (operator/name . 55))
(1504 (operator/unspecific . 55))
(1505 (operator/unassigned . 55))
(1506 (operator/lambda . 55))
(1507 (operator/begin . 55))
(1508 (operator/letrec . 55))
(1509 (operator/define . 55))
(1510 (operator/define-syntax . 55))
(1511 (operator/primitive-procedure . 55))
(1512 (operator/structure-ref . 55))
(1513 (:primop . 61))
(1514 (make-primop . 61))
(1515 (primop-compilator . 61))
(1516 (primop-closed . 61))
(1517 (primop-type . 61))
(1518 (primop-name . 61))
(1519 (primop? . 61))
(1520 (primop-table . 61))
(1521 (walk-primops . 61))
(1522 (define-compiler-primitive . 61))
(1523 (get-primop . 61))
(1524 (:debug-data . 58))
(1525 (make-debug-data . 58))
(1526 (debug-data-source . 58))
(1527 (set-debug-data-source! . 58))
(1528 (debug-data-env-maps . 58))
(1529 (set-debug-data-env-maps! . 58))
(1530 (debug-data-pc-in-parent . 58))
(1531 (debug-data-parent . 58))
(1532 (debug-data-name . 58))
(1533 (debug-data-uid . 58))
(1534 (debug-data? . 58))
(1535 (maximum-stack-use . 59))
(1536 (protocol-skip . 59))
(1537 (stack-delta . 59))
(1538 (define-delta . 59))
(1539 (stack-max . 59))
(1540 (nothing . 59))
(1541 (popper . 59))
(1542 (pusher . 59))
(1543 (continue . 59))
(1544 (continuer . 59))
(1545 (do-make-cont . 59))
(1546 (stack-function . 59))
(1547 (arg-spec-size . 59))
(1548 (imax . 59))
(1549 (get-offset . 59))
(1550 (new-template-uid . 60))
(1551 (*template-uid* . 60))
(1552 (template-uid . 60))
(1553 (set-template-uid! . 60))
(1554 (debug-flag-names . 60))
(1555 (type/debug-flags . 60))
(1556 (make-debug-flags . 60))
(1557 ($debug-flags . 60))
(1558 (debug-flag-accessor . 60))
(1559 (debug-flag-modifier . 60))
(1560 (keep-source-code? . 60))
(1561 (keep-environment-maps? . 60))
(1562 (keep-procedure-names? . 60))
(1563 (keep-file-names? . 60))
(1564 (tabulate-debug-data? . 60))
(1565 (debug-data-table . 60))
(1566 (with-fresh-compiler-state . 60))
(1567 (saving-and-restoring . 60))
(1568 (debug-data->info . 60))
(1569 (get-debug-data . 60))
(1570 (note-debug-data! . 60))
(1571 (new-debug-data . 60))
(1572 (make-segment . 60))
(1573 (segment-size . 60))
(1574 (segment-emitter . 60))
(1575 (segment->template . 60))
(1576 (segment-data->template . 60))
(1577 (check-stack-use . 60))
(1578 (:assembly-state . 60))
(1579 (make-assembly-state . 60))
(1580 (astate-literals . 60))
(1581 (set-astate-literals! . 60))
(1582 (astate-count . 60))
(1583 (set-astate-count! . 60))
(1584 (astate-pc . 60))
(1585 (set-astate-pc! . 60))
(1586 (astate-code-vector . 60))
(1587 (make-astate . 60))
(1588 (emit-byte! . 60))
(1589 (literal->index . 60))
(1590 (literal-position . 60))
(1591 (position . 60))
(1592 (emit-literal! . 60))
(1593 (emit-segment! . 60))
(1594 (empty-segment . 60))
(1595 (instruction . 60))
(1596 (sequentially . 60))
(1597 (sequentially-2 . 60))
(1598 (instruction-with-literal . 60))
(1599 (instruction-with-location . 60))
(1600 (template . 60))
(1601 (make-label . 60))
(1602 (instruction-using-label . 60))
(1603 (computed-goto-label-size . 60))
(1604 (computed-goto-instruction . 60))
(1605 (attach-label . 60))
(1606 (insert-label! . 60))
(1607 (code-vector-set2! . 60))
(1608 (two-byte-limit . 60))
(1609 (high-byte . 60))
(1610 (low-byte . 60))
(1611 ($debug-data . 60))
(1612 (note-source-code . 60))
(1613 (note-environment . 60))
(1614 (emit-with-environment-maps! . 60))
(1615 ($environment-maps . 60))
(1616 (node-type . 62))
(1617 (reconstruct-type . 62))
(1618 (reconstruct . 62))
(1619 (examine . 62))
(1620 (reconstructors . 62))
(1621 (define-reconstructor . 62))
(1622 (reconstruct-lambda . 62))
(1623 (careful-codomain . 62))
(1624 (reconstruct-name . 62))
(1625 (proc->reconstructor . 62))
(1626 (reconstruct-call . 62))
(1627 (fork-constraints . 62))
(1628 (node->type . 62))
(1629 (name-node? . 62))
(1630 (lambda-node? . 62))
(1631 (literal-node? . 62))
(1632 (primop-reconstructors . 62))
(1633 (define-primop-reconstructor . 62))
(1634 (reconstruct-apply . 62))
(1635 (constant-type . 62))
(1636 (compile-expression . 63))
(1637 (compile . 63))
(1638 (compilators . 63))
(1639 (define-compilator . 63))
(1640 (compile-constant . 63))
(1641 (compile-call . 63))
(1642 (compile-name-call . 63))
(1643 (compile-redex . 63))
(1644 (compile-unknown-call . 63))
(1645 (maybe-push-continuation . 63))
(1646 (fixup-source . 63))
(1647 (push-arguments . 63))
(1648 (push-all-with-names . 63))
(1649 (compile-lambda . 63))
(1650 (compile-lambda-code . 63))
(1651 (name-node->symbol . 63))
(1652 (set-lexical-offsets! . 63))
(1653 (compile-flat-lambda . 63))
(1654 (get-variables-offsets . 63))
(1655 (variable-env-data . 63))
(1656 (sort-list . 63))
(1657 (make-cont . 63))
(1658 (cont-segment . 63))
(1659 (cont-source-info . 63))
(1660 (return-cont-segment . 63))
(1661 (return-cont . 63))
(1662 (return-cont? . 63))
(1663 (fall-through-cont . 63))
(1664 (fall-through-cont? . 63))
(1665 (ignore-values-segment . 63))
(1666 (ignore-values-cont . 63))
(1667 (ignore-values-cont? . 63))
(1668 (deliver-value . 63))
(1669 (named-cont . 63))
(1670 (cont-name . 63))
(1671 (name-node-binding . 63))
(1672 (generate-trap . 63))
(1673 (type-check . 63))
(1674 (set-type-check?! . 63))
(1675 (*type-check?* . 63))
(1676 (diagnose-call-error . 63))
(1677 (lambda-node? . 63))
(1678 (name-node? . 63))
(1679 (literal-node? . 63))
(1680 (operator/lambda . 63))
(1681 (operator/set! . 63))
(1682 (operator/call . 63))
(1683 (operator/begin . 63))
(1684 (direct-compilator . 63))
(1685 (direct-closed-compilator . 63))
(1686 (nargs->domain . 63))
(1687 (get-primop-type . 63))
(1688 (primop-types . 63))
(1689 (define-simple-primitive . 63))
(1690 (simple-compilator . 63))
(1691 (simple-closed-compilator . 63))
(1692 (symbol-append . 63))
(1693 (define-stob-predicate . 63))
(1694 (define-data-struct-primitives . 63))
(1695 (define-vector-primitives . 63))
(1696 (define-n-ary-compiler-primitive . 63))
(1697 (n-ary-primitive-compilator . 63))
(1698 (call-on-arg-and-id . 63))
(1699 (call-on-args . 63))
(1700 (op/unspecific . 63))
(1701 (op/literal . 63))
(1702 (push-all-but-last . 63))
(1703 (dispatch-protocol-size . 63))
(1704 (make-dispatch-protocol . 63))
(1705 (compile-forms . 63))
(1706 (compile-forms-loop . 63))
(1707 (compile-form . 63))
(1708 (define-node? . 63))
(1709 (compile-definition . 63))
(1710 (location-contents-offset . 63))
(1711 (make-startup-procedure . 63))
(1712 (append-templates . 63))
(1713 (an-ignore-values-cont . 63))
(1714 (eval . 81))
(1715 (load-into . 81))
(1716 (eval-from-file . 81))
(1717 (load . 81))
(1718 (load-port . 81))
(1719 (really-load-into . 81))
(1720 (compile-and-run . 81))
(1721 (display-condition . 48))
(1722 (really-display-condition . 48))
(1723 (*depth* . 48))
(1724 (*length* . 48))
(1725 (&disclose-condition . 48))
(1726 (disclose-condition . 48))
(1727 (limited-write . 48))
(1728 (command-processor . 85))
(1729 (mini-load . 85))
(1730 (read-string . 85))
(1731 (:sigevent . 39))
(1732 (really-make-sigevent . 39))
(1733 (sigevent-next . 39))
(1734 (set-sigevent-next! . 39))
(1735 (sigevent-type . 39))
(1736 (set-sigevent-type! . 39))
(1737 (sigevent? . 39))
(1738 (make-sigevent . 39))
(1739 (empty-sigevent . 39))
(1740 (*most-recent-sigevent* . 39))
(1741 (most-recent-sigevent . 39))
(1742 (sigevent-thread-queue . 39))
(1743 (rts-next-sigevent . 39))
(1744 (rts-next-sigevent/no-wait . 39))
(1745 (register-interrupt . 39))
(1746 (sigevents-running? . 39))
(1747 (waiting-for-sigevent? . 39))
(1748 (with-sigevents . 39))
(1749 (schedule-timer-interrupt! . 39))
(1750 (enum-case . 43))
(1751 (run-threads . 41))
(1752 (run-threads-with-housekeeper . 41))
(1753 (round-robin-event-handler . 41))
(1754 (handle-narrow-event . 41))
(1755 (make-counter . 41))
(1756 (counter-value . 41))
(1757 (increment-counter! . 41))
(1758 (decrement-counter! . 41))
(1759 (root-scheduler . 42))
(1760 (make-root-event-handler . 42))
(1761 (root-handler . 42))
(1762 (cheap-display-condition . 42))
(1763 (abort-token . 42))
(1764 (scheme-exit-now . 42))
(1765 (root-wait . 42))
(1766 (one-day-of-milliseconds . 42))
(1767 (do-some-waiting . 42))
(1768 (deadlock-handler . 42))
(1769 (call-when-deadlocked! . 42))
(1770 (spawn-output-forcers . 42))
(1771 (unspecific . 42))
(1772 (usual-resumer . 46))
(1773 (initialize-rts . 46))
(1774 (start . 86))
(1775 (make-built-in-structures . 86))
(1776 (initialize-interaction-environment! . 86))
(1777 (make-initial-package . 86))
(1778 (make-tower . 86))
(1779 (the-usual-transforms . 56))
(1780 (define-usual-macro . 56))
(1781 (usual-transform . 56))
(1782 (do-spec? . 56))
(1783 (specs? . 56))
(1784 (case-clause? . 56))
(1785 (process-rules . 56))
(1786 (segment-pattern? . 56))
(1787 (segment-template? . 56))
(1788 (segment-depth . 56))
(1789 (segment-tail . 56))
(1790 (indicators-for-zero-or-more . 56))
(1791 (find-free-names-in-syntax-rules . 56))
(1792 (strongly-connected-components . 77))
(1793 (find-next-vertex . 77))
(1794 (:vertex . 77))
(1795 (really-make-vertex . 77))
(1796 (vertex-lowpoint . 77))
(1797 (set-vertex-lowpoint! . 77))
(1798 (vertex-parent . 77))
(1799 (set-vertex-parent! . 77))
(1800 (vertex-index . 77))
(1801 (set-vertex-index! . 77))
(1802 (vertex-stack . 77))
(1803 (set-vertex-stack! . 77))
(1804 (vertex-edges . 77))
(1805 (set-vertex-edges! . 77))
(1806 (vertex-data . 77))
(1807 (vertex? . 77))
(1808 (make-vertex . 77))
(1809 (make-vertices . 77))
(1810 (do-vertex . 77))
(1811 (get-strong . 77))
(1812 (end-vertex . 77))
(1813 (unwind-stack . 77))
(1814 (follow-edge . 77))
(1815 (pop-vertex-edge! . 77))
(1816 (find-usages . 74))
(1817 (maybe-update-known-type . 74))
(1818 (find-node-usages . 74))
(1819 (analyze . 74))
(1820 (analyze-nodes . 74))
(1821 (usage-analyzers . 74))
(1822 (define-usage-analyzer . 74))
(1823 (nothing . 74))
(1824 (add-if-free . 74))
(1825 (analyze-letrec . 74))
(1826 (:usage . 74))
(1827 (really-make-usage . 74))
(1828 (usage-assignment-count . 74))
(1829 (set-assignment! . 74))
(1830 (usage-operator-count . 74))
(1831 (set-operator! . 74))
(1832 (usage-reference-count . 74))
(1833 (set-reference! . 74))
(1834 (usage-name-node . 74))
(1835 (usage? . 74))
(1836 (make-usage . 74))
(1837 (make-package-usage . 74))
(1838 (package-usage? . 74))
(1839 (usage-incrementator . 74))
(1840 (note-reference! . 74))
(1841 (note-operator! . 74))
(1842 (note-assignment! . 74))
(1843 (lambda-node? . 74))
(1844 (quote-node? . 74))
(1845 (literal-node? . 74))
(1846 (call-node? . 74))
(1847 (name-node? . 74))
(1848 (define-node? . 74))
(1849 (sort-forms . 74))
(1850 (stuff-count . 74))
(1851 (maybe-make-aliased . 74))
(1852 (topologically-sort . 74))
(1853 (:form . 74))
(1854 (really-make-form . 74))
(1855 (form-temp . 74))
(1856 (set-form-temp! . 74))
(1857 (form-free . 74))
(1858 (set-form-free! . 74))
(1859 (form-unaliased? . 74))
(1860 (set-form-unaliased?! . 74))
(1861 (form-aliases . 74))
(1862 (set-form-aliases! . 74))
(1863 (form-node . 74))
(1864 (form? . 74))
(1865 (make-form . 74))
(1866 (insert-aliases . 74))
(1867 (make-inline-transform . 76))
(1868 (clean-node . 76))
(1869 (clean-lambda . 76))
(1870 (clean-lookup . 76))
(1871 (unused-name . 76))
(1872 (remove-bindings . 76))
(1873 (inline-transform . 76))
(1874 (make-substitution . 76))
(1875 (reconstitute . 76))
(1876 (reconstitute-name . 76))
(1877 (operator/name . 76))
(1878 (operator/literal . 76))
(1879 (qualified->name . 76))
(1880 (get-qualified-env . 76))
(1881 (quote-node? . 76))
(1882 (call-node? . 76))
(1883 (lambda-node? . 76))
(1884 (name-node? . 76))
(1885 (loophole-node? . 76))
(1886 (operator . 83))
(1887 (primop . 83))
(1888 (simple-interface . 83))
(1889 (package . 83))
(1890 (transform . 83))
(1891 (package-define-static! . 83))
(1892 (:syntax . 72))
(1893 (:values . 72))
(1894 (:arguments . 72))
(1895 (:value . 72))
(1896 (procedure . 72))
(1897 (:boolean . 72))
(1898 (:char . 72))
(1899 (:null . 72))
(1900 (:unspecific . 72))
(1901 (:number . 72))
(1902 (:complex . 72))
(1903 (:real . 72))
(1904 (:rational . 72))
(1905 (:integer . 72))
(1906 (:exact-integer . 72))
(1907 (:pair . 72))
(1908 (:string . 72))
(1909 (:symbol . 72))
(1910 (:vector . 72))
(1911 (:procedure . 72))
(1912 (:input-port . 72))
(1913 (:output-port . 72))
(1914 (:error . 72))
(1915 (:escape . 72))
(1916 (:structure . 72))
(1917 (:type . 72))
(1918 (def . 71))
(1919 (really-def . 71))
(1920 (define-multiple . 71))
(1921 (define-interface . 71))
(1922 (compound-interface . 71))
(1923 (export . 71))
(1924 (define-structure . 71))
(1925 (define-structures . 71))
(1926 (structure . 71))
(1927 (structures . 71))
(1928 (modify . 71))
(1929 (subset . 71))
(1930 (with-prefix . 71))
(1931 (a-package . 71))
(1932 (receive . 71))
(1933 (define-reflective-tower-maker . 71))
(1934 (export-reflective-tower-maker . 71))
(1935 (define-module . 71))
(1936 (make-a-package . 71))
(1937 (loser . 71))
(1938 (interface-of . 71))
(1939 (*verify-later!* . 71))
(1940 (verify-later! . 71))
(1941 (set-verify-later! . 71))
(1942 (note-name! . 71))
(1943 (optimizers-table . 69))
(1944 (set-optimizer! . 69))
(1945 (get-optimizer . 69))
(1946 (apply-optimizers . 69))
(1947 (collect-packages . 68))
(1948 (package-source . 68))
(1949 (read-files . 68))
(1950 (package-optimizer-names . 68))
(1951 (check-structure . 68))
(1952 (compile-package . 70))
(1953 (expand-package . 70))
(1954 (define-usual-transform . 70))
(1955 (define-primitives . 70))
(1956 (make-define-primitive-node . 70))
(1957 (operator/define . 70))
(1958 (operator/primitive-procedure . 70))
(1959 (analyze-forms . 75))
(1960 (analyze-form . 75))
(1961 (inlinable-rhs? . 75))
(1962 (simple-lambda? . 75))
(1963 (operator/name . 75))
(1964 (simple? . 75))
(1965 (simple-list? . 75))
(1966 (analyzers . 75))
(1967 (define-analyzer . 75))
(1968 (static-value . 75))
(1969 (really-simple-call? . 75))
(1970 (primitive-proc? . 75))
(1971 (no-ret . 75))
(1972 (ret . 75))
(1973 (simple-literal? . 75))
(1974 (require . 75))
(1975 (*debug?* . 75))
(1976 (package-lookup-type . 75))
(1977 (lambda-node? . 75))
(1978 (name-node? . 75))
(1979 (loophole-node? . 75))
(1980 (define-node? . 75))
(1981 (literal-node? . 75))
(1982 (flatten-form . 65))
(1983 (flatten-node . 65))
(1984 (flatteners . 65))
(1985 (define-flattener . 65))
(1986 (flatten-list . 65))
(1987 (no-free-vars . 65))
(1988 (flatten-lambda . 65))
(1989 (convert-lambda-body . 65))
(1990 (add-cells . 65))
(1991 (assigned? . 65))
(1992 (mark-set-variables! . 65))
(1993 (mark-sets . 65))
(1994 (define-set-marker . 65))
(1995 (no-sets . 65))
(1996 (make-make-cell . 65))
(1997 (make-unassigned-cell . 65))
(1998 (make-cell-ref . 65))
(1999 (make-cell-set! . 65))
(2000 (make-primop-call . 65))
(2001 (operator/flat-lambda . 65))
(2002 (operator/lambda . 65))
(2003 (operator/begin . 65))
(2004 (operator/literal . 65))
(2005 (operator/call . 65))
(2006 (operator/unassigned . 65))
(2007 (operator/set! . 65))
(2008 (define-node? . 65))
(2009 (lambda-node? . 65))
(2010 (define-primop . 65))
(2011 (temp0 . 65))
(2012 (make-cell-primop . 65))
(2013 (temp1 . 65))
(2014 (cell-ref-primop . 65))
(2015 (temp2 . 65))
(2016 (cell-set!-primop . 65))
(2017 (union . 65))
(2018 (set-difference . 65))
(2019 (ensure-loaded . 82))
-
; Template uid -> name, parent, pc in parent, env maps
(0 scheme-level-0 #f #f ())
(1 atan 0 7 ())
(2 scheme-level-0 #f #f ())
(3 set-location-defined?! 2 7 ())
(4 scheme-level-0 #f #f ())
(5 acos 4 7 ())
(6 scheme-level-0 #f #f ())
(7 vm-extension 6 7 ())
(8 scheme-level-0 #f #f ())
(9 asin 8 7 ())
(10 scheme-level-0 #f #f ())
(11 location-defined? 10 7 ())
(12 scheme-level-0 #f #f ())
(13 time 12 7 ())
(14 scheme-level-0 #f #f ())
(15 template-set! 14 7 ())
(16 scheme-level-0 #f #f ())
(17 scheme-level-0 #f #f ())
(18 cons 17 7 ())
(19 scheme-level-0 #f #f ())
(20 wait 19 7 ())
(21 scheme-level-0 #f #f ())
(22 trap 21 7 ())
(23 scheme-level-0 #f #f ())
(24 assq 23 7 ())
(25 scheme-level-0 #f #f ())
(26 make-weak-pointer 25 7 ())
(27 scheme-level-0 #f #f ())
(28 lookup-shared-binding 27 7 ())
(29 scheme-level-0 #f #f ())
(30 push 29 7 ())
(31 scheme-level-0 #f #f ())
(32 set-contents! 31 7 ())
(33 scheme-level-0 #f #f ())
(34 read-char 33 7 ())
(35 scheme-level-0 #f #f ())
(36 make-cell 35 7 ())
(37 scheme-level-0 #f #f ())
(38 sqrt 37 7 ())
(39 scheme-level-0 #f #f ())
(40 * 39 7 ())
(41 scheme-level-0 #f #f ())
(42 contents 41 7 ())
(43 scheme-level-0 #f #f ())
(44 + 43 7 ())
(45 scheme-level-0 #f #f ())
(46 peek-char 45 7 ())
(47 scheme-level-0 #f #f ())
(48 - 47 7 ())
(49 scheme-level-0 #f #f ())
(50 continuation-set! 49 7 ())
(51 scheme-level-0 #f #f ())
(52 / 51 7 ())
(53 scheme-level-0 #f #f ())
(54 weak-pointer? 53 7 ())
(55 scheme-level-0 #f #f ())
(56 quotient 55 7 ())
(57 scheme-level-0 #f #f ())
(58 close-channel 57 7 ())
(59 scheme-level-0 #f #f ())
(60 channel-abort 59 7 ())
(61 scheme-level-0 #f #f ())
(62 char? 61 7 ())
(63 scheme-level-0 #f #f ())
(64 < 63 7 ())
(65 scheme-level-0 #f #f ())
(66 = 65 7 ())
(67 scheme-level-0 #f #f ())
(68 cell? 67 7 ())
(69 scheme-level-0 #f #f ())
(70 > 69 7 ())
(71 scheme-level-0 #f #f ())
(72 make-location 71 7 ())
(73 scheme-level-0 #f #f ())
(74 imag-part 73 7 ())
(75 scheme-level-0 #f #f ())
(76 set-port-data! 75 7 ())
(77 scheme-level-0 #f #f ())
(78 make-template 77 7 ())
(79 scheme-level-0 #f #f ())
(80 real? 79 7 ())
(81 scheme-level-0 #f #f ())
(82 real-part 81 7 ())
(83 scheme-level-0 #f #f ())
(84 get-cont-from-heap 83 7 ())
(85 scheme-level-0 #f #f ())
(86 record-length 85 7 ())
(87 scheme-level-0 #f #f ())
(88 port-data 87 7 ())
(89 scheme-level-0 #f #f ())
(90 pair? 89 7 ())
(91 scheme-level-0 #f #f ())
(92 make-port 91 7 ())
(93 scheme-level-0 #f #f ())
(94 set-port-lock! 93 7 ())
(95 scheme-level-0 #f #f ())
(96 return-from-exception 95 7 ())
(97 scheme-level-0 #f #f ())
(98 location? 97 7 ())
(99 scheme-level-0 #f #f ())
(100 channel-maybe-read 99 7 ())
(101 scheme-level-0 #f #f ())
(102 checked-record-ref 101 7 ())
(103 scheme-level-0 #f #f ())
(104 add-finalizer! 103 7 ())
(105 scheme-level-0 #f #f ())
(106 rational? 105 7 ())
(107 scheme-level-0 #f #f ())
(108 template? 107 7 ())
(109 scheme-level-0 #f #f ())
(110 port-lock 109 7 ())
(111 scheme-level-0 #f #f ())
(112 vector-length 111 7 ())
(113 scheme-level-0 #f #f ())
(114 make-continuation 113 7 ())
(115 scheme-level-0 #f #f ())
(116 string-length 115 7 ())
(117 scheme-level-0 #f #f ())
(118 shared-binding-ref 117 7 ())
(119 scheme-level-0 #f #f ())
(120 port? 119 7 ())
(121 scheme-level-0 #f #f ())
(122 angle 121 7 ())
(123 scheme-level-0 #f #f ())
(124 false 123 7 ())
(125 scheme-level-0 #f #f ())
(126 remainder 125 7 ())
(127 scheme-level-0 #f #f ())
(128 continuation? 127 7 ())
(129 scheme-level-0 #f #f ())
(130 channel-ready? 129 7 ())
(131 scheme-level-0 #f #f ())
(132 binary-reduce1 131 7 ())
(133 scheme-level-0 #f #f ())
(134 binary-reduce2 133 7 ())
(135 scheme-level-0 #f #f ())
(136 char<? 135 7 ())
(137 scheme-level-0 #f #f ())
(138 char=? 137 7 ())
(139 scheme-level-0 #f #f ())
(140 <= 139 7 ())
(141 scheme-level-0 #f #f ())
(142 magnitude 141 7 ())
(143 scheme-level-0 #f #f ())
(144 >= 143 7 ())
(145 scheme-level-0 #f #f ())
(146 with-continuation 145 7 ())
(147 scheme-level-0 #f #f ())
(148 floor 147 7 ())
(149 scheme-level-0 #f #f ())
(150 apply 149 7 ())
(151 scheme-level-0 #f #f ())
(152 memory-status 151 7 ())
(153 scheme-level-0 #f #f ())
(154 checked-record-set! 153 7 ())
(155 scheme-level-0 #f #f ())
(156 inexact->exact 155 7 ())
(157 scheme-level-0 #f #f ())
(158 exact->inexact 157 7 ())
(159 scheme-level-0 #f #f ())
(160 error 159 7 ())
(161 scheme-level-0 #f #f ())
(162 extended-number-length 161 7 ())
(163 scheme-level-0 #f #f ())
(164 open-channels-list 163 7 ())
(165 scheme-level-0 #f #f ())
(166 channel-id 165 7 ())
(167 scheme-level-0 #f #f ())
(168 shared-binding-set! 167 7 ())
(169 scheme-level-0 #f #f ())
(170 numerator 169 7 ())
(171 scheme-level-0 #f #f ())
(172 eof-object 171 7 ())
(173 scheme-level-0 #f #f ())
(174 byte-vector-length 173 7 ())
(175 scheme-level-0 #f #f ())
(176 record-ref 175 7 ())
(177 scheme-level-0 #f #f ())
(178 make-polar 177 7 ())
(179 scheme-level-0 #f #f ())
(180 write-char 179 7 ())
(181 scheme-level-0 #f #f ())
(182 symbol->string 181 7 ())
(183 scheme-level-0 #f #f ())
(184 exact? 183 7 ())
(185 scheme-level-0 #f #f ())
(186 vector-ref 185 7 ())
(187 scheme-level-0 #f #f ())
(188 add-pending-channel 187 7 ())
(189 scheme-level-0 #f #f ())
(190 set-current-thread! 189 7 ())
(191 scheme-level-0 #f #f ())
(192 immutable? 191 7 ())
(193 scheme-level-0 #f #f ())
(194 set-exception-handlers! 193 7 ())
(195 scheme-level-0 #f #f ())
(196 string-ref 195 7 ())
(197 scheme-level-0 #f #f ())
(198 set-port-index! 197 7 ())
(199 scheme-level-0 #f #f ())
(200 make-shared-binding 199 7 ())
(201 scheme-level-0 #f #f ())
(202 current-thread 201 7 ())
(203 scheme-level-0 #f #f ())
(204 channel-status 203 7 ())
(205 scheme-level-0 #f #f ())
(206 set-port-limit! 205 7 ())
(207 scheme-level-0 #f #f ())
(208 shared-binding-name 207 7 ())
(209 scheme-level-0 #f #f ())
(210 port-index 209 7 ())
(211 scheme-level-0 #f #f ())
(212 make-immutable! 211 7 ())
(213 scheme-level-0 #f #f ())
(214 set-enabled-interrupts! 213 7 ())
(215 scheme-level-0 #f #f ())
(216 port-limit 215 7 ())
(217 scheme-level-0 #f #f ())
(218 ascii->char 217 7 ())
(219 scheme-level-0 #f #f ())
(220 char->ascii 219 7 ())
(221 scheme-level-0 #f #f ())
(222 undefine-shared-binding 221 7 ())
(223 scheme-level-0 #f #f ())
(224 record-set! 223 7 ())
(225 scheme-level-0 #f #f ())
(226 shared-binding? 225 7 ())
(227 scheme-level-0 #f #f ())
(228 eof-object? 227 7 ())
(229 scheme-level-0 #f #f ())
(230 set-interrupt-handlers! 229 7 ())
(231 scheme-level-0 #f #f ())
(232 record 231 7 ())
(233 scheme-level-0 #f #f ())
(234 schedule-interrupt 233 7 ())
(235 scheme-level-0 #f #f ())
(236 channel-maybe-write 235 7 ())
(237 scheme-level-0 #f #f ())
(238 unspecific 237 7 ())
(239 scheme-level-0 #f #f ())
(240 extended-number-ref 239 7 ())
(241 scheme-level-0 #f #f ())
(242 vector-set! 241 7 ())
(243 scheme-level-0 #f #f ())
(244 copy-bytes! 243 7 ())
(245 scheme-level-0 #f #f ())
(246 string-set! 245 7 ())
(247 scheme-level-0 #f #f ())
(248 unassigned 247 7 ())
(249 scheme-level-0 #f #f ())
(250 call-external-value 249 7 ())
(251 scheme-level-0 #f #f ())
(252 values 251 7 ())
(253 scheme-level-0 #f #f ())
(254 intern 253 7 ())
(255 scheme-level-0 #f #f ())
(256 vector 255 7 ())
(257 scheme-level-0 #f #f ())
(258 byte-vector-ref 257 7 ())
(259 scheme-level-0 #f #f ())
(260 make-double 259 7 ())
(261 scheme-level-0 #f #f ())
(262 make-record 261 7 ())
(263 scheme-level-0 #f #f ())
(264 set-location-id! 263 7 ())
(265 scheme-level-0 #f #f ())
(266 location-id 265 7 ())
(267 scheme-level-0 #f #f ())
(268 bitwise-and 267 7 ())
(269 scheme-level-0 #f #f ())
(270 eq? 269 7 ())
(271 scheme-level-0 #f #f ())
(272 write-image 271 7 ())
(273 scheme-level-0 #f #f ())
(274 double? 273 7 ())
(275 scheme-level-0 #f #f ())
(276 extended-number-set! 275 7 ())
(277 scheme-level-0 #f #f ())
(278 make-vector 277 7 ())
(279 scheme-level-0 #f #f ())
(280 record? 279 7 ())
(281 scheme-level-0 #f #f ())
(282 make-string 281 7 ())
(283 scheme-level-0 #f #f ())
(284 set-port-buffer! 283 7 ())
(285 scheme-level-0 #f #f ())
(286 primitive-catch 285 7 ())
(287 scheme-level-0 #f #f ())
(288 string-hash 287 7 ())
(289 scheme-level-0 #f #f ())
(290 template-length 289 7 ())
(291 scheme-level-0 #f #f ())
(292 number? 291 7 ())
(293 scheme-level-0 #f #f ())
(294 port-buffer 293 7 ())
(295 scheme-level-0 #f #f ())
(296 byte-vector-set! 295 7 ())
(297 scheme-level-0 #f #f ())
(298 bitwise-ior 297 7 ())
(299 scheme-level-0 #f #f ())
(300 set-car! 299 7 ())
(301 scheme-level-0 #f #f ())
(302 closure-env 301 7 ())
(303 scheme-level-0 #f #f ())
(304 vector? 303 7 ())
(305 scheme-level-0 #f #f ())
(306 bitwise-not 305 7 ())
(307 scheme-level-0 #f #f ())
(308 set-cdr! 307 7 ())
(309 scheme-level-0 #f #f ())
(310 symbol? 309 7 ())
(311 scheme-level-0 #f #f ())
(312 string? 311 7 ())
(313 scheme-level-0 #f #f ())
(314 car 313 7 ())
(315 scheme-level-0 #f #f ())
(316 bitwise-xor 315 7 ())
(317 scheme-level-0 #f #f ())
(318 cdr 317 7 ())
(319 scheme-level-0 #f #f ())
(320 find-all-records 319 7 ())
(321 scheme-level-0 #f #f ())
(322 continuation-length 321 7 ())
(323 scheme-level-0 #f #f ())
(324 log 323 7 ())
(325 scheme-level-0 #f #f ())
(326 message 325 7 ())
(327 scheme-level-0 #f #f ())
(328 tan 327 7 ())
(329 scheme-level-0 #f #f ())
(330 collect 329 7 ())
(331 scheme-level-0 #f #f ())
(332 cos 331 7 ())
(333 scheme-level-0 #f #f ())
(334 channel-os-index 333 7 ())
(335 scheme-level-0 #f #f ())
(336 make-extended-number 335 7 ())
(337 scheme-level-0 #f #f ())
(338 set-port-status! 337 7 ())
(339 scheme-level-0 #f #f ())
(340 sin 339 7 ())
(341 scheme-level-0 #f #f ())
(342 exp 341 7 ())
(343 scheme-level-0 #f #f ())
(344 pop 343 7 ())
(345 scheme-level-0 #f #f ())
(346 port-status 345 7 ())
(347 scheme-level-0 #f #f ())
(348 return-from-callback 347 7 ())
(349 scheme-level-0 #f #f ())
(350 set-port-locked?! 349 7 ())
(351 scheme-level-0 #f #f ())
(352 make-byte-vector 351 7 ())
(353 scheme-level-0 #f #f ())
(354 weak-pointer-ref 353 7 ())
(355 scheme-level-0 #f #f ())
(356 call-with-values 355 7 ())
(357 scheme-level-0 #f #f ())
(358 denominator 357 7 ())
(359 scheme-level-0 #f #f ())
(360 port-locked? 359 7 ())
(361 scheme-level-0 #f #f ())
(362 reverse-list->string 361 7 ())
(363 scheme-level-0 #f #f ())
(364 extended-number? 363 7 ())
(365 scheme-level-0 #f #f ())
(366 shared-binding-is-import? 365 7 ())
(367 scheme-level-0 #f #f ())
(368 find-all 367 7 ())
(369 scheme-level-0 #f #f ())
(370 cell-ref 369 7 ())
(371 scheme-level-0 #f #f ())
(372 byte-vector? 371 7 ())
(373 scheme-level-0 #f #f ())
(374 string=? 373 7 ())
(375 scheme-level-0 #f #f ())
(376 open-channel 375 7 ())
(377 scheme-level-0 #f #f ())
(378 channel? 377 7 ())
(379 scheme-level-0 #f #f ())
(380 make-rectangular 379 7 ())
(381 scheme-level-0 #f #f ())
(382 set-session-data! 381 7 ())
(383 scheme-level-0 #f #f ())
(384 template-ref 383 7 ())
(385 scheme-level-0 #f #f ())
(386 set-port-handler! 385 7 ())
(387 scheme-level-0 #f #f ())
(388 make-closure 387 7 ())
(389 scheme-level-0 #f #f ())
(390 session-data 389 7 ())
(391 scheme-level-0 #f #f ())
(392 integer? 391 7 ())
(393 scheme-level-0 #f #f ())
(394 signal-condition 393 7 ())
(395 scheme-level-0 #f #f ())
(396 port-handler 395 7 ())
(397 scheme-level-0 #f #f ())
(398 set-port-pending-eof?! 397 7 ())
(399 scheme-level-0 #f #f ())
(400 define-shared-binding 399 7 ())
(401 scheme-level-0 #f #f ())
(402 arithmetic-shift 401 7 ())
(403 scheme-level-0 #f #f ())
(404 complex? 403 7 ())
(405 scheme-level-0 #f #f ())
(406 port-pending-eof? 405 7 ())
(407 scheme-level-0 #f #f ())
(408 cell-set! 407 7 ())
(409 scheme-level-0 #f #f ())
(410 binary-comparison-reduce2 409 7 ())
(411 scheme-level-0 #f #f ())
(412 scheme-level-0 #f #f ())
(413 closure? 412 7 ())
(414 scheme-level-0 #f #f ())
(415 continuation-ref 414 7 ())
(416 scheme-level-0 #f #f ())
(417 closure-template 416 7 ())
(418 scheme-level-0 #f #f ())
(419 current-cont 418 7 ())
(420 scheme-level-0 #f #f ())
(421 char->integer 420 7 ())
(422 scheme-level-0 #f #f ())
(423 integer->char 422 7 ())
(424 scheme-level-0 #f #f ())
(425 invoke-closure 424 7 ())
(426 scheme-level-0 #f #f ())
(427 primitive-cwcc 426 7 ())
(428 #f 427 8 ())
(429 scheme-level-0 #f #f ())
(430 make-undefined-location 429 7 ())
(431 scheme-level-0 #f #f ())
(432 location-assigned? 431 7 ())
(433 scheme-level-0 #f #f ())
(434 vector-unassigned? 433 7 ())
(435 scheme-level-0 #f #f ())
(436 string-copy 435 7 ())
(437 scheme-level-0 #f #f ())
(438 string->symbol 437 7 ())
(439 scheme-level-0 #f #f ())
(440 input-port? 439 7 ())
(441 scheme-level-0 #f #f ())
(442 output-port? 441 7 ())
(443 scheme-level-0 #f #f ())
(444 make-code-vector 443 7 ())
(445 scheme-level-0 #f #f ())
(446 code-vector? 445 7 ())
(447 scheme-level-0 #f #f ())
(448 code-vector-length 447 7 ())
(449 scheme-level-0 #f #f ())
(450 code-vector-ref 449 7 ())
(451 scheme-level-0 #f #f ())
(452 code-vector-set! 451 7 ())
(453 scheme-level-0 #f #f ())
(454 buffer-length 453 7 ())
(455 scheme-level-0 #f #f ())
(456 channel-read 455 7 ())
(457 #f 456 6 ())
(458 loop 457 19 ())
(459 scheme-level-0 #f #f ())
(460 channel-write 459 7 ())
(461 loop 460 19 ())
(462 scheme-level-0 #f #f ())
(463 lookup-imported-binding 462 7 ())
(464 scheme-level-0 #f #f ())
(465 lookup-exported-binding 464 7 ())
(466 scheme-level-0 #f #f ())
(467 define-imported-binding 466 7 ())
(468 scheme-level-0 #f #f ())
(469 define-exported-binding 468 7 ())
(470 scheme-level-0 #f #f ())
(471 undefine-imported-binding 470 7 ())
(472 scheme-level-0 #f #f ())
(473 undefine-exported-binding 472 7 ())
(474 scheme-level-0 #f #f ())
(475 secret-length 474 7 ())
(476 scheme-level-0 #f #f ())
(477 byte-vector 476 7 ())
(478 loop##0 477 38 ())
(479 scheme-level-0 #f #f ())
(480 debug-message 479 7 ())
(481 scheme-level-0 #f #f ())
(482 signal 481 7 ())
(483 scheme-level-0 #f #f ())
(484 warn 483 7 ())
(485 scheme-level-0 #f #f ())
(486 syntax-error 485 7 ())
(487 scheme-level-0 #f #f ())
(488 call-error 487 7 ())
(489 scheme-level-0 #f #f ())
(490 scheme-level-0 #f #f ())
(491 scheme-level-1 #f #f ())
(492 scheme-level-1 #f #f ())
(493 scheme-level-1 #f #f ())
(494 scheme-level-1 #f #f ())
(495 scheme-level-1 #f #f ())
(496 scheme-level-1 #f #f ())
(497 scheme-level-1 #f #f ())
(498 scheme-level-1 #f #f ())
(499 scheme-level-1 #f #f ())
(500 scheme-level-1 #f #f ())
(501 scheme-level-1 #f #f ())
(502 scheme-level-1 #f #f ())
(503 #f 502 11 ())
(504 scheme-level-1 #f #f ())
(505 #f 504 11 ())
(506 scheme-level-1 #f #f ())
(507 scheme-level-1 #f #f ())
(508 scheme-level-1 #f #f ())
(509 scheme-level-1 #f #f ())
(510 scheme-level-1 #f #f ())
(511 scheme-level-1 #f #f ())
(512 scheme-level-1 #f #f ())
(513 not 512 7 ())
(514 scheme-level-1 #f #f ())
(515 boolean? 514 7 ())
(516 scheme-level-1 #f #f ())
(517 eqv? 516 7 ())
(518 scheme-level-1 #f #f ())
(519 equal? 518 7 ())
(520 loop 519 156 ())
(521 scheme-level-1 #f #f ())
(522 null? 521 7 ())
(523 scheme-level-1 #f #f ())
(524 inexact? 523 7 ())
(525 scheme-level-1 #f #f ())
(526 max-or-min 525 7 ())
(527 loop 526 35 ())
(528 scheme-level-1 #f #f ())
(529 max 528 7 ())
(530 scheme-level-1 #f #f ())
(531 min 530 7 ())
(532 scheme-level-1 #f #f ())
(533 abs 532 7 ())
(534 scheme-level-1 #f #f ())
(535 zero? 534 7 ())
(536 scheme-level-1 #f #f ())
(537 positive? 536 7 ())
(538 scheme-level-1 #f #f ())
(539 negative? 538 7 ())
(540 scheme-level-1 #f #f ())
(541 even? 540 7 ())
(542 scheme-level-1 #f #f ())
(543 odd? 542 7 ())
(544 scheme-level-1 #f #f ())
(545 caar 544 7 ())
(546 scheme-level-1 #f #f ())
(547 cadr 546 7 ())
(548 scheme-level-1 #f #f ())
(549 cdar 548 7 ())
(550 scheme-level-1 #f #f ())
(551 cddr 550 7 ())
(552 scheme-level-1 #f #f ())
(553 caaar 552 7 ())
(554 scheme-level-1 #f #f ())
(555 caadr 554 7 ())
(556 scheme-level-1 #f #f ())
(557 cadar 556 7 ())
(558 scheme-level-1 #f #f ())
(559 caddr 558 7 ())
(560 scheme-level-1 #f #f ())
(561 cdaar 560 7 ())
(562 scheme-level-1 #f #f ())
(563 cdadr 562 7 ())
(564 scheme-level-1 #f #f ())
(565 cddar 564 7 ())
(566 scheme-level-1 #f #f ())
(567 cdddr 566 7 ())
(568 scheme-level-1 #f #f ())
(569 caaaar 568 7 ())
(570 scheme-level-1 #f #f ())
(571 caaadr 570 7 ())
(572 scheme-level-1 #f #f ())
(573 caadar 572 7 ())
(574 scheme-level-1 #f #f ())
(575 caaddr 574 7 ())
(576 scheme-level-1 #f #f ())
(577 cadaar 576 7 ())
(578 scheme-level-1 #f #f ())
(579 cadadr 578 7 ())
(580 scheme-level-1 #f #f ())
(581 caddar 580 7 ())
(582 scheme-level-1 #f #f ())
(583 cadddr 582 7 ())
(584 scheme-level-1 #f #f ())
(585 cdaaar 584 7 ())
(586 scheme-level-1 #f #f ())
(587 cdaadr 586 7 ())
(588 scheme-level-1 #f #f ())
(589 cdadar 588 7 ())
(590 scheme-level-1 #f #f ())
(591 cdaddr 590 7 ())
(592 scheme-level-1 #f #f ())
(593 cddaar 592 7 ())
(594 scheme-level-1 #f #f ())
(595 cddadr 594 7 ())
(596 scheme-level-1 #f #f ())
(597 cdddar 596 7 ())
(598 scheme-level-1 #f #f ())
(599 cddddr 598 7 ())
(600 scheme-level-1 #f #f ())
(601 list 600 7 ())
(602 scheme-level-1 #f #f ())
(603 real-length 602 7 ())
(604 scheme-level-1 #f #f ())
(605 length 604 7 ())
(606 scheme-level-1 #f #f ())
(607 reduce 606 7 ())
(608 scheme-level-1 #f #f ())
(609 append 608 7 ())
(610 recur 609 34 ())
(611 scheme-level-1 #f #f ())
(612 append-reverse 611 7 ())
(613 scheme-level-1 #f #f ())
(614 reverse 613 7 ())
(615 scheme-level-1 #f #f ())
(616 list-tail 615 7 ())
(617 scheme-level-1 #f #f ())
(618 list-ref 617 7 ())
(619 scheme-level-1 #f #f ())
(620 mem 619 7 ())
(621 #f 620 6 ())
(622 loop 621 18 ())
(623 scheme-level-1 #f #f ())
(624 ass 623 7 ())
(625 #f 624 6 ())
(626 loop 625 18 ())
(627 scheme-level-1 #f #f ())
(628 list? 627 7 ())
(629 recur 628 21 ())
(630 scheme-level-1 #f #f ())
(631 char>? 630 7 ())
(632 scheme-level-1 #f #f ())
(633 char>=? 632 7 ())
(634 scheme-level-1 #f #f ())
(635 char<=? 634 7 ())
(636 scheme-level-1 #f #f ())
(637 char-whitespace? 636 7 ())
(638 scheme-level-1 #f #f ())
(639 char-lower-case? 638 7 ())
(640 scheme-level-1 #f #f ())
(641 char-upper-case? 640 7 ())
(642 scheme-level-1 #f #f ())
(643 char-numeric? 642 7 ())
(644 scheme-level-1 #f #f ())
(645 char-alphabetic? 644 7 ())
(646 scheme-level-1 #f #f ())
(647 make-character-map 646 7 ())
(648 loop##7 647 27 ())
(649 scheme-level-1 #f #f ())
(650 char-upcase 649 7 ())
(651 scheme-level-1 #f #f ())
(652 char-downcase 651 7 ())
(653 scheme-level-1 #f #f ())
(654 char-ci-compare 653 7 ())
(655 #f 654 6 ())
(656 scheme-level-1 #f #f ())
(657 list->string 656 7 ())
(658 loop##9 657 36 ())
(659 scheme-level-1 #f #f ())
(660 string 659 7 ())
(661 scheme-level-1 #f #f ())
(662 substring 661 7 ())
(663 loop##10 662 26 ())
(664 scheme-level-1 #f #f ())
(665 string-append 664 7 ())
(666 #f 665 12 ())
(667 loop 665 60 ())
(668 loop##11 667 40 ())
(669 scheme-level-1 #f #f ())
(670 string->list 669 7 ())
(671 loop##12 670 18 ())
(672 scheme-level-1 #f #f ())
(673 unspecific 672 7 ())
(674 scheme-level-1 #f #f ())
(675 string-fill! 674 7 ())
(676 loop##13 675 18 ())
(677 scheme-level-1 #f #f ())
(678 make-string=? 677 7 ())
(679 #f 678 6 ())
(680 loop 679 36 ())
(681 scheme-level-1 #f #f ())
(682 make-string<? 681 7 ())
(683 #f 682 6 ())
(684 loop 683 49 ())
(685 scheme-level-1 #f #f ())
(686 string>? 685 7 ())
(687 scheme-level-1 #f #f ())
(688 string<=? 687 7 ())
(689 scheme-level-1 #f #f ())
(690 string>=? 689 7 ())
(691 scheme-level-1 #f #f ())
(692 string-ci>? 691 7 ())
(693 scheme-level-1 #f #f ())
(694 string-ci<=? 693 7 ())
(695 scheme-level-1 #f #f ())
(696 string-ci>=? 695 7 ())
(697 scheme-level-1 #f #f ())
(698 vector->list 697 7 ())
(699 loop##15 698 11 ())
(700 scheme-level-1 #f #f ())
(701 list->vector 700 7 ())
(702 loop##16 701 35 ())
(703 scheme-level-1 #f #f ())
(704 vector-fill! 703 7 ())
(705 loop##17 704 19 ())
(706 scheme-level-1 #f #f ())
(707 map1 706 7 ())
(708 scheme-level-1 #f #f ())
(709 any 708 7 ())
(710 scheme-level-1 #f #f ())
(711 map2+ 710 7 ())
(712 scheme-level-1 #f #f ())
(713 map 712 7 ())
(714 scheme-level-1 #f #f ())
(715 for-each1 714 7 ())
(716 loop 715 18 ())
(717 scheme-level-1 #f #f ())
(718 for-each2+ 717 7 ())
(719 loop 718 21 ())
(720 scheme-level-1 #f #f ())
(721 for-each 720 7 ())
(722 scheme-level-1 #f #f ())
(723 make-promise 722 7 ())
(724 #f 723 11 ())
(725 scheme-level-1 #f #f ())
(726 force 725 7 ())
(727 scheme-level-1 #f #f ())
(728 filter 727 7 ())
(729 #f 728 6 ())
(730 scheme-level-1 #f #f ())
(731 pos 730 7 ())
(732 #f 731 6 ())
(733 loop 732 22 ())
(734 scheme-level-1 #f #f ())
(735 every 734 7 ())
(736 scheme-level-1 #f #f ())
(737 sublist 736 7 ())
(738 recur 737 58 ())
(739 scheme-level-1 #f #f ())
(740 last 739 7 ())
(741 scheme-level-1 #f #f ())
(742 insert 741 7 ())
(743 scheme-level-1 #f #f ())
(744 fold 743 7 ())
(745 loop##21 744 11 ())
(746 scheme-level-1 #f #f ())
(747 fold->2 746 7 ())
(748 loop 747 24 ())
(749 #f 748 25 ())
(750 scheme-level-1 #f #f ())
(751 fold->3 750 7 ())
(752 loop 751 27 ())
(753 #f 752 28 ())
(754 scheme-level-1 #f #f ())
(755 modulo 754 7 ())
(756 scheme-level-1 #f #f ())
(757 ceiling 756 7 ())
(758 scheme-level-1 #f #f ())
(759 truncate 758 7 ())
(760 scheme-level-1 #f #f ())
(761 round 760 7 ())
(762 scheme-level-1 #f #f ())
(763 euclid 762 7 ())
(764 scheme-level-1 #f #f ())
(765 gcd 764 7 ())
(766 #f 765 8 ())
(767 scheme-level-1 #f #f ())
(768 lcm 767 7 ())
(769 #f 768 8 ())
(770 scheme-level-1 #f #f ())
(771 raise-to-integer-power 770 7 ())
(772 loop 771 39 ())
(773 scheme-level-1 #f #f ())
(774 expt 773 7 ())
(775 scheme-level-1 #f #f ())
(776 simplest-rational 775 7 ())
(777 simplest-rational-internal 776 11 ())
(778 scheme-level-1 #f #f ())
(779 rationalize 778 7 ())
(780 records #f #f ())
(781 #f 780 7 ())
(782 records #f #f ())
(783 records #f #f ())
(784 records #f #f ())
(785 records #f #f ())
(786 record-type 785 7 ())
(787 records #f #f ())
(788 record-type-name 787 7 ())
(789 records #f #f ())
(790 make-default-record-discloser 789 7 ())
(791 #f 790 6 ())
(792 records #f #f ())
(793 make-record-type 792 7 ())
(794 records #f #f ())
(795 record-type? 794 7 ())
(796 records #f #f ())
(797 record-type-resumer 796 7 ())
(798 records #f #f ())
(799 set-record-type-resumer! 798 7 ())
(800 records #f #f ())
(801 record-type-uid 800 7 ())
(802 records #f #f ())
(803 record-type-field-names 802 7 ())
(804 records #f #f ())
(805 record-type-number-of-fields 804 7 ())
(806 records #f #f ())
(807 record-type-discloser 806 7 ())
(808 records #f #f ())
(809 set-record-type-discloser! 808 7 ())
(810 records #f #f ())
(811 record-field-index 810 7 ())
(812 loop 811 28 ())
(813 records #f #f ())
(814 record-constructor 813 7 ())
(815 #f 814 10 ())
(816 #f 814 41 ())
(817 loop 816 45 ())
(818 records #f #f ())
(819 record-accessor 818 7 ())
(820 #f 819 62 ())
(821 records #f #f ())
(822 record-modifier 821 7 ())
(823 #f 822 62 ())
(824 records #f #f ())
(825 record-predicate 824 7 ())
(826 #f 825 6 ())
(827 records #f #f ())
(828 define-record-discloser 827 7 ())
(829 records #f #f ())
(830 disclose-record 829 7 ())
(831 records #f #f ())
(832 define-record-resumer 831 7 ())
(833 records #f #f ())
(834 resume-record 833 7 ())
(835 records #f #f ())
(836 initialize-records! 835 7 ())
(837 loop##24 836 18 ())
(838 records #f #f ())
(839 records #f #f ())
(840 records #f #f ())
(841 records #f #f ())
(842 define-record-types #f #f ())
(843 methods #f #f ())
(844 &add-method! 843 59 ())
(845 methods #f #f ())
(846 &disclose 845 52 ())
(847 methods #f #f ())
(848 &disclose 847 52 ())
(849 methods #f #f ())
(850 methods #f #f ())
(851 disclose 850 56 ())
(852 methods #f #f ())
(853 &same-type? 852 56 ())
(854 methods #f #f ())
(855 &type-priority 854 52 ())
(856 methods #f #f ())
(857 &type-predicate 856 52 ())
(858 methods #f #f ())
(859 #f 858 11 ())
(860 methods #f #f ())
(861 singleton-value 860 7 ())
(862 methods #f #f ())
(863 singleton 862 7 ())
(864 methods #f #f ())
(865 methods #f #f ())
(866 &same-type? 865 56 ())
(867 methods #f #f ())
(868 &same-type? 867 56 ())
(869 methods #f #f ())
(870 methods #f #f ())
(871 same-type? 870 60 ())
(872 methods #f #f ())
(873 &type-superiors 872 52 ())
(874 methods #f #f ())
(875 &type-superiors 874 52 ())
(876 methods #f #f ())
(877 methods #f #f ())
(878 type-superiors 877 56 ())
(879 methods #f #f ())
(880 &type-priority 879 52 ())
(881 methods #f #f ())
(882 &type-priority 881 52 ())
(883 methods #f #f ())
(884 methods #f #f ())
(885 type-priority 884 56 ())
(886 methods #f #f ())
(887 &type-predicate 886 52 ())
(888 methods #f #f ())
(889 &type-predicate 888 52 ())
(890 methods #f #f ())
(891 methods #f #f ())
(892 type-predicate 891 56 ())
(893 methods #f #f ())
(894 add-method! 893 52 ())
(895 methods #f #f ())
(896 methods #f #f ())
(897 add-method! 896 60 ())
(898 methods #f #f ())
(899 #f 898 11 ())
(900 methods #f #f ())
(901 set-method-table-methods! 900 7 ())
(902 methods #f #f ())
(903 method-table-methods 902 7 ())
(904 methods #f #f ())
(905 method-table-prototype 904 7 ())
(906 methods #f #f ())
(907 make-generic 906 7 ())
(908 methods #f #f ())
(909 method-table-get-perform 908 7 ())
(910 methods #f #f ())
(911 method-table-set-perform! 910 7 ())
(912 methods #f #f ())
(913 method-table-id 912 7 ())
(914 methods #f #f ())
(915 really-make-method-table 914 7 ())
(916 methods #f #f ())
(917 methods #f #f ())
(918 #f 917 11 ())
(919 methods #f #f ())
(920 method-info-types 919 7 ())
(921 methods #f #f ())
(922 method-info-n-ary? 921 7 ())
(923 methods #f #f ())
(924 method-info-proc 923 7 ())
(925 methods #f #f ())
(926 really-make-method-info 925 7 ())
(927 methods #f #f ())
(928 methods #f #f ())
(929 record-type-priority 928 51 ())
(930 methods #f #f ())
(931 methods #f #f ())
(932 methods #f #f ())
(933 methods #f #f ())
(934 methods #f #f ())
(935 methods #f #f ())
(936 methods #f #f ())
(937 methods #f #f ())
(938 methods #f #f ())
(939 methods #f #f ())
(940 methods #f #f ())
(941 methods #f #f ())
(942 methods #f #f ())
(943 #f 942 25 ())
(944 methods #f #f ())
(945 methods #f #f ())
(946 methods #f #f ())
(947 methods #f #f ())
(948 methods #f #f ())
(949 methods #f #f ())
(950 #f 949 25 ())
(951 methods #f #f ())
(952 methods #f #f ())
(953 methods #f #f ())
(954 methods #f #f ())
(955 #f 954 11 ())
(956 methods #f #f ())
(957 simple-type-superiors 956 7 ())
(958 methods #f #f ())
(959 simple-type-predicate 958 7 ())
(960 methods #f #f ())
(961 simple-type-priority 960 7 ())
(962 methods #f #f ())
(963 simple-type-id 962 7 ())
(964 methods #f #f ())
(965 really-make-simple-type 964 7 ())
(966 methods #f #f ())
(967 methods #f #f ())
(968 simple-type? 967 7 ())
(969 methods #f #f ())
(970 %type-priority 969 7 ())
(971 methods #f #f ())
(972 compute-priority 971 7 ())
(973 methods #f #f ())
(974 make-simple-type 973 7 ())
(975 methods #f #f ())
(976 %type-predicate 975 7 ())
(977 methods #f #f ())
(978 %same-type? 977 7 ())
(979 methods #f #f ())
(980 value? 979 7 ())
(981 methods #f #f ())
(982 method-info? 981 7 ())
(983 methods #f #f ())
(984 make-method-info 983 7 ())
(985 methods #f #f ())
(986 empty-method-list 985 7 ())
(987 methods #f #f ())
(988 more-specific-type? 987 7 ())
(989 methods #f #f ())
(990 more-specific? 989 7 ())
(991 loop 990 148 ())
(992 methods #f #f ())
(993 every2 992 7 ())
(994 methods #f #f ())
(995 same-applicability? 994 7 ())
(996 methods #f #f ())
(997 insert-method 996 7 ())
(998 recur 997 18 ())
(999 methods #f #f ())
(1000 method-table? 999 7 ())
(1001 methods #f #f ())
(1002 last-action 1001 7 ())
(1003 #f 1002 6 ())
(1004 methods #f #f ())
(1005 one-action 1004 7 ())
(1006 #f 1005 6 ())
(1007 #f 1006 20 ())
(1008 methods #f #f ())
(1009 check-for-next 1008 7 ())
(1010 #f 1009 6 ())
(1011 methods #f #f ())
(1012 check-next 1011 7 ())
(1013 #f 1012 6 ())
(1014 methods #f #f ())
(1015 argument-sequence-predicate 1014 7 ())
(1016 recur 1015 27 ())
(1017 methods #f #f ())
(1018 methods->perform 1017 7 ())
(1019 recur 1018 18 ())
(1020 methods #f #f ())
(1021 add-to-method-table! 1020 7 ())
(1022 methods #f #f ())
(1023 set-final-method! 1022 7 ())
(1024 methods #f #f ())
(1025 make-cell-for-generic 1024 7 ())
(1026 #f 1025 8 ())
(1027 #f 1025 13 ())
(1028 #f 1025 18 ())
(1029 methods #f #f ())
(1030 make-method-table 1029 7 ())
(1031 #f 1030 53 ())
(1032 #f 1030 79 ())
(1033 methods #f #f ())
(1034 apply-generic 1033 7 ())
(1035 methods #f #f ())
(1036 compare-to 1035 7 ())
(1037 #f 1036 6 ())
(1038 methods #f #f ())
(1039 proc->discloser 1038 7 ())
(1040 #f 1039 6 ())
(1041 #f 1040 6 ())
(1042 methods #f #f ())
(1043 number-i/o #f #f ())
(1044 string->integer 1043 24 ())
(1045 do-it 1043 33 ())
(1046 loop 1045 40 ())
(1047 digit->integer 1043 42 ())
(1048 number-i/o #f #f ())
(1049 set-exactness 1048 7 ())
(1050 number-i/o #f #f ())
(1051 &really-string->number 1050 60 ())
(1052 number-i/o #f #f ())
(1053 #f 1052 25 ())
(1054 loop 1053 31 ())
(1055 number-i/o #f #f ())
(1056 &really-string->number 1055 60 ())
(1057 number-i/o #f #f ())
(1058 number-i/o #f #f ())
(1059 number-i/o #f #f ())
(1060 string->number 1059 7 ())
(1061 loop 1060 281 ())
(1062 radix-is 1061 55 ())
(1063 exactness-is 1061 60 ())
(1064 loop 1061 296 ())
(1065 number-i/o #f #f ())
(1066 integer->string 1065 22 ())
(1067 recur 1066 52 ())
(1068 integer->digit 1065 31 ())
(1069 number-i/o #f #f ())
(1070 &number->string 1069 56 ())
(1071 number-i/o #f #f ())
(1072 &number->string 1071 56 ())
(1073 number-i/o #f #f ())
(1074 number->string 1073 7 ())
(1075 number-i/o #f #f ())
(1076 number-i/o #f #f ())
(1077 fluids #f #f ())
(1078 fluids #f #f ())
(1079 thread-cell-default 1078 7 ())
(1080 fluids #f #f ())
(1081 make-thread-cell 1080 7 ())
(1082 fluids #f #f ())
(1083 fluids #f #f ())
(1084 set-fluid-top-level-value! 1083 7 ())
(1085 fluids #f #f ())
(1086 fluid-top-level-value 1085 7 ())
(1087 fluids #f #f ())
(1088 make-fluid 1087 7 ())
(1089 fluids #f #f ())
(1090 fluids #f #f ())
(1091 thread-dynamic-env 1090 7 ())
(1092 fluids #f #f ())
(1093 thread-dynamic-point 1092 7 ())
(1094 fluids #f #f ())
(1095 thread-cell-env 1094 7 ())
(1096 fluids #f #f ())
(1097 make-thread 1096 7 ())
(1098 fluids #f #f ())
(1099 fluids #f #f ())
(1100 get-dynamic-env 1099 7 ())
(1101 fluids #f #f ())
(1102 set-dynamic-env! 1101 7 ())
(1103 fluids #f #f ())
(1104 get-dynamic-point 1103 7 ())
(1105 fluids #f #f ())
(1106 set-dynamic-point! 1105 7 ())
(1107 fluids #f #f ())
(1108 with-dynamic-env 1107 7 ())
(1109 #f 1108 33 ())
(1110 fluids #f #f ())
(1111 empty-dynamic-env 1110 7 ())
(1112 fluids #f #f ())
(1113 fluid 1112 7 ())
(1114 fluids #f #f ())
(1115 set-fluid! 1114 7 ())
(1116 fluids #f #f ())
(1117 let-fluid 1116 7 ())
(1118 fluids #f #f ())
(1119 let-fluids 1118 7 ())
(1120 loop 1119 28 ())
(1121 fluids #f #f ())
(1122 fluid-cell-ref 1121 7 ())
(1123 fluids #f #f ())
(1124 fluid-cell-set! 1123 7 ())
(1125 fluids #f #f ())
(1126 get-thread-cell-env 1125 7 ())
(1127 fluids #f #f ())
(1128 set-thread-cell-env! 1127 7 ())
(1129 fluids #f #f ())
(1130 empty-thread-cell-env 1129 7 ())
(1131 fluids #f #f ())
(1132 thread-cell-ref 1131 7 ())
(1133 fluids #f #f ())
(1134 thread-cell-set! 1133 7 ())
(1135 fluids #f #f ())
(1136 initialize-dynamic-state! 1135 7 ())
(1137 enumerated #f #f ())
(1138 lookup-enumerand 1137 7 ())
(1139 loop 1138 27 ())
(1140 architecture #f #f ())
(1141 architecture #f #f ())
(1142 architecture #f #f ())
(1143 architecture #f #f ())
(1144 architecture #f #f ())
(1145 architecture #f #f ())
(1146 architecture #f #f ())
(1147 architecture #f #f ())
(1148 architecture #f #f ())
(1149 architecture #f #f ())
(1150 architecture #f #f ())
(1151 architecture #f #f ())
(1152 architecture #f #f ())
(1153 architecture #f #f ())
(1154 architecture #f #f ())
(1155 architecture #f #f ())
(1156 architecture #f #f ())
(1157 architecture #f #f ())
(1158 architecture #f #f ())
(1159 architecture #f #f ())
(1160 architecture #f #f ())
(1161 architecture #f #f ())
(1162 architecture #f #f ())
(1163 next-protocol 1162 7 ())
(1164 architecture #f #f ())
(1165 architecture #f #f ())
(1166 architecture #f #f ())
(1167 architecture #f #f ())
(1168 architecture #f #f ())
(1169 architecture #f #f ())
(1170 architecture #f #f ())
(1171 architecture #f #f ())
(1172 architecture #f #f ())
(1173 architecture #f #f ())
(1174 architecture #f #f ())
(1175 architecture #f #f ())
(1176 architecture #f #f ())
(1177 architecture #f #f ())
(1178 queues #f #f ())
(1179 queue-uid 1178 7 ())
(1180 queues #f #f ())
(1181 set-queue-head! 1180 7 ())
(1182 queues #f #f ())
(1183 queue-head 1182 7 ())
(1184 queues #f #f ())
(1185 set-queue-tail! 1184 7 ())
(1186 queues #f #f ())
(1187 queue-tail 1186 7 ())
(1188 queues #f #f ())
(1189 really-make-queue 1188 7 ())
(1190 queues #f #f ())
(1191 queues #f #f ())
(1192 queue? 1191 7 ())
(1193 queues #f #f ())
(1194 make-queue 1193 7 ())
(1195 queues #f #f ())
(1196 queue-empty? 1195 7 ())
(1197 queues #f #f ())
(1198 enqueue! 1197 7 ())
(1199 queues #f #f ())
(1200 queue-front 1199 7 ())
(1201 queues #f #f ())
(1202 dequeue! 1201 7 ())
(1203 queues #f #f ())
(1204 maybe-dequeue! 1203 7 ())
(1205 queues #f #f ())
(1206 on-queue? 1205 7 ())
(1207 queues #f #f ())
(1208 delete-from-queue-if! 1207 7 ())
(1209 loop 1208 130 ())
(1210 queues #f #f ())
(1211 delete-from-queue! 1210 7 ())
(1212 #f 1211 9 ())
(1213 queues #f #f ())
(1214 queue->list 1213 7 ())
(1215 #f 1214 6 ())
(1216 queues #f #f ())
(1217 queue-length 1216 7 ())
(1218 queues #f #f ())
(1219 conditions #f #f ())
(1220 conditions #f #f ())
(1221 conditions #f #f ())
(1222 conditions #f #f ())
(1223 conditions #f #f ())
(1224 conditions #f #f ())
(1225 conditions #f #f ())
(1226 make-exception 1225 7 ())
(1227 conditions #f #f ())
(1228 conditions #f #f ())
(1229 conditions #f #f ())
(1230 conditions #f #f ())
(1231 conditions #f #f ())
(1232 conditions #f #f ())
(1233 conditions #f #f ())
(1234 conditions #f #f ())
(1235 conditions #f #f ())
(1236 conditions #f #f ())
(1237 conditions #f #f ())
(1238 conditions #f #f ())
(1239 conditions #f #f ())
(1240 conditions #f #f ())
(1241 condition? 1240 7 ())
(1242 conditions #f #f ())
(1243 condition-predicate 1242 7 ())
(1244 #f 1243 6 ())
(1245 conditions #f #f ())
(1246 define-condition-type 1245 7 ())
(1247 #f 1246 17 ())
(1248 conditions #f #f ())
(1249 condition-supertypes 1248 7 ())
(1250 conditions #f #f ())
(1251 session-data #f #f ())
(1252 make-session-data-slot! 1251 7 ())
(1253 session-data #f #f ())
(1254 session-data-ref 1253 7 ())
(1255 session-data #f #f ())
(1256 session-data-set! 1255 7 ())
(1257 session-data #f #f ())
(1258 initialize-session-data! 1257 7 ())
(1259 session-data #f #f ())
(1260 interrupts #f #f ())
(1261 #f 1260 11 ())
(1262 interrupts #f #f ())
(1263 interrupts #f #f ())
(1264 interrupts #f #f ())
(1265 interrupts #f #f ())
(1266 enabled-interrupts 1265 7 ())
(1267 interrupts #f #f ())
(1268 post-gc-handler 1267 7 ())
(1269 #f 1268 6 ())
(1270 #f 1269 36 ())
(1271 #f 1269 56 ())
(1272 #f 1271 7 ())
(1273 #f 1271 21 ())
(1274 interrupts #f #f ())
(1275 initialize-interrupts! 1274 7 ())
(1276 #f 1275 6 ())
(1277 loop##82 1276 32 ())
(1278 #f 1277 32 ())
(1279 #f 1276 78 ())
(1280 #f 1279 11 ())
(1281 interrupts #f #f ())
(1282 set-interrupt-handler! 1281 7 ())
(1283 interrupts #f #f ())
(1284 with-interrupts 1283 7 ())
(1285 #f 1284 13 ())
(1286 interrupts #f #f ())
(1287 with-interrupts-inhibited 1286 7 ())
(1288 interrupts #f #f ())
(1289 with-interrupts-allowed 1288 7 ())
(1290 interrupts #f #f ())
(1291 disable-interrupts! 1290 7 ())
(1292 interrupts #f #f ())
(1293 enable-interrupts! 1292 7 ())
(1294 interrupts #f #f ())
(1295 call-after-gc! 1294 7 ())
(1296 interrupts #f #f ())
(1297 call-before-heap-overflow! 1296 7 ())
(1298 interrupts #f #f ())
(1299 interrupts #f #f ())
(1300 wind #f #f ())
(1301 point-depth 1300 7 ())
(1302 wind #f #f ())
(1303 point-in 1302 7 ())
(1304 wind #f #f ())
(1305 point-out 1304 7 ())
(1306 wind #f #f ())
(1307 point-dynamic-env 1306 7 ())
(1308 wind #f #f ())
(1309 point-parent 1308 7 ())
(1310 wind #f #f ())
(1311 make-point 1310 7 ())
(1312 wind #f #f ())
(1313 wind #f #f ())
(1314 dynamic-wind 1313 7 ())
(1315 wind #f #f ())
(1316 travel-to-point! 1315 7 ())
(1317 wind #f #f ())
(1318 continuation->procedure 1317 7 ())
(1319 #f 1318 6 ())
(1320 #f 1319 52 ())
(1321 wind #f #f ())
(1322 call-with-current-continuation 1321 7 ())
(1323 #f 1322 6 ())
(1324 templates #f #f ())
(1325 template-code 1324 7 ())
(1326 templates #f #f ())
(1327 template-info 1326 7 ())
(1328 templates #f #f ())
(1329 set-template-code! 1328 7 ())
(1330 templates #f #f ())
(1331 set-template-info! 1330 7 ())
(1332 templates #f #f ())
(1333 more-types #f #f ())
(1334 &disclose 1333 48 ())
(1335 more-types #f #f ())
(1336 more-types #f #f ())
(1337 &disclose 1336 52 ())
(1338 more-types #f #f ())
(1339 more-types #f #f ())
(1340 more-types #f #f ())
(1341 more-types #f #f ())
(1342 more-types #f #f ())
(1343 more-types #f #f ())
(1344 more-types #f #f ())
(1345 more-types #f #f ())
(1346 continuations #f #f ())
(1347 &disclose 1346 48 ())
(1348 continuations #f #f ())
(1349 continuations #f #f ())
(1350 continuations #f #f ())
(1351 continuation-cont 1350 7 ())
(1352 continuations #f #f ())
(1353 real-continuation-pc 1352 7 ())
(1354 continuations #f #f ())
(1355 real-continuation-template 1354 7 ())
(1356 continuations #f #f ())
(1357 continuation-env 1356 7 ())
(1358 continuations #f #f ())
(1359 exception-continuation-pc 1358 7 ())
(1360 continuations #f #f ())
(1361 exception-continuation-template 1360 7 ())
(1362 continuations #f #f ())
(1363 exception-continuation-exception 1362 7 ())
(1364 continuations #f #f ())
(1365 exception-continuation? 1364 7 ())
(1366 continuations #f #f ())
(1367 continuation-pc 1366 7 ())
(1368 continuations #f #f ())
(1369 continuation-template 1368 7 ())
(1370 continuations #f #f ())
(1371 continuation-arg 1370 7 ())
(1372 continuations #f #f ())
(1373 continuation-arg-count 1372 7 ())
(1374 continuations #f #f ())
(1375 continuation-parent 1374 7 ())
(1376 loop 1375 105 ())
(1377 continuations #f #f ())
(1378 exceptions #f #f ())
(1379 &disclose 1378 48 ())
(1380 exceptions #f #f ())
(1381 &disclose 1380 52 ())
(1382 exceptions #f #f ())
(1383 report-errors-as-warnings 1382 7 ())
(1384 #f 1383 12 ())
(1385 exceptions #f #f ())
(1386 ignore-errors 1385 7 ())
(1387 #f 1386 6 ())
(1388 #f 1387 6 ())
(1389 exceptions #f #f ())
(1390 continuation-preview 1389 7 ())
(1391 exceptions #f #f ())
(1392 report-utter-lossage 1391 7 ())
(1393 #f 1392 183 ())
(1394 exceptions #f #f ())
(1395 last-resort-condition-handler 1394 7 ())
(1396 #f 1395 15 ())
(1397 #f 1396 23 ())
(1398 exceptions #f #f ())
(1399 initialize-exceptions! 1398 7 ())
(1400 #f 1399 6 ())
(1401 exceptions #f #f ())
(1402 exceptions #f #f ())
(1403 with-handler 1402 7 ())
(1404 exceptions #f #f ())
(1405 really-signal-condition 1404 7 ())
(1406 loop 1405 29 ())
(1407 #f 1406 9 ())
(1408 exceptions #f #f ())
(1409 extend-opcode! 1408 7 ())
(1410 except 1409 6 ())
(1411 #f 1409 32 ())
(1412 exceptions #f #f ())
(1413 #f 1412 11 ())
(1414 exceptions #f #f ())
(1415 #f 1414 11 ())
(1416 exceptions #f #f ())
(1417 exceptions #f #f ())
(1418 signal-exception 1417 7 ())
(1419 exceptions #f #f ())
(1420 define-exception-handler 1419 7 ())
(1421 threads #f #f ())
(1422 threads #f #f ())
(1423 threads #f #f ())
(1424 threads #f #f ())
(1425 threads #f #f ())
(1426 threads #f #f ())
(1427 threads #f #f ())
(1428 threads #f #f ())
(1429 #f 1428 11 ())
(1430 threads #f #f ())
(1431 thread-dynamic-env 1430 7 ())
(1432 threads #f #f ())
(1433 set-thread-dynamic-point! 1432 7 ())
(1434 threads #f #f ())
(1435 thread-dynamic-point 1434 7 ())
(1436 threads #f #f ())
(1437 thread-cell-env 1436 7 ())
(1438 threads #f #f ())
(1439 set-thread-continuation! 1438 7 ())
(1440 threads #f #f ())
(1441 thread-continuation 1440 7 ())
(1442 threads #f #f ())
(1443 set-thread-cell! 1442 7 ())
(1444 threads #f #f ())
(1445 thread-cell 1444 7 ())
(1446 threads #f #f ())
(1447 set-thread-arguments! 1446 7 ())
(1448 threads #f #f ())
(1449 thread-arguments 1448 7 ())
(1450 threads #f #f ())
(1451 set-thread-time! 1450 7 ())
(1452 threads #f #f ())
(1453 thread-time 1452 7 ())
(1454 threads #f #f ())
(1455 set-thread-scheduler! 1454 7 ())
(1456 threads #f #f ())
(1457 thread-scheduler 1456 7 ())
(1458 threads #f #f ())
(1459 set-thread-data! 1458 7 ())
(1460 threads #f #f ())
(1461 thread-data 1460 7 ())
(1462 threads #f #f ())
(1463 set-thread-events! 1462 7 ())
(1464 threads #f #f ())
(1465 thread-events 1464 7 ())
(1466 threads #f #f ())
(1467 set-thread-current-task! 1466 7 ())
(1468 threads #f #f ())
(1469 thread-current-task 1468 7 ())
(1470 threads #f #f ())
(1471 thread-uid 1470 7 ())
(1472 threads #f #f ())
(1473 thread-name 1472 7 ())
(1474 threads #f #f ())
(1475 really-make-thread 1474 7 ())
(1476 threads #f #f ())
(1477 threads #f #f ())
(1478 thread? 1477 7 ())
(1479 threads #f #f ())
(1480 compose-continuation 1479 7 ())
(1481 #f 1480 6 ())
(1482 #f 1481 27 ())
(1483 #f 1482 10 ())
(1484 #f 1483 9 ())
(1485 threads #f #f ())
(1486 thunk->continuation 1485 7 ())
(1487 threads #f #f ())
(1488 interrupt-timer-time 1487 7 ())
(1489 threads #f #f ())
(1490 debit-down! 1489 7 ())
(1491 loop 1490 28 ())
(1492 threads #f #f ())
(1493 run-thread 1492 7 ())
(1494 #f 1493 44 ())
(1495 threads #f #f ())
(1496 switch-to-thread 1495 7 ())
(1497 #f 1496 6 ())
(1498 threads #f #f ())
(1499 suspend-to 1498 7 ())
(1500 threads #f #f ())
(1501 suspend 1500 7 ())
(1502 threads #f #f ())
(1503 thread-top-level 1502 7 ())
(1504 thread-start 1503 6 ())
(1505 #f 1504 3 ())
(1506 threads #f #f ())
(1507 make-thread 1506 7 ())
(1508 threads #f #f ())
(1509 all-threads 1508 7 ())
(1510 threads #f #f ())
(1511 threads-with-uid 1510 7 ())
(1512 loop 1511 27 ())
(1513 threads #f #f ())
(1514 thread-uid->thread 1513 7 ())
(1515 threads #f #f ())
(1516 add-event! 1515 7 ())
(1517 threads #f #f ())
(1518 enqueue-thread! 1517 7 ())
(1519 threads #f #f ())
(1520 maybe-dequeue-thread! 1519 7 ())
(1521 loop 1520 15 ())
(1522 threads #f #f ())
(1523 thread-queue-empty? 1522 7 ())
(1524 loop 1523 15 ())
(1525 threads #f #f ())
(1526 event-pending? 1525 7 ())
(1527 threads #f #f ())
(1528 min 1527 7 ())
(1529 threads #f #f ())
(1530 schedule-interrupt! 1529 7 ())
(1531 threads #f #f ())
(1532 run-next-thread 1531 7 ())
(1533 threads #f #f ())
(1534 debit-thread-times-and-run! 1533 7 ())
(1535 loop 1534 41 ())
(1536 threads #f #f ())
(1537 find-and-run-next-thread 1536 7 ())
(1538 loop 1537 35 ())
(1539 threads #f #f ())
(1540 run 1539 7 ())
(1541 threads #f #f ())
(1542 handle-timer-interrupt 1541 7 ())
(1543 threads #f #f ())
(1544 exit 1543 7 ())
(1545 threads #f #f ())
(1546 wait 1545 7 ())
(1547 threads #f #f ())
(1548 waiting? 1547 7 ())
(1549 threads #f #f ())
(1550 block 1549 7 ())
(1551 threads #f #f ())
(1552 relinquish-timeslice 1551 7 ())
(1553 threads #f #f ())
(1554 block-on-queue 1553 7 ())
(1555 threads #f #f ())
(1556 running? 1555 7 ())
(1557 loop 1556 25 ())
(1558 threads #f #f ())
(1559 interrupt-thread 1558 7 ())
(1560 threads #f #f ())
(1561 propogate-upcall 1560 7 ())
(1562 #f 1561 62 ())
(1563 threads #f #f ())
(1564 upcall 1563 7 ())
(1565 threads #f #f ())
(1566 kill-thread! 1565 7 ())
(1567 #f 1566 9 ())
(1568 threads #f #f ())
(1569 clear-thread-cell! 1568 7 ())
(1570 threads #f #f ())
(1571 terminate-current-thread 1570 7 ())
(1572 threads #f #f ())
(1573 terminate-thread! 1572 7 ())
(1574 #f 1573 30 ())
(1575 threads #f #f ())
(1576 get-next-event! 1575 7 ())
(1577 threads #f #f ())
(1578 schedule-wakeup 1577 7 ())
(1579 threads #f #f ())
(1580 schedule-event 1579 7 ())
(1581 threads #f #f ())
(1582 show-running 1581 7 ())
(1583 loop##124 1582 16 ())
(1584 threads #f #f ())
(1585 spawn-on-scheduler 1584 7 ())
(1586 threads #f #f ())
(1587 spawn 1586 7 ())
(1588 threads #f #f ())
(1589 root-scheduler 1588 7 ())
(1590 threads #f #f ())
(1591 spawn-on-root 1590 7 ())
(1592 threads #f #f ())
(1593 narrow 1592 7 ())
(1594 threads #f #f ())
(1595 make-ready 1594 7 ())
(1596 threads #f #f ())
(1597 cancel-timer-interrupt! 1596 7 ())
(1598 threads #f #f ())
(1599 real-time 1598 7 ())
(1600 threads #f #f ())
(1601 start-multitasking 1600 7 ())
(1602 #f 1601 6 ())
(1603 #f 1602 6 ())
(1604 #f 1602 11 ())
(1605 #f 1604 7 ())
(1606 #f 1605 6 ())
(1607 #f 1605 11 ())
(1608 threads #f #f ())
(1609 with-threads 1608 7 ())
(1610 #f 1609 10 ())
(1611 #f 1610 3 ())
(1612 #f 1610 8 ())
(1613 #f 1610 13 ())
(1614 threads #f #f ())
(1615 insert 1614 7 ())
(1616 threads #f #f ())
(1617 insert-dozer! 1616 7 ())
(1618 #f 1617 31 ())
(1619 threads #f #f ())
(1620 coerce-to-nonnegative-integer 1619 7 ())
(1621 threads #f #f ())
(1622 sleep 1621 7 ())
(1623 threads #f #f ())
(1624 register-dozer 1623 7 ())
(1625 threads #f #f ())
(1626 wake-some-threads 1625 7 ())
(1627 loop 1626 46 ())
(1628 threads #f #f ())
(1629 threads #f #f ())
(1630 threads #f #f ())
(1631 threads #f #f ())
(1632 locks #f #f ())
(1633 set-lock-owner-uid! 1632 7 ())
(1634 locks #f #f ())
(1635 lock-owner-uid 1634 7 ())
(1636 locks #f #f ())
(1637 lock-queue 1636 7 ())
(1638 locks #f #f ())
(1639 lock-uid 1638 7 ())
(1640 locks #f #f ())
(1641 really-make-lock 1640 7 ())
(1642 locks #f #f ())
(1643 locks #f #f ())
(1644 lock? 1643 7 ())
(1645 locks #f #f ())
(1646 make-lock 1645 7 ())
(1647 locks #f #f ())
(1648 obtain-lock 1647 7 ())
(1649 #f 1648 10 ())
(1650 locks #f #f ())
(1651 maybe-obtain-lock 1650 7 ())
(1652 #f 1651 10 ())
(1653 locks #f #f ())
(1654 obtain-lock-multiple 1653 7 ())
(1655 #f 1654 12 ())
(1656 loop 1655 15 ())
(1657 #f 1656 20 ())
(1658 locks #f #f ())
(1659 release-lock 1658 7 ())
(1660 #f 1659 10 ())
(1661 locks #f #f ())
(1662 i/o #f #f ())
(1663 i/o #f #f ())
(1664 i/o #f #f ())
(1665 i/o #f #f ())
(1666 #f 1665 11 ())
(1667 #f 1665 16 ())
(1668 #f 1665 21 ())
(1669 #f 1665 26 ())
(1670 #f 1665 31 ())
(1671 i/o #f #f ())
(1672 i/o #f #f ())
(1673 i/o #f #f ())
(1674 i/o #f #f ())
(1675 i/o #f #f ())
(1676 i/o #f #f ())
(1677 i/o #f #f ())
(1678 i/o #f #f ())
(1679 i/o #f #f ())
(1680 i/o #f #f ())
(1681 &disclose 1680 52 ())
(1682 i/o #f #f ())
(1683 &disclose 1682 52 ())
(1684 i/o #f #f ())
(1685 port-handler-discloser 1684 7 ())
(1686 i/o #f #f ())
(1687 port-handler-close 1686 7 ())
(1688 i/o #f #f ())
(1689 port-handler-buffer-proc 1688 7 ())
(1690 i/o #f #f ())
(1691 port-handler-ready? 1690 7 ())
(1692 i/o #f #f ())
(1693 port-handler-steal 1692 7 ())
(1694 i/o #f #f ())
(1695 really-make-port-handler 1694 7 ())
(1696 i/o #f #f ())
(1697 i/o #f #f ())
(1698 port-handler? 1697 7 ())
(1699 i/o #f #f ())
(1700 make-port-handler 1699 7 ())
(1701 #f 1700 56 ())
(1702 i/o #f #f ())
(1703 disclose-port 1702 7 ())
(1704 i/o #f #f ())
(1705 obtain-port-lock 1704 7 ())
(1706 i/o #f #f ())
(1707 maybe-obtain-port-lock 1706 7 ())
(1708 i/o #f #f ())
(1709 release-port-lock 1708 7 ())
(1710 i/o #f #f ())
(1711 protect-port-op 1710 7 ())
(1712 #f 1711 23 ())
(1713 i/o #f #f ())
(1714 one-arg-proc->handler 1713 7 ())
(1715 #f 1714 6 ())
(1716 #f 1715 19 ())
(1717 i/o #f #f ())
(1718 fill-port-buffer! 1717 7 ())
(1719 i/o #f #f ())
(1720 read-char-handler 1719 7 ())
(1721 #f 1720 6 ())
(1722 i/o #f #f ())
(1723 two-arg-proc->handler 1722 7 ())
(1724 #f 1723 6 ())
(1725 #f 1724 19 ())
(1726 i/o #f #f ())
(1727 empty-port-buffer! 1726 7 ())
(1728 i/o #f #f ())
(1729 write-char-handler 1728 7 ())
(1730 i/o #f #f ())
(1731 initialize-i/o-handlers! 1730 7 ())
(1732 i/o #f #f ())
(1733 open-input-port? 1732 7 ())
(1734 i/o #f #f ())
(1735 make-input-port-closed! 1734 7 ())
(1736 i/o #f #f ())
(1737 close-input-port 1736 7 ())
(1738 #f 1737 24 ())
(1739 i/o #f #f ())
(1740 open-output-port? 1739 7 ())
(1741 i/o #f #f ())
(1742 make-output-port-closed! 1741 7 ())
(1743 i/o #f #f ())
(1744 really-force-output 1743 7 ())
(1745 i/o #f #f ())
(1746 close-output-port 1745 7 ())
(1747 #f 1746 24 ())
(1748 #f 1747 48 ())
(1749 #f 1748 6 ())
(1750 #f 1748 11 ())
(1751 #f 1747 53 ())
(1752 i/o #f #f ())
(1753 current-input-port 1752 7 ())
(1754 i/o #f #f ())
(1755 input-port-option 1754 7 ())
(1756 i/o #f #f ())
(1757 char-ready? 1756 7 ())
(1758 i/o #f #f ())
(1759 real-char-ready? 1758 7 ())
(1760 i/o #f #f ())
(1761 okay-limits? 1760 7 ())
(1762 i/o #f #f ())
(1763 read-more 1762 7 ())
(1764 i/o #f #f ())
(1765 buffer-length 1764 7 ())
(1766 i/o #f #f ())
(1767 really-read-block 1766 7 ())
(1768 i/o #f #f ())
(1769 read-block 1768 7 ())
(1770 #f 1769 102 ())
(1771 i/o #f #f ())
(1772 write-unbuffered-block 1771 7 ())
(1773 loop##142 1772 40 ())
(1774 i/o #f #f ())
(1775 write-buffered-block 1774 7 ())
(1776 i/o #f #f ())
(1777 write-block 1776 7 ())
(1778 #f 1777 62 ())
(1779 i/o #f #f ())
(1780 write-string 1779 7 ())
(1781 i/o #f #f ())
(1782 open-port? 1781 7 ())
(1783 i/o #f #f ())
(1784 output-port-ready? 1783 7 ())
(1785 #f 1784 154 ())
(1786 #f 1784 159 ())
(1787 i/o #f #f ())
(1788 force-output 1787 7 ())
(1789 #f 1788 37 ())
(1790 i/o #f #f ())
(1791 force-output-if-open 1790 7 ())
(1792 #f 1791 24 ())
(1793 i/o #f #f ())
(1794 okay-buffer? 1793 7 ())
(1795 i/o #f #f ())
(1796 make-input-port 1795 7 ())
(1797 i/o #f #f ())
(1798 make-output-port 1797 7 ())
(1799 i/o #f #f ())
(1800 make-unbuffered-output-port 1799 7 ())
(1801 i/o #f #f ())
(1802 make-null-output-port 1801 7 ())
(1803 i/o #f #f ())
(1804 initialize-output-port-list! 1803 7 ())
(1805 i/o #f #f ())
(1806 periodically-force-output! 1805 7 ())
(1807 i/o #f #f ())
(1808 make-forcing-thunk 1807 7 ())
(1809 #f 1808 6 ())
(1810 #f 1809 7 ())
(1811 #f 1810 18 ())
(1812 #f 1810 23 ())
(1813 #f 1809 59 ())
(1814 i/o #f #f ())
(1815 output-port-forcers 1814 7 ())
(1816 loop 1815 53 ())
(1817 i/o #f #f ())
(1818 periodically-flushed-ports 1817 7 ())
(1819 loop 1818 35 ())
(1820 i/o #f #f ())
(1821 really-steal-port! 1820 7 ())
(1822 #f 1821 158 ())
(1823 cleanup 1822 21 ())
(1824 #f 1822 29 ())
(1825 #f 1822 34 ())
(1826 i/o #f #f ())
(1827 steal-port! 1826 7 ())
(1828 i/o #f #f ())
(1829 make-buffered-input-port 1828 7 ())
(1830 i/o #f #f ())
(1831 make-buffered-output-port 1830 7 ())
(1832 i/o #f #f ())
(1833 okay-buffer? 1832 7 ())
(1834 i/o #f #f ())
(1835 make-char-ready? 1834 7 ())
(1836 #f 1835 6 ())
(1837 i/o #f #f ())
(1838 make-buffered-input-port-handler 1837 7 ())
(1839 i/o #f #f ())
(1840 make-buffered-output-port-handler 1839 7 ())
(1841 i/o #f #f ())
(1842 current-output-port 1841 7 ())
(1843 i/o #f #f ())
(1844 current-error-port 1843 7 ())
(1845 i/o #f #f ())
(1846 current-noise-port 1845 7 ())
(1847 i/o #f #f ())
(1848 with-current-ports 1847 7 ())
(1849 i/o #f #f ())
(1850 initialize-i/o 1849 7 ())
(1851 i/o #f #f ())
(1852 call-with-current-input-port 1851 7 ())
(1853 i/o #f #f ())
(1854 call-with-current-output-port 1853 7 ())
(1855 i/o #f #f ())
(1856 call-with-current-noise-port 1855 7 ())
(1857 i/o #f #f ())
(1858 silently 1857 7 ())
(1859 i/o #f #f ())
(1860 output-port-option 1859 7 ())
(1861 i/o #f #f ())
(1862 newline 1861 7 ())
(1863 i/o #f #f ())
(1864 i/o #f #f ())
(1865 i/o #f #f ())
(1866 writing #f #f ())
(1867 display 1866 7 ())
(1868 recur 1867 36 ())
(1869 writing #f #f ())
(1870 display-type-name 1869 7 ())
(1871 loop##148 1870 86 ())
(1872 writing #f #f ())
(1873 write-other 1872 7 ())
(1874 #f 1873 73 ())
(1875 writing #f #f ())
(1876 write-vector 1875 7 ())
(1877 loop 1876 76 ())
(1878 writing #f #f ())
(1879 quotation? 1878 7 ())
(1880 writing #f #f ())
(1881 write-list 1880 7 ())
(1882 loop 1881 88 ())
(1883 writing #f #f ())
(1884 write-string-literal 1883 7 ())
(1885 loop##152 1884 26 ())
(1886 writing #f #f ())
(1887 character-name 1886 7 ())
(1888 writing #f #f ())
(1889 write-char-literal 1888 7 ())
(1890 writing #f #f ())
(1891 write-number 1890 7 ())
(1892 writing #f #f ())
(1893 write-boolean 1892 7 ())
(1894 writing #f #f ())
(1895 recurring-write 1894 7 ())
(1896 writing #f #f ())
(1897 write 1896 7 ())
(1898 recur 1897 36 ())
(1899 reading #f #f ())
(1900 loop##154 1899 40 ())
(1901 reading #f #f ())
(1902 reading #f #f ())
(1903 #f 1902 15 ())
(1904 readc 1903 8 ())
(1905 read-digit 1903 16 ())
(1906 loop 1903 41 ())
(1907 reading #f #f ())
(1908 reading #f #f ())
(1909 reading #f #f ())
(1910 reading #f #f ())
(1911 reading #f #f ())
(1912 reading #f #f ())
(1913 reading #f #f ())
(1914 #f 1913 13 ())
(1915 reading #f #f ())
(1916 reading #f #f ())
(1917 reading #f #f ())
(1918 number-sharp-macro 1917 7 ())
(1919 #f 1917 15 ())
(1920 reading #f #f ())
(1921 #f 1920 7 ())
(1922 reading #f #f ())
(1923 #f 1922 7 ())
(1924 reading #f #f ())
(1925 #f 1924 7 ())
(1926 reading #f #f ())
(1927 #f 1926 7 ())
(1928 reading #f #f ())
(1929 #f 1928 13 ())
(1930 reading #f #f ())
(1931 #f 1930 15 ())
(1932 reading #f #f ())
(1933 #f 1932 15 ())
(1934 reading #f #f ())
(1935 #f 1934 15 ())
(1936 reading #f #f ())
(1937 #f 1936 15 ())
(1938 reading #f #f ())
(1939 #f 1938 15 ())
(1940 reading #f #f ())
(1941 reading #f #f ())
(1942 sub-read-constituent 1941 7 ())
(1943 #f 1941 15 ())
(1944 reading #f #f ())
(1945 sub-read-whitespace 1944 7 ())
(1946 #f 1944 15 ())
(1947 reading #f #f ())
(1948 reading #f #f ())
(1949 #f 1948 11 ())
(1950 reading #f #f ())
(1951 reading #f #f ())
(1952 reading #f #f ())
(1953 reading #f #f ())
(1954 preferred-case 1953 7 ())
(1955 reading #f #f ())
(1956 reader-token? 1955 7 ())
(1957 reading #f #f ())
(1958 reading-error 1957 7 ())
(1959 reading #f #f ())
(1960 sub-read 1959 7 ())
(1961 reading #f #f ())
(1962 read 1961 7 ())
(1963 loop 1962 33 ())
(1964 reading #f #f ())
(1965 script-skip 1964 7 ())
(1966 lp 1965 23 ())
(1967 advance-if 1966 6 ())
(1968 reading #f #f ())
(1969 multi-line-comment-skip 1968 7 ())
(1970 lp 1969 25 ())
(1971 advance-one-of-two 1970 6 ())
(1972 advance-if 1970 14 ())
(1973 reading #f #f ())
(1974 sub-read-carefully 1973 7 ())
(1975 reading #f #f ())
(1976 make-reader-token 1975 7 ())
(1977 reading #f #f ())
(1978 set-standard-syntax! 1977 7 ())
(1979 reading #f #f ())
(1980 set-standard-read-macro! 1979 7 ())
(1981 reading #f #f ())
(1982 sub-read-list 1981 7 ())
(1983 recur 1982 56 ())
(1984 reading #f #f ())
(1985 gobble-line 1984 7 ())
(1986 loop 1985 15 ())
(1987 reading #f #f ())
(1988 define-sharp-macro 1987 7 ())
(1989 reading #f #f ())
(1990 sub-read-token 1989 7 ())
(1991 loop 1990 32 ())
(1992 reading #f #f ())
(1993 parse-token 1992 7 ())
(1994 reading #f #f ())
(1995 reading #f #f ())
(1996 channels #f #f ())
(1997 close-output-channel 1996 7 ())
(1998 channels #f #f ())
(1999 close-input-channel 1998 7 ())
(2000 channels #f #f ())
(2001 open-output-channel 2000 7 ())
(2002 #f 2001 10 ())
(2003 channels #f #f ())
(2004 open-input-channel 2003 7 ())
(2005 #f 2004 10 ())
(2006 channels #f #f ())
(2007 set-with-fs-context-aligned*! 2006 7 ())
(2008 channels #f #f ())
(2009 with-fs-context-aligned* 2008 7 ())
(2010 channels #f #f ())
(2011 output-channel? 2010 7 ())
(2012 channels #f #f ())
(2013 input-channel? 2012 7 ())
(2014 channel-i/o #f #f ())
(2015 channel-has-waiter? 2014 7 ())
(2016 channel-i/o #f #f ())
(2017 fetch-channel-wait-cell! 2016 7 ())
(2018 loop 2017 92 ())
(2019 channel-i/o #f #f ())
(2020 add-channel-wait-cell! 2019 7 ())
(2021 channel-i/o #f #f ())
(2022 channel-i/o #f #f ())
(2023 decrement-channel-wait-count! 2022 7 ())
(2024 channel-i/o #f #f ())
(2025 increment-channel-wait-count! 2024 7 ())
(2026 channel-i/o #f #f ())
(2027 channel-wait-count 2026 7 ())
(2028 channel-i/o #f #f ())
(2029 channel-i/o #f #f ())
(2030 #f 2029 11 ())
(2031 channel-i/o #f #f ())
(2032 #f 2031 11 ())
(2033 channel-i/o #f #f ())
(2034 steal-channel! 2033 7 ())
(2035 #f 2034 6 ())
(2036 channel-i/o #f #f ())
(2037 wait-for-channels 2036 7 ())
(2038 signup 2037 145 ())
(2039 #f 2037 185 ())
(2040 #f 2037 190 ())
(2041 #f 2040 26 ())
(2042 make-cleanup 2041 3 ())
(2043 #f 2042 6 ())
(2044 channel-i/o #f #f ())
(2045 channel-check-waiter 2044 7 ())
(2046 channel-i/o #f #f ())
(2047 nothing 2046 7 ())
(2048 channel-i/o #f #f ())
(2049 wait-for-channel 2048 7 ())
(2050 #f 2049 6 ())
(2051 #f 2050 136 ())
(2052 #f 2051 7 ())
(2053 channel-i/o #f #f ())
(2054 waiting-for-i/o? 2053 7 ())
(2055 channel-i/o #f #f ())
(2056 make-i/o-completion-handler 2055 7 ())
(2057 #f 2056 6 ())
(2058 #f 2057 6 ())
(2059 channel-i/o #f #f ())
(2060 initialize-channel-i/o! 2059 7 ())
(2061 #f 2060 41 ())
(2062 #f 2060 69 ())
(2063 channel-i/o #f #f ())
(2064 force-channel-output-ports! 2063 7 ())
(2065 #f 2064 3 ())
(2066 channel-i/o #f #f ())
(2067 with-output-to-file 2066 7 ())
(2068 #f 2067 9 ())
(2069 channel-i/o #f #f ())
(2070 with-input-from-file 2069 7 ())
(2071 #f 2070 9 ())
(2072 channel-i/o #f #f ())
(2073 call-with-output-file 2072 7 ())
(2074 channel-i/o #f #f ())
(2075 call-with-input-file 2074 7 ())
(2076 channel-i/o #f #f ())
(2077 open-output-file 2076 7 ())
(2078 channel-i/o #f #f ())
(2079 open-input-file 2078 7 ())
(2080 channel-i/o #f #f ())
(2081 port->channel 2080 7 ())
(2082 channel-i/o #f #f ())
(2083 channel-cell? 2082 7 ())
(2084 channel-i/o #f #f ())
(2085 channel-cell-ref 2084 7 ())
(2086 channel-i/o #f #f ())
(2087 channel-cell-closer 2086 7 ())
(2088 channel-i/o #f #f ())
(2089 make-channel-cell 2088 7 ())
(2090 channel-i/o #f #f ())
(2091 channel-i/o #f #f ())
(2092 maybe-force-output 2091 7 ())
(2093 #f 2092 28 ())
(2094 channel-i/o #f #f ())
(2095 real-output-channel->port 2094 7 ())
(2096 channel-i/o #f #f ())
(2097 output-channel+closer->port 2096 7 ())
(2098 channel-i/o #f #f ())
(2099 output-channel->port 2098 7 ())
(2100 channel-i/o #f #f ())
(2101 make-unbuffered-output-channel-handler 2100 7 ())
(2102 #f 2101 15 ())
(2103 #f 2101 20 ())
(2104 #f 2101 25 ())
(2105 #f 2101 30 ())
(2106 #f 2101 35 ())
(2107 channel-i/o #f #f ())
(2108 #f 2107 11 ())
(2109 #f 2107 16 ())
(2110 #f 2107 21 ())
(2111 #f 2107 30 ())
(2112 channel-i/o #f #f ())
(2113 real-input-channel->port 2112 7 ())
(2114 channel-i/o #f #f ())
(2115 input-channel+closer->port 2114 7 ())
(2116 channel-i/o #f #f ())
(2117 input-channel->port 2116 7 ())
(2118 channel-i/o #f #f ())
(2119 #f 2118 11 ())
(2120 #f 2118 16 ())
(2121 #f 2118 21 ())
(2122 #f 2118 30 ())
(2123 channel-i/o #f #f ())
(2124 channel-port-ready? 2123 7 ())
(2125 scheme-level-2 #f #f ())
(2126 features #f #f ())
(2127 tables #f #f ())
(2128 tables #f #f ())
(2129 tables #f #f ())
(2130 tables #f #f ())
(2131 make-table 2130 32 ())
(2132 tables #f #f ())
(2133 tables #f #f ())
(2134 tables #f #f ())
(2135 tables #f #f ())
(2136 tables #f #f ())
(2137 set-table-size! 2136 7 ())
(2138 tables #f #f ())
(2139 table-size 2138 7 ())
(2140 tables #f #f ())
(2141 set-table-data! 2140 7 ())
(2142 tables #f #f ())
(2143 table-data 2142 7 ())
(2144 tables #f #f ())
(2145 set-table-ref-procedure! 2144 7 ())
(2146 tables #f #f ())
(2147 table-ref-procedure 2146 7 ())
(2148 tables #f #f ())
(2149 set-table-set!-procedure! 2148 7 ())
(2150 tables #f #f ())
(2151 table-set!-procedure 2150 7 ())
(2152 tables #f #f ())
(2153 really-make-table 2152 7 ())
(2154 tables #f #f ())
(2155 tables #f #f ())
(2156 table? 2155 7 ())
(2157 tables #f #f ())
(2158 table-ref 2157 7 ())
(2159 tables #f #f ())
(2160 table-set! 2159 7 ())
(2161 tables #f #f ())
(2162 next-table-size 2161 7 ())
(2163 tables #f #f ())
(2164 delete-entry! 2163 7 ())
(2165 loop 2164 40 ())
(2166 tables #f #f ())
(2167 new-entry 2166 7 ())
(2168 tables #f #f ())
(2169 make-linear-table-set! 2168 7 ())
(2170 #f 2169 6 ())
(2171 tables #f #f ())
(2172 table-expand-table! 2171 7 ())
(2173 tables #f #f ())
(2174 table-enter-alist! 2173 7 ())
(2175 loop##186 2174 26 ())
(2176 tables #f #f ())
(2177 make-hash-table-ref 2176 7 ())
(2178 #f 2177 6 ())
(2179 tables #f #f ())
(2180 expand-hash-table! 2179 7 ())
(2181 loop##188 2180 52 ())
(2182 tables #f #f ())
(2183 make-hash-table-set! 2182 7 ())
(2184 #f 2183 6 ())
(2185 tables #f #f ())
(2186 make->hash-table 2185 7 ())
(2187 #f 2186 41 ())
(2188 tables #f #f ())
(2189 make-linear-table-ref 2188 7 ())
(2190 #f 2189 6 ())
(2191 tables #f #f ())
(2192 assoc->table-maker 2191 7 ())
(2193 #f 2192 60 ())
(2194 tables #f #f ())
(2195 make-assoc 2194 7 ())
(2196 #f 2195 20 ())
(2197 loop 2196 18 ())
(2198 tables #f #f ())
(2199 make-table-maker 2198 7 ())
(2200 tables #f #f ())
(2201 alist-walk 2200 7 ())
(2202 loop##190 2201 11 ())
(2203 tables #f #f ())
(2204 really-table-walk 2203 7 ())
(2205 loop##193 2204 63 ())
(2206 tables #f #f ())
(2207 table-walk 2206 7 ())
(2208 #f 2207 6 ())
(2209 tables #f #f ())
(2210 make-table-immutable! 2209 7 ())
(2211 tables #f #f ())
(2212 table->entry-list 2211 7 ())
(2213 #f 2212 17 ())
(2214 tables #f #f ())
(2215 default-table-hash-function 2214 7 ())
(2216 tables #f #f ())
(2217 default-table-assoc 2216 7 ())
(2218 tables #f #f ())
(2219 symbol-hash 2218 7 ())
(2220 tables #f #f ())
(2221 tables #f #f ())
(2222 weak #f #f ())
(2223 walk-population 2222 7 ())
(2224 #f 2223 6 ())
(2225 weak #f #f ())
(2226 population->list 2225 7 ())
(2227 weak #f #f ())
(2228 population-reduce 2227 7 ())
(2229 loop##195 2228 11 ())
(2230 weak #f #f ())
(2231 weak-memq 2230 7 ())
(2232 weak #f #f ())
(2233 add-to-population! 2232 7 ())
(2234 weak #f #f ())
(2235 make-population 2234 7 ())
(2236 meta-types #f #f ())
(2237 meta-types #f #f ())
(2238 meta-types #f #f ())
(2239 meta-types #f #f ())
(2240 meta-types #f #f ())
(2241 meta-types #f #f ())
(2242 meta-types #f #f ())
(2243 meta-types #f #f ())
(2244 meta-types #f #f ())
(2245 meta-types #f #f ())
(2246 meta-types #f #f ())
(2247 meta-types #f #f ())
(2248 meta-types #f #f ())
(2249 meta-types #f #f ())
(2250 meta-types #f #f ())
(2251 meta-types #f #f ())
(2252 meta-types #f #f ())
(2253 meta-types #f #f ())
(2254 meta-types #f #f ())
(2255 meta-types #f #f ())
(2256 meta-types #f #f ())
(2257 meta-types #f #f ())
(2258 meta-types #f #f ())
(2259 meta-types #f #f ())
(2260 meta-types #f #f ())
(2261 meta-types #f #f ())
(2262 meta-types #f #f ())
(2263 meta-types #f #f ())
(2264 meta-types #f #f ())
(2265 meta-types #f #f ())
(2266 loop 2265 28 ())
(2267 meta-types #f #f ())
(2268 meta-types #f #f ())
(2269 meta-types #f #f ())
(2270 meta-types #f #f ())
(2271 meta-types #f #f ())
(2272 meta-types #f #f ())
(2273 meta-types #f #f ())
(2274 meta-types #f #f ())
(2275 meta-types #f #f ())
(2276 meta-types #f #f ())
(2277 meta-types #f #f ())
(2278 meta-types #f #f ())
(2279 meta-types #f #f ())
(2280 meta-types #f #f ())
(2281 meta-types #f #f ())
(2282 meta-types #f #f ())
(2283 meta-types #f #f ())
(2284 meta-types #f #f ())
(2285 meta-types #f #f ())
(2286 meta-types #f #f ())
(2287 #f 2286 11 ())
(2288 meta-types #f #f ())
(2289 type-mask 2288 7 ())
(2290 meta-types #f #f ())
(2291 type-more 2290 7 ())
(2292 meta-types #f #f ())
(2293 type-info 2292 7 ())
(2294 meta-types #f #f ())
(2295 really-make-type 2294 7 ())
(2296 meta-types #f #f ())
(2297 meta-types #f #f ())
(2298 meta-type? 2297 7 ())
(2299 meta-types #f #f ())
(2300 make-type 2299 7 ())
(2301 meta-types #f #f ())
(2302 set-type-name! 2301 7 ())
(2303 meta-types #f #f ())
(2304 make-other-type 2303 7 ())
(2305 meta-types #f #f ())
(2306 name->type 2305 7 ())
(2307 meta-types #f #f ())
(2308 new-type-bit 2307 7 ())
(2309 meta-types #f #f ())
(2310 mask->type 2309 7 ())
(2311 meta-types #f #f ())
(2312 bottom-type? 2311 7 ())
(2313 meta-types #f #f ())
(2314 new-atomic-type 2313 7 ())
(2315 meta-types #f #f ())
(2316 named-atomic-type 2315 7 ())
(2317 meta-types #f #f ())
(2318 empty-rail-type? 2317 7 ())
(2319 meta-types #f #f ())
(2320 rest-type? 2319 7 ())
(2321 meta-types #f #f ())
(2322 same-type? 2321 7 ())
(2323 meta-types #f #f ())
(2324 head-type 2323 7 ())
(2325 meta-types #f #f ())
(2326 optional-type? 2325 7 ())
(2327 meta-types #f #f ())
(2328 rail-type 2327 7 ())
(2329 meta-types #f #f ())
(2330 make-optional-type 2329 7 ())
(2331 meta-types #f #f ())
(2332 make-rest-type 2331 7 ())
(2333 meta-types #f #f ())
(2334 head-type-really 2333 7 ())
(2335 meta-types #f #f ())
(2336 tail-type 2335 7 ())
(2337 meta-types #f #f ())
(2338 value-type? 2337 7 ())
(2339 meta-types #f #f ())
(2340 other-type-info 2339 7 ())
(2341 meta-types #f #f ())
(2342 restrictive? 2341 7 ())
(2343 meta-types #f #f ())
(2344 make-procedure-type 2343 7 ())
(2345 meta-types #f #f ())
(2346 procedure-type-domain 2345 7 ())
(2347 meta-types #f #f ())
(2348 procedure-type-codomain 2347 7 ())
(2349 meta-types #f #f ())
(2350 meet-procedure 2349 7 ())
(2351 meta-types #f #f ())
(2352 meet-rail 2351 7 ())
(2353 meta-types #f #f ())
(2354 meet-type 2353 7 ())
(2355 meta-types #f #f ())
(2356 subtype? 2355 7 ())
(2357 meta-types #f #f ())
(2358 meet-procedure? 2357 7 ())
(2359 meta-types #f #f ())
(2360 meet? 2359 7 ())
(2361 meta-types #f #f ())
(2362 procedure-type? 2361 7 ())
(2363 meta-types #f #f ())
(2364 join-procedure 2363 7 ())
(2365 meta-types #f #f ())
(2366 join-rail 2365 7 ())
(2367 meta-types #f #f ())
(2368 join-type 2367 7 ())
(2369 meta-types #f #f ())
(2370 procedure-type 2369 7 ())
(2371 meta-types #f #f ())
(2372 variable-type 2371 7 ())
(2373 meta-types #f #f ())
(2374 sexp->values-type 2373 7 ())
(2375 meta-types #f #f ())
(2376 sexp->type 2375 7 ())
(2377 #f 2376 281 ())
(2378 #f 2376 345 ())
(2379 meta-types #f #f ())
(2380 variable-type? 2379 7 ())
(2381 meta-types #f #f ())
(2382 disjoin-rest 2381 7 ())
(2383 meta-types #f #f ())
(2384 disjoin-type 2383 7 ())
(2385 loop##214 2384 262 ())
(2386 meta-types #f #f ())
(2387 atomic-type->sexp 2386 7 ())
(2388 meta-types #f #f ())
(2389 rail-type->sexp 2388 7 ())
(2390 recur 2389 25 ())
(2391 meta-types #f #f ())
(2392 type->sexp 2391 7 ())
(2393 #f 2392 196 ())
(2394 meta-types #f #f ())
(2395 make-some-values-type 2394 7 ())
(2396 meta-types #f #f ())
(2397 fixed-arity-procedure-type? 2396 7 ())
(2398 loop 2397 43 ())
(2399 meta-types #f #f ())
(2400 procedure-type-arity 2399 7 ())
(2401 loop##217 2400 11 ())
(2402 meta-types #f #f ())
(2403 procedure-type-argument-types 2402 7 ())
(2404 recur 2403 28 ())
(2405 meta-types #f #f ())
(2406 compatible-types? 2405 7 ())
(2407 meta-types #f #f ())
(2408 meta-types #f #f ())
(2409 meta-types #f #f ())
(2410 interfaces #f #f ())
(2411 #f 2410 7 ())
(2412 interfaces #f #f ())
(2413 ref-method 2412 7 ())
(2414 interfaces #f #f ())
(2415 walk-method 2414 7 ())
(2416 interfaces #f #f ())
(2417 interface-clients 2416 7 ())
(2418 interfaces #f #f ())
(2419 set-interface-name! 2418 7 ())
(2420 interfaces #f #f ())
(2421 interface-name 2420 7 ())
(2422 interfaces #f #f ())
(2423 really-make-interface 2422 7 ())
(2424 interfaces #f #f ())
(2425 interfaces #f #f ())
(2426 interface? 2425 7 ())
(2427 interfaces #f #f ())
(2428 make-interface 2427 7 ())
(2429 interfaces #f #f ())
(2430 interface-ref 2429 7 ())
(2431 interfaces #f #f ())
(2432 interface-member? 2431 7 ())
(2433 #f 2432 6 ())
(2434 interfaces #f #f ())
(2435 for-each-declaration 2434 7 ())
(2436 interfaces #f #f ())
(2437 note-reference-to-interface! 2436 7 ())
(2438 interfaces #f #f ())
(2439 note-interface-name! 2438 7 ())
(2440 interfaces #f #f ())
(2441 make-simple-interface-table 2440 7 ())
(2442 #f 2441 23 ())
(2443 #f 2442 62 ())
(2444 interfaces #f #f ())
(2445 make-simple-interface 2444 7 ())
(2446 #f 2445 22 ())
(2447 #f 2445 27 ())
(2448 #f 2447 6 ())
(2449 interfaces #f #f ())
(2450 make-compound-interface 2449 7 ())
(2451 #f 2450 12 ())
(2452 loop 2451 18 ())
(2453 #f 2452 23 ())
(2454 #f 2450 17 ())
(2455 #f 2454 6 ())
(2456 #f 2450 38 ())
(2457 interfaces #f #f ())
(2458 proper-list? 2457 7 ())
(2459 interfaces #f #f ())
(2460 okay-command? 2459 7 ())
(2461 #f 2460 158 ())
(2462 interfaces #f #f ())
(2463 symbol-append 2462 7 ())
(2464 interfaces #f #f ())
(2465 process-prefix 2464 7 ())
(2466 #f 2465 19 ())
(2467 #f 2465 37 ())
(2468 interfaces #f #f ())
(2469 prefix-match? 2468 7 ())
(2470 loop 2469 30 ())
(2471 interfaces #f #f ())
(2472 remove-prefix 2471 7 ())
(2473 interfaces #f #f ())
(2474 interface-lookup 2473 7 ())
(2475 interfaces #f #f ())
(2476 process-expose 2475 7 ())
(2477 loop 2476 26 ())
(2478 interfaces #f #f ())
(2479 process-hide 2478 7 ())
(2480 interfaces #f #f ())
(2481 process-alias 2480 7 ())
(2482 #f 2481 14 ())
(2483 interfaces #f #f ())
(2484 process-rename 2483 7 ())
(2485 #f 2484 14 ())
(2486 interfaces #f #f ())
(2487 process-commands 2486 7 ())
(2488 loop 2487 44 ())
(2489 #f 2488 20 ())
(2490 #f 2488 43 ())
(2491 interfaces #f #f ())
(2492 make-lookup 2491 7 ())
(2493 #f 2492 6 ())
(2494 interfaces #f #f ())
(2495 cdr-assq 2494 7 ())
(2496 loop 2495 18 ())
(2497 interfaces #f #f ())
(2498 make-default-walker 2497 7 ())
(2499 #f 2498 6 ())
(2500 #f 2499 6 ())
(2501 interfaces #f #f ())
(2502 make-alist-walker 2501 7 ())
(2503 #f 2502 6 ())
(2504 #f 2503 6 ())
(2505 #f 2504 6 ())
(2506 interfaces #f #f ())
(2507 make-modified-interface 2506 7 ())
(2508 #f 2507 44 ())
(2509 bindings #f #f ())
(2510 bindings #f #f ())
(2511 binding-type 2510 7 ())
(2512 bindings #f #f ())
(2513 binding-place 2512 7 ())
(2514 bindings #f #f ())
(2515 binding-static 2514 7 ())
(2516 bindings #f #f ())
(2517 binding-path 2516 7 ())
(2518 bindings #f #f ())
(2519 set-binding-place! 2518 7 ())
(2520 bindings #f #f ())
(2521 make-binding 2520 7 ())
(2522 bindings #f #f ())
(2523 add-path 2522 7 ())
(2524 bindings #f #f ())
(2525 clobber-binding! 2524 7 ())
(2526 bindings #f #f ())
(2527 impose-type 2526 7 ())
(2528 bindings #f #f ())
(2529 forget-integration 2528 7 ())
(2530 bindings #f #f ())
(2531 same-denotation? 2530 7 ())
(2532 bindings #f #f ())
(2533 follow-forwarding-pointers 2532 7 ())
(2534 bindings #f #f ())
(2535 maybe-fix-place! 2534 7 ())
(2536 names #f #f ())
(2537 #f 2536 7 ())
(2538 names #f #f ())
(2539 transform-procedure 2538 7 ())
(2540 names #f #f ())
(2541 transform-env 2540 7 ())
(2542 names #f #f ())
(2543 transform-type 2542 7 ())
(2544 names #f #f ())
(2545 transform-aux-names 2544 7 ())
(2546 names #f #f ())
(2547 transform-source 2546 7 ())
(2548 names #f #f ())
(2549 transform-id 2548 7 ())
(2550 names #f #f ())
(2551 really-make-transform 2550 7 ())
(2552 names #f #f ())
(2553 names #f #f ())
(2554 names #f #f ())
(2555 #f 2554 11 ())
(2556 names #f #f ())
(2557 generated-name 2556 7 ())
(2558 names #f #f ())
(2559 generated-token 2558 7 ())
(2560 names #f #f ())
(2561 generated-env 2560 7 ())
(2562 names #f #f ())
(2563 generated-parent-name 2562 7 ())
(2564 names #f #f ())
(2565 make-generated 2564 7 ())
(2566 names #f #f ())
(2567 names #f #f ())
(2568 generated? 2567 7 ())
(2569 names #f #f ())
(2570 name? 2569 7 ())
(2571 names #f #f ())
(2572 generate-name 2571 7 ())
(2573 names #f #f ())
(2574 generated-uid 2573 7 ())
(2575 names #f #f ())
(2576 name->symbol 2575 7 ())
(2577 names #f #f ())
(2578 name-hash 2577 7 ())
(2579 names #f #f ())
(2580 desyntaxify 2579 7 ())
(2581 loop 2580 267 ())
(2582 names #f #f ())
(2583 make-qualified 2582 7 ())
(2584 names #f #f ())
(2585 qualified? 2584 7 ())
(2586 names #f #f ())
(2587 qualified-parent-name 2586 7 ())
(2588 names #f #f ())
(2589 qualified-symbol 2588 7 ())
(2590 names #f #f ())
(2591 qualified-uid 2590 7 ())
(2592 names #f #f ())
(2593 lookup 2592 7 ())
(2594 names #f #f ())
(2595 transform? 2594 7 ())
(2596 names #f #f ())
(2597 qualify-parent 2596 7 ())
(2598 recur 2597 18 ())
(2599 names #f #f ())
(2600 name->qualified 2599 7 ())
(2601 names #f #f ())
(2602 make-transform 2601 7 ())
(2603 names #f #f ())
(2604 name->source-name 2603 7 ())
(2605 names #f #f ())
(2606 make-keyword-comparator 2605 7 ())
(2607 #f 2606 6 ())
(2608 names #f #f ())
(2609 make-name-generator 2608 7 ())
(2610 #f 2609 13 ())
(2611 names #f #f ())
(2612 bind-aliases 2611 7 ())
(2613 #f 2612 36 ())
(2614 names #f #f ())
(2615 maybe-apply-macro-transform 2614 7 ())
(2616 names #f #f ())
(2617 apply-inline-transform 2616 7 ())
(2618 names #f #f ())
(2619 compiler-envs #f #f ())
(2620 compiler-envs #f #f ())
(2621 compiler-envs #f #f ())
(2622 compiler-envs #f #f ())
(2623 compiler-envs #f #f ())
(2624 lookup 2623 7 ())
(2625 compiler-envs #f #f ())
(2626 bind1 2625 7 ())
(2627 #f 2626 6 ())
(2628 compiler-envs #f #f ())
(2629 bind 2628 7 ())
(2630 compiler-envs #f #f ())
(2631 bindrec 2630 7 ())
(2632 #f 2631 17 ())
(2633 compiler-envs #f #f ())
(2634 make-compiler-env 2633 7 ())
(2635 #f 2634 6 ())
(2636 compiler-envs #f #f ())
(2637 environment-macro-eval 2636 7 ())
(2638 compiler-envs #f #f ())
(2639 environment-define! 2638 7 ())
(2640 compiler-envs #f #f ())
(2641 extract-package-from-environment 2640 7 ())
(2642 compiler-envs #f #f ())
(2643 bind-source-file-name 2642 7 ())
(2644 compiler-envs #f #f ())
(2645 source-file-name 2644 7 ())
(2646 thingies #f #f ())
(2647 thingie-binding 2646 7 ())
(2648 thingies #f #f ())
(2649 thingie-name 2648 7 ())
(2650 thingies #f #f ())
(2651 thingie-want-type 2650 7 ())
(2652 thingies #f #f ())
(2653 make-thingie 2652 7 ())
(2654 thingies #f #f ())
(2655 thingies #f #f ())
(2656 thingie? 2655 7 ())
(2657 packages #f #f ())
(2658 #f 2657 11 ())
(2659 packages #f #f ())
(2660 packages #f #f ())
(2661 packages #f #f ())
(2662 packages #f #f ())
(2663 packages #f #f ())
(2664 packages #f #f ())
(2665 packages #f #f ())
(2666 packages #f #f ())
(2667 #f 2666 11 ())
(2668 packages #f #f ())
(2669 package-uid 2668 7 ())
(2670 packages #f #f ())
(2671 set-package-opens! 2670 7 ())
(2672 packages #f #f ())
(2673 package-opens-really 2672 7 ())
(2674 packages #f #f ())
(2675 package-definitions 2674 7 ())
(2676 packages #f #f ())
(2677 package-unstable? 2676 7 ())
(2678 packages #f #f ())
(2679 set-package-integrate?! 2678 7 ())
(2680 packages #f #f ())
(2681 package-integrate? 2680 7 ())
(2682 packages #f #f ())
(2683 set-package-get-location! 2682 7 ())
(2684 packages #f #f ())
(2685 package-get-location 2684 7 ())
(2686 packages #f #f ())
(2687 package-file-name 2686 7 ())
(2688 packages #f #f ())
(2689 package-clauses 2688 7 ())
(2690 packages #f #f ())
(2691 set-package-loaded?! 2690 7 ())
(2692 packages #f #f ())
(2693 package-loaded? 2692 7 ())
(2694 packages #f #f ())
(2695 set-package->environment! 2694 7 ())
(2696 packages #f #f ())
(2697 package->environment 2696 7 ())
(2698 packages #f #f ())
(2699 set-package-opens-thunk! 2698 7 ())
(2700 packages #f #f ())
(2701 package-opens-thunk 2700 7 ())
(2702 packages #f #f ())
(2703 package-accesses-thunk 2702 7 ())
(2704 packages #f #f ())
(2705 set-package-undefineds! 2704 7 ())
(2706 packages #f #f ())
(2707 package-real-undefineds 2706 7 ())
(2708 packages #f #f ())
(2709 set-package-undefined-but-assigneds! 2708 7 ())
(2710 packages #f #f ())
(2711 package-real-undefined-but-assigneds 2710 7 ())
(2712 packages #f #f ())
(2713 package-clients 2712 7 ())
(2714 packages #f #f ())
(2715 package-cached 2714 7 ())
(2716 packages #f #f ())
(2717 really-make-package 2716 7 ())
(2718 packages #f #f ())
(2719 packages #f #f ())
(2720 #f 2719 11 ())
(2721 packages #f #f ())
(2722 structure-interface-thunk 2721 7 ())
(2723 packages #f #f ())
(2724 set-structure-interface! 2723 7 ())
(2725 packages #f #f ())
(2726 structure-interface-really 2725 7 ())
(2727 packages #f #f ())
(2728 structure-package 2727 7 ())
(2729 packages #f #f ())
(2730 structure-clients 2729 7 ())
(2731 packages #f #f ())
(2732 set-structure-name! 2731 7 ())
(2733 packages #f #f ())
(2734 structure-name 2733 7 ())
(2735 packages #f #f ())
(2736 really-make-structure 2735 7 ())
(2737 packages #f #f ())
(2738 packages #f #f ())
(2739 structure? 2738 7 ())
(2740 packages #f #f ())
(2741 initialize-structure! 2740 7 ())
(2742 packages #f #f ())
(2743 structure-interface 2742 7 ())
(2744 packages #f #f ())
(2745 package? 2744 7 ())
(2746 packages #f #f ())
(2747 note-package-name! 2746 7 ())
(2748 packages #f #f ())
(2749 note-structure-name! 2748 7 ())
(2750 packages #f #f ())
(2751 make-structure 2750 7 ())
(2752 #f 2751 85 ())
(2753 packages #f #f ())
(2754 structure-unstable? 2753 7 ())
(2755 packages #f #f ())
(2756 make-modified-structure 2755 7 ())
(2757 #f 2756 22 ())
(2758 packages #f #f ())
(2759 get-new-location 2758 7 ())
(2760 packages #f #f ())
(2761 package-define! 2760 7 ())
(2762 packages #f #f ())
(2763 package-accesses 2762 7 ())
(2764 packages #f #f ())
(2765 initialize-package! 2764 7 ())
(2766 #f 2765 45 ())
(2767 #f 2765 59 ())
(2768 packages #f #f ())
(2769 initialize-package-if-necessary! 2768 7 ())
(2770 packages #f #f ())
(2771 package-definition 2770 7 ())
(2772 packages #f #f ())
(2773 search-opens 2772 7 ())
(2774 loop 2773 18 ())
(2775 packages #f #f ())
(2776 structure-lookup 2775 7 ())
(2777 #f 2776 6 ())
(2778 packages #f #f ())
(2779 package-lookup 2778 7 ())
(2780 packages #f #f ())
(2781 generic-lookup 2780 7 ())
(2782 packages #f #f ())
(2783 really-package-lookup 2782 7 ())
(2784 packages #f #f ())
(2785 real-structure-lookup 2784 7 ())
(2786 packages #f #f ())
(2787 for-each-export 2786 7 ())
(2788 #f 2787 22 ())
(2789 packages #f #f ())
(2790 really-package->environment 2789 7 ())
(2791 #f 2790 6 ())
(2792 #f 2790 11 ())
(2793 packages #f #f ())
(2794 new-package-uid 2793 7 ())
(2795 packages #f #f ())
(2796 make-package 2795 7 ())
(2797 packages #f #f ())
(2798 lazy-table-accessor 2797 7 ())
(2799 #f 2798 6 ())
(2800 packages #f #f ())
(2801 package-name 2800 7 ())
(2802 packages #f #f ())
(2803 package-opens 2802 7 ())
(2804 packages #f #f ())
(2805 make-simple-package 2804 7 ())
(2806 #f 2805 65 ())
(2807 #f 2805 70 ())
(2808 packages #f #f ())
(2809 package-add-static! 2808 7 ())
(2810 packages #f #f ())
(2811 package-refine-type! 2810 7 ())
(2812 packages #f #f ())
(2813 for-each-definition 2812 7 ())
(2814 #f 2813 6 ())
(2815 packages #f #f ())
(2816 make-new-location 2815 7 ())
(2817 packages #f #f ())
(2818 flush-location-names 2817 7 ())
(2819 packages #f #f ())
(2820 print-undefined-names 2819 7 ())
(2821 #f 2820 10 ())
(2822 #f 2820 51 ())
(2823 packages #f #f ())
(2824 noting-undefined-variables 2823 7 ())
(2825 add-name 2824 13 ())
(2826 #f 2824 25 ())
(2827 #f 2824 30 ())
(2828 #f 2827 3 ())
(2829 #f 2827 11 ())
(2830 #f 2829 3 ())
(2831 packages #f #f ())
(2832 cenv->package 2831 7 ())
(2833 packages #f #f ())
(2834 get-location-for-unassignable 2833 7 ())
(2835 #f 2834 98 ())
(2836 #f 2834 103 ())
(2837 packages #f #f ())
(2838 package-note-caching! 2837 7 ())
(2839 loop 2838 79 ())
(2840 packages #f #f ())
(2841 note-caching! 2840 7 ())
(2842 packages #f #f ())
(2843 location-for-reference 2842 7 ())
(2844 loop 2843 28 ())
(2845 packages #f #f ())
(2846 get-location-for-undefined 2845 7 ())
(2847 #f 2846 105 ())
(2848 packages #f #f ())
(2849 get-location 2848 7 ())
(2850 packages #f #f ())
(2851 really-link! 2850 7 ())
(2852 loop##313 2851 11 ())
(2853 packages #f #f ())
(2854 link! 2853 7 ())
(2855 #f 2854 14 ())
(2856 packages #f #f ())
(2857 location-on-demand 2856 7 ())
(2858 #f 2857 6 ())
(2859 packages #f #f ())
(2860 packages #f #f ())
(2861 environments #f #f ())
(2862 set-reflective-tower-maker! 2861 28 ())
(2863 environments #f #f ())
(2864 make-reflective-tower 2863 7 ())
(2865 recur 2864 19 ())
(2866 #f 2865 6 ())
(2867 environments #f #f ())
(2868 null-environment 2867 7 ())
(2869 environments #f #f ())
(2870 set-scheme-report-environment! 2869 7 ())
(2871 environments #f #f ())
(2872 environments #f #f ())
(2873 environments #f #f ())
(2874 environments #f #f ())
(2875 scheme-report-environment 2874 7 ())
(2876 environments #f #f ())
(2877 with-interaction-environment 2876 7 ())
(2878 environments #f #f ())
(2879 set-interaction-environment! 2878 7 ())
(2880 environments #f #f ())
(2881 interaction-environment 2880 7 ())
(2882 environments #f #f ())
(2883 environments #f #f ())
(2884 carefully 2883 7 ())
(2885 environments #f #f ())
(2886 *structure-ref 2885 7 ())
(2887 environments #f #f ())
(2888 environment-define! 2887 7 ())
(2889 environments #f #f ())
(2890 environment-set! 2889 7 ())
(2891 #f 2890 115 ())
(2892 environments #f #f ())
(2893 environment-ref 2892 7 ())
(2894 #f 2893 22 ())
(2895 filenames #f #f ())
(2896 translate 2895 7 ())
(2897 loop 2896 26 ())
(2898 filenames #f #f ())
(2899 set-translation! 2898 7 ())
(2900 filenames #f #f ())
(2901 translations 2900 7 ())
(2902 filenames #f #f ())
(2903 filenames #f #f ())
(2904 string-posq 2903 7 ())
(2905 loop 2904 19 ())
(2906 filenames #f #f ())
(2907 file-nondirectory-position 2906 7 ())
(2908 loop 2907 24 ())
(2909 filenames #f #f ())
(2910 file-name-nondirectory 2909 7 ())
(2911 filenames #f #f ())
(2912 file-name-directory 2911 7 ())
(2913 filenames #f #f ())
(2914 filenames #f #f ())
(2915 filenames #f #f ())
(2916 filenames #f #f ())
(2917 namestring-component 2916 7 ())
(2918 filenames #f #f ())
(2919 filenames #f #f ())
(2920 filenames #f #f ())
(2921 namestring 2920 7 ())
(2922 #f 2921 183 ())
(2923 reading-forms #f #f ())
(2924 read-forms-from-port 2923 7 ())
(2925 loop 2924 19 ())
(2926 reading-forms #f #f ())
(2927 read-forms 2926 7 ())
(2928 #f 2927 60 ())
(2929 #f 2927 65 ())
(2930 #f 2927 70 ())
(2931 reading-forms #f #f ())
(2932 #f 2931 11 ())
(2933 nodes #f #f ())
(2934 #f 2933 15 ())
(2935 nodes #f #f ())
(2936 #f 2935 19 ())
(2937 nodes #f #f ())
(2938 #f 2937 19 ())
(2939 #f 2938 29 ())
(2940 #f 2938 53 ())
(2941 nodes #f #f ())
(2942 nodes #f #f ())
(2943 nodes #f #f ())
(2944 #f 2943 19 ())
(2945 #f 2944 6 ())
(2946 nodes #f #f ())
(2947 #f 2946 19 ())
(2948 nodes #f #f ())
(2949 #f 2948 19 ())
(2950 nodes #f #f ())
(2951 #f 2950 11 ())
(2952 nodes #f #f ())
(2953 #f 2952 11 ())
(2954 nodes #f #f ())
(2955 node-operator-id 2954 7 ())
(2956 nodes #f #f ())
(2957 node-form 2956 7 ())
(2958 nodes #f #f ())
(2959 set-node-plist! 2958 7 ())
(2960 nodes #f #f ())
(2961 node-plist 2960 7 ())
(2962 nodes #f #f ())
(2963 really-make-node 2962 7 ())
(2964 nodes #f #f ())
(2965 nodes #f #f ())
(2966 nodes #f #f ())
(2967 nodes #f #f ())
(2968 nodes #f #f ())
(2969 nodes #f #f ())
(2970 #f 2969 11 ())
(2971 nodes #f #f ())
(2972 set-operator-type! 2971 7 ())
(2973 nodes #f #f ())
(2974 operator-type 2973 7 ())
(2975 nodes #f #f ())
(2976 operator-nargs 2975 7 ())
(2977 nodes #f #f ())
(2978 operator-uid 2977 7 ())
(2979 nodes #f #f ())
(2980 operator-name 2979 7 ())
(2981 nodes #f #f ())
(2982 make-operator 2981 7 ())
(2983 nodes #f #f ())
(2984 nodes #f #f ())
(2985 operator? 2984 7 ())
(2986 nodes #f #f ())
(2987 get-operator 2986 7 ())
(2988 nodes #f #f ())
(2989 make-operator-table 2988 7 ())
(2990 nodes #f #f ())
(2991 operator-lookup 2990 7 ())
(2992 nodes #f #f ())
(2993 operator-define! 2992 7 ())
(2994 nodes #f #f ())
(2995 node? 2994 7 ())
(2996 nodes #f #f ())
(2997 make-node 2996 7 ())
(2998 nodes #f #f ())
(2999 node-ref 2998 7 ())
(3000 nodes #f #f ())
(3001 node-set! 3000 7 ())
(3002 loop 3001 103 ())
(3003 nodes #f #f ())
(3004 node-operator 3003 7 ())
(3005 nodes #f #f ())
(3006 node-predicate 3005 7 ())
(3007 #f 3006 37 ())
(3008 nodes #f #f ())
(3009 make-similar-node 3008 7 ())
(3010 nodes #f #f ())
(3011 force-node 3010 7 ())
(3012 nodes #f #f ())
(3013 schemify-node 3012 7 ())
(3014 nodes #f #f ())
(3015 schemify-sexp 3014 7 ())
(3016 loop 3015 147 ())
(3017 nodes #f #f ())
(3018 schemify 3017 7 ())
(3019 nodes #f #f ())
(3020 schemify-nodes 3019 7 ())
(3021 #f 3020 6 ())
(3022 nodes #f #f ())
(3023 define-schemifier 3022 7 ())
(3024 nodes #f #f ())
(3025 schemify-formals 3024 7 ())
(3026 nodes #f #f ())
(3027 schemify-lambda 3026 7 ())
(3028 nodes #f #f ())
(3029 nodes #f #f ())
(3030 var-utilities #f #f ())
(3031 normalize-formals 3030 7 ())
(3032 var-utilities #f #f ())
(3033 n-ary? 3032 7 ())
(3034 var-utilities #f #f ())
(3035 number-of-required-args 3034 7 ())
(3036 loop##332 3035 11 ())
(3037 syntactic #f #f ())
(3038 syntactic #f #f ())
(3039 syntactic #f #f ())
(3040 syntactic #f #f ())
(3041 syntactic #f #f ())
(3042 syntactic #f #f ())
(3043 syntactic #f #f ())
(3044 syntactic #f #f ())
(3045 syntactic #f #f ())
(3046 syntactic #f #f ())
(3047 syntactic #f #f ())
(3048 syntactic #f #f ())
(3049 syntactic #f #f ())
(3050 syntactic #f #f ())
(3051 syntactic #f #f ())
(3052 syntactic #f #f ())
(3053 syntactic #f #f ())
(3054 #f 3053 19 ())
(3055 #f 3054 108 ())
(3056 syntactic #f #f ())
(3057 #f 3056 19 ())
(3058 #f 3057 92 ())
(3059 #f 3058 6 ())
(3060 syntactic #f #f ())
(3061 #f 3060 19 ())
(3062 #f 3061 96 ())
(3063 syntactic #f #f ())
(3064 #f 3063 19 ())
(3065 syntactic #f #f ())
(3066 #f 3065 19 ())
(3067 #f 3066 75 ())
(3068 syntactic #f #f ())
(3069 #f 3068 19 ())
(3070 syntactic #f #f ())
(3071 #f 3070 19 ())
(3072 syntactic #f #f ())
(3073 #f 3072 19 ())
(3074 syntactic #f #f ())
(3075 #f 3074 19 ())
(3076 syntactic #f #f ())
(3077 #f 3076 19 ())
(3078 syntactic #f #f ())
(3079 #f 3078 19 ())
(3080 syntactic #f #f ())
(3081 #f 3080 19 ())
(3082 syntactic #f #f ())
(3083 #f 3082 19 ())
(3084 syntactic #f #f ())
(3085 #f 3084 11 ())
(3086 syntactic #f #f ())
(3087 syntactic #f #f ())
(3088 syntactic #f #f ())
(3089 syntactic #f #f ())
(3090 at-least-this-long? 3089 7 ())
(3091 syntactic #f #f ())
(3092 names? 3091 7 ())
(3093 syntactic #f #f ())
(3094 destructure-define 3093 7 ())
(3095 syntactic #f #f ())
(3096 scan-define 3095 7 ())
(3097 syntactic #f #f ())
(3098 this-long? 3097 7 ())
(3099 syntactic #f #f ())
(3100 process-syntax 3099 7 ())
(3101 syntactic #f #f ())
(3102 scan-define-syntax 3101 7 ())
(3103 syntactic #f #f ())
(3104 expand-name 3103 7 ())
(3105 syntactic #f #f ())
(3106 expand-operator-form 3105 7 ())
(3107 syntactic #f #f ())
(3108 literal? 3107 7 ())
(3109 syntactic #f #f ())
(3110 expand-literal 3109 7 ())
(3111 syntactic #f #f ())
(3112 expand-list 3111 7 ())
(3113 #f 3112 6 ())
(3114 syntactic #f #f ())
(3115 expand-call 3114 7 ())
(3116 syntactic #f #f ())
(3117 expand 3116 7 ())
(3118 syntactic #f #f ())
(3119 expand-macro-application 3118 7 ())
(3120 #f 3119 6 ())
(3121 syntactic #f #f ())
(3122 expand-structure-ref 3121 7 ())
(3123 lose 3122 28 ())
(3124 syntactic #f #f ())
(3125 expand-head 3124 7 ())
(3126 syntactic #f #f ())
(3127 scan-forms 3126 7 ())
(3128 loop 3127 22 ())
(3129 syntactic #f #f ())
(3130 expand-define 3129 7 ())
(3131 syntactic #f #f ())
(3132 expand-scanned-form 3131 7 ())
(3133 syntactic #f #f ())
(3134 expand-form 3133 7 ())
(3135 loop 3134 32 ())
(3136 syntactic #f #f ())
(3137 static-value 3136 7 ())
(3138 syntactic #f #f ())
(3139 make-operator-predicate 3138 7 ())
(3140 #f 3139 26 ())
(3141 syntactic #f #f ())
(3142 body-lossage 3141 7 ())
(3143 syntactic #f #f ())
(3144 scan-body-forms 3143 7 ())
(3145 #f 3144 226 ())
(3146 syntactic #f #f ())
(3147 expand-letrec 3146 7 ())
(3148 #f 3147 10 ())
(3149 syntactic #f #f ())
(3150 expand-body 3149 7 ())
(3151 #f 3150 33 ())
(3152 #f 3151 48 ())
(3153 syntactic #f #f ())
(3154 define-expander 3153 7 ())
(3155 syntactic #f #f ())
(3156 unspecific-node 3155 7 ())
(3157 syntactic #f #f ())
(3158 bind-names 3157 7 ())
(3159 loop 3158 26 ())
(3160 syntactic #f #f ())
(3161 expand-lambda 3160 7 ())
(3162 #f 3161 6 ())
(3163 syntactic #f #f ())
(3164 specs? 3163 7 ())
(3165 syntactic #f #f ())
(3166 syntax? 3165 7 ())
(3167 primops #f #f ())
(3168 primops #f #f ())
(3169 #f 3168 11 ())
(3170 primops #f #f ())
(3171 primop-name 3170 7 ())
(3172 primops #f #f ())
(3173 primop-type 3172 7 ())
(3174 primops #f #f ())
(3175 primop-closed 3174 7 ())
(3176 primops #f #f ())
(3177 primop-compilator 3176 7 ())
(3178 primops #f #f ())
(3179 make-primop 3178 7 ())
(3180 primops #f #f ())
(3181 primops #f #f ())
(3182 primop? 3181 7 ())
(3183 primops #f #f ())
(3184 walk-primops 3183 7 ())
(3185 #f 3184 6 ())
(3186 primops #f #f ())
(3187 define-compiler-primitive 3186 7 ())
(3188 primops #f #f ())
(3189 get-primop 3188 7 ())
(3190 debug-data #f #f ())
(3191 #f 3190 7 ())
(3192 debug-data #f #f ())
(3193 debug-data-uid 3192 7 ())
(3194 debug-data #f #f ())
(3195 debug-data-name 3194 7 ())
(3196 debug-data #f #f ())
(3197 debug-data-parent 3196 7 ())
(3198 debug-data #f #f ())
(3199 debug-data-pc-in-parent 3198 7 ())
(3200 debug-data #f #f ())
(3201 set-debug-data-env-maps! 3200 7 ())
(3202 debug-data #f #f ())
(3203 debug-data-env-maps 3202 7 ())
(3204 debug-data #f #f ())
(3205 set-debug-data-source! 3204 7 ())
(3206 debug-data #f #f ())
(3207 debug-data-source 3206 7 ())
(3208 debug-data #f #f ())
(3209 make-debug-data 3208 7 ())
(3210 debug-data #f #f ())
(3211 debug-data #f #f ())
(3212 debug-data? 3211 7 ())
(3213 stack-check #f #f ())
(3214 loop##360 3213 8 ())
(3215 stack-check #f #f ())
(3216 #f 3215 11 ())
(3217 loop 3216 48 ())
(3218 stack-check #f #f ())
(3219 #f 3218 11 ())
(3220 stack-check #f #f ())
(3221 #f 3220 11 ())
(3222 stack-check #f #f ())
(3223 stack-check #f #f ())
(3224 stack-check #f #f ())
(3225 #f 3224 11 ())
(3226 loop 3225 68 ())
(3227 stack-check #f #f ())
(3228 #f 3227 11 ())
(3229 stack-check #f #f ())
(3230 #f 3229 11 ())
(3231 stack-check #f #f ())
(3232 #f 3231 11 ())
(3233 stack-check #f #f ())
(3234 #f 3233 11 ())
(3235 stack-check #f #f ())
(3236 stack-check #f #f ())
(3237 stack-check #f #f ())
(3238 stack-check #f #f ())
(3239 stack-check #f #f ())
(3240 stack-check #f #f ())
(3241 stack-check #f #f ())
(3242 stack-check #f #f ())
(3243 stack-check #f #f ())
(3244 stack-check #f #f ())
(3245 stack-check #f #f ())
(3246 stack-check #f #f ())
(3247 stack-check #f #f ())
(3248 stack-check #f #f ())
(3249 stack-check #f #f ())
(3250 stack-check #f #f ())
(3251 stack-check #f #f ())
(3252 stack-max 3251 7 ())
(3253 stack-check #f #f ())
(3254 protocol-skip 3253 7 ())
(3255 stack-check #f #f ())
(3256 maximum-stack-use 3255 7 ())
(3257 loop##363 3256 74 ())
(3258 stack-check #f #f ())
(3259 nothing 3258 7 ())
(3260 #f 3259 6 ())
(3261 stack-check #f #f ())
(3262 popper 3261 7 ())
(3263 #f 3262 6 ())
(3264 stack-check #f #f ())
(3265 imax 3264 7 ())
(3266 stack-check #f #f ())
(3267 pusher 3266 7 ())
(3268 #f 3267 6 ())
(3269 stack-check #f #f ())
(3270 continue 3269 7 ())
(3271 stack-check #f #f ())
(3272 continuer 3271 7 ())
(3273 #f 3272 6 ())
(3274 stack-check #f #f ())
(3275 get-offset 3274 7 ())
(3276 stack-check #f #f ())
(3277 do-make-cont 3276 7 ())
(3278 #f 3277 6 ())
(3279 stack-check #f #f ())
(3280 arg-spec-size 3279 7 ())
(3281 stack-check #f #f ())
(3282 stack-function 3281 7 ())
(3283 loop 3282 22 ())
(3284 segments #f #f ())
(3285 segments #f #f ())
(3286 segments #f #f ())
(3287 segments #f #f ())
(3288 #f 3287 15 ())
(3289 segments #f #f ())
(3290 astate-code-vector 3289 7 ())
(3291 segments #f #f ())
(3292 set-astate-pc! 3291 7 ())
(3293 segments #f #f ())
(3294 astate-pc 3293 7 ())
(3295 segments #f #f ())
(3296 set-astate-count! 3295 7 ())
(3297 segments #f #f ())
(3298 astate-count 3297 7 ())
(3299 segments #f #f ())
(3300 set-astate-literals! 3299 7 ())
(3301 segments #f #f ())
(3302 astate-literals 3301 7 ())
(3303 segments #f #f ())
(3304 make-assembly-state 3303 7 ())
(3305 segments #f #f ())
(3306 segments #f #f ())
(3307 segments #f #f ())
(3308 segments #f #f ())
(3309 segments #f #f ())
(3310 segments #f #f ())
(3311 segments #f #f ())
(3312 segments #f #f ())
(3313 segments #f #f ())
(3314 segments #f #f ())
(3315 segments #f #f ())
(3316 segments #f #f ())
(3317 segments #f #f ())
(3318 segments #f #f ())
(3319 new-template-uid 3318 7 ())
(3320 segments #f #f ())
(3321 template-uid 3320 7 ())
(3322 segments #f #f ())
(3323 set-template-uid! 3322 7 ())
(3324 segments #f #f ())
(3325 debug-flag-accessor 3324 7 ())
(3326 #f 3325 26 ())
(3327 segments #f #f ())
(3328 debug-flag-modifier 3327 7 ())
(3329 #f 3328 26 ())
(3330 segments #f #f ())
(3331 saving-and-restoring 3330 7 ())
(3332 swap 3331 6 ())
(3333 segments #f #f ())
(3334 with-fresh-compiler-state 3333 7 ())
(3335 #f 3334 44 ())
(3336 #f 3335 3 ())
(3337 #f 3335 8 ())
(3338 segments #f #f ())
(3339 note-debug-data! 3338 7 ())
(3340 segments #f #f ())
(3341 debug-data->info 3340 7 ())
(3342 segments #f #f ())
(3343 get-debug-data 3342 7 ())
(3344 segments #f #f ())
(3345 new-debug-data 3344 7 ())
(3346 segments #f #f ())
(3347 high-byte 3346 7 ())
(3348 segments #f #f ())
(3349 emit-byte! 3348 7 ())
(3350 segments #f #f ())
(3351 low-byte 3350 7 ())
(3352 segments #f #f ())
(3353 position 3352 7 ())
(3354 loop 3353 22 ())
(3355 segments #f #f ())
(3356 literal-position 3355 7 ())
(3357 #f 3356 21 ())
(3358 segments #f #f ())
(3359 literal->index 3358 7 ())
(3360 segments #f #f ())
(3361 emit-literal! 3360 7 ())
(3362 segments #f #f ())
(3363 code-vector-set2! 3362 7 ())
(3364 segments #f #f ())
(3365 check-stack-use 3364 7 ())
(3366 loop##374 3365 77 ())
(3367 segments #f #f ())
(3368 emit-segment! 3367 7 ())
(3369 segments #f #f ())
(3370 emit-with-environment-maps! 3369 7 ())
(3371 #f 3370 14 ())
(3372 segments #f #f ())
(3373 make-astate 3372 7 ())
(3374 segments #f #f ())
(3375 template 3374 7 ())
(3376 #f 3375 10 ())
(3377 segments #f #f ())
(3378 segment-data->template 3377 7 ())
(3379 loop##376 3378 68 ())
(3380 segments #f #f ())
(3381 segment->template 3380 7 ())
(3382 #f 3381 124 ())
(3383 segments #f #f ())
(3384 instruction 3383 7 ())
(3385 #f 3384 30 ())
(3386 #f 3385 22 ())
(3387 segments #f #f ())
(3388 sequentially-2 3387 7 ())
(3389 #f 3388 59 ())
(3390 segments #f #f ())
(3391 sequentially 3390 7 ())
(3392 loop 3391 97 ())
(3393 #f 3391 112 ())
(3394 loop 3393 18 ())
(3395 segments #f #f ())
(3396 instruction-with-literal 3395 7 ())
(3397 #f 3396 30 ())
(3398 #f 3397 160 ())
(3399 segments #f #f ())
(3400 instruction-with-location 3399 7 ())
(3401 #f 3400 10 ())
(3402 segments #f #f ())
(3403 make-label 3402 7 ())
(3404 segments #f #f ())
(3405 insert-label! 3404 7 ())
(3406 segments #f #f ())
(3407 instruction-using-label 3406 7 ())
(3408 #f 3407 49 ())
(3409 segments #f #f ())
(3410 computed-goto-instruction 3409 7 ())
(3411 #f 3410 68 ())
(3412 loop##377 3411 75 ())
(3413 segments #f #f ())
(3414 attach-label 3413 7 ())
(3415 #f 3414 19 ())
(3416 #f 3415 37 ())
(3417 segments #f #f ())
(3418 note-source-code 3417 7 ())
(3419 #f 3418 19 ())
(3420 segments #f #f ())
(3421 note-environment 3420 7 ())
(3422 #f 3421 31 ())
(3423 segments #f #f ())
(3424 segments #f #f ())
(3425 segments #f #f ())
(3426 reconstruction #f #f ())
(3427 constant-type 3426 7 ())
(3428 reconstruction #f #f ())
(3429 reconstruction #f #f ())
(3430 reconstruction #f #f ())
(3431 reconstruct-apply 3430 7 ())
(3432 #f 3431 56 ())
(3433 reconstruction #f #f ())
(3434 #f 3433 11 ())
(3435 reconstruction #f #f ())
(3436 #f 3435 11 ())
(3437 #f 3436 10 ())
(3438 reconstruction #f #f ())
(3439 #f 3438 15 ())
(3440 reconstruction #f #f ())
(3441 define-primop-reconstructor 3440 7 ())
(3442 reconstruction #f #f ())
(3443 reconstruction #f #f ())
(3444 reconstruction #f #f ())
(3445 reconstruction #f #f ())
(3446 reconstruction #f #f ())
(3447 #f 3446 15 ())
(3448 reconstruction #f #f ())
(3449 #f 3448 15 ())
(3450 reconstruction #f #f ())
(3451 node->type 3450 7 ())
(3452 reconstruction #f #f ())
(3453 #f 3452 15 ())
(3454 reconstruction #f #f ())
(3455 #f 3454 15 ())
(3456 #f 3455 59 ())
(3457 reconstruction #f #f ())
(3458 #f 3457 15 ())
(3459 reconstruction #f #f ())
(3460 #f 3459 15 ())
(3461 loop##379 3460 11 ())
(3462 reconstruction #f #f ())
(3463 reconstruction #f #f ())
(3464 fork-constraints 3463 7 ())
(3465 #f 3464 13 ())
(3466 reconstruction #f #f ())
(3467 #f 3466 15 ())
(3468 #f 3467 150 ())
(3469 reconstruction #f #f ())
(3470 #f 3469 13 ())
(3471 reconstruction #f #f ())
(3472 #f 3471 13 ())
(3473 reconstruction #f #f ())
(3474 #f 3473 15 ())
(3475 reconstruction #f #f ())
(3476 #f 3475 15 ())
(3477 reconstruction #f #f ())
(3478 reconstruct-call 3477 7 ())
(3479 lose 3478 112 ())
(3480 #f 3479 3 ())
(3481 loop 3478 179 ())
(3482 reconstruction #f #f ())
(3483 proc->reconstructor 3482 7 ())
(3484 reconstruction #f #f ())
(3485 #f 3484 15 ())
(3486 reconstruction #f #f ())
(3487 reconstruct-name 3486 7 ())
(3488 reconstruction #f #f ())
(3489 #f 3488 15 ())
(3490 reconstruction #f #f ())
(3491 careful-codomain 3490 7 ())
(3492 reconstruction #f #f ())
(3493 reconstruct-lambda 3492 7 ())
(3494 #f 3493 67 ())
(3495 reconstruction #f #f ())
(3496 #f 3495 15 ())
(3497 reconstruction #f #f ())
(3498 #f 3497 15 ())
(3499 reconstruction #f #f ())
(3500 define-reconstructor 3499 7 ())
(3501 reconstruction #f #f ())
(3502 #f 3501 11 ())
(3503 reconstruction #f #f ())
(3504 examine 3503 7 ())
(3505 reconstruction #f #f ())
(3506 reconstruct 3505 7 ())
(3507 reconstruction #f #f ())
(3508 reconstruct-type 3507 7 ())
(3509 reconstruction #f #f ())
(3510 node-type 3509 7 ())
(3511 compiler #f #f ())
(3512 compiler #f #f ())
(3513 loop 3512 59 ())
(3514 compiler #f #f ())
(3515 compiler #f #f ())
(3516 compiler #f #f ())
(3517 define-one-or-two 3516 7 ())
(3518 #f 3517 12 ())
(3519 #f 3517 17 ())
(3520 compiler #f #f ())
(3521 define-one-or-two 3520 7 ())
(3522 #f 3521 73 ())
(3523 #f 3521 78 ())
(3524 compiler #f #f ())
(3525 compiler #f #f ())
(3526 compiler #f #f ())
(3527 define=< 3526 7 ())
(3528 #f 3527 73 ())
(3529 #f 3527 78 ())
(3530 compiler #f #f ())
(3531 define+* 3530 7 ())
(3532 #f 3531 43 ())
(3533 #f 3531 48 ())
(3534 compiler #f #f ())
(3535 define-char-io 3534 7 ())
(3536 #f 3535 12 ())
(3537 #f 3535 17 ())
(3538 compiler #f #f ())
(3539 define-char-io 3538 7 ())
(3540 #f 3539 12 ())
(3541 #f 3539 17 ())
(3542 compiler #f #f ())
(3543 n-ary-constructor 3542 7 ())
(3544 #f 3543 16 ())
(3545 #f 3543 21 ())
(3546 compiler #f #f ())
(3547 #f 3546 21 ())
(3548 compiler #f #f ())
(3549 #f 3548 44 ())
(3550 #f 3549 112 ())
(3551 #f 3548 49 ())
(3552 compiler #f #f ())
(3553 #f 3552 17 ())
(3554 #f 3552 22 ())
(3555 compiler #f #f ())
(3556 #f 3555 73 ())
(3557 #f 3555 84 ())
(3558 compiler #f #f ())
(3559 #f 3558 71 ())
(3560 #f 3558 76 ())
(3561 compiler #f #f ())
(3562 #f 3561 57 ())
(3563 #f 3561 62 ())
(3564 compiler #f #f ())
(3565 compiler #f #f ())
(3566 #f 3565 7 ())
(3567 compiler #f #f ())
(3568 #f 3567 7 ())
(3569 compiler #f #f ())
(3570 compiler #f #f ())
(3571 compiler #f #f ())
(3572 compiler #f #f ())
(3573 compiler #f #f ())
(3574 loop##383 3573 12 ())
(3575 compiler #f #f ())
(3576 compiler #f #f ())
(3577 #f 3576 19 ())
(3578 compiler #f #f ())
(3579 compiler #f #f ())
(3580 compiler #f #f ())
(3581 compiler #f #f ())
(3582 compiler #f #f ())
(3583 compiler #f #f ())
(3584 compiler #f #f ())
(3585 compiler #f #f ())
(3586 #f 3585 19 ())
(3587 compiler #f #f ())
(3588 compiler #f #f ())
(3589 compiler #f #f ())
(3590 compiler #f #f ())
(3591 compiler #f #f ())
(3592 #f 3591 19 ())
(3593 #f 3592 68 ())
(3594 #f 3592 152 ())
(3595 compiler #f #f ())
(3596 #f 3595 19 ())
(3597 compiler #f #f ())
(3598 #f 3597 19 ())
(3599 compiler #f #f ())
(3600 compiler #f #f ())
(3601 #f 3600 19 ())
(3602 loop 3601 89 ())
(3603 compiler #f #f ())
(3604 #f 3603 19 ())
(3605 compiler #f #f ())
(3606 #f 3605 19 ())
(3607 compiler #f #f ())
(3608 #f 3607 19 ())
(3609 compiler #f #f ())
(3610 #f 3609 19 ())
(3611 compiler #f #f ())
(3612 #f 3611 41 ())
(3613 compiler #f #f ())
(3614 #f 3613 41 ())
(3615 compiler #f #f ())
(3616 #f 3615 19 ())
(3617 compiler #f #f ())
(3618 #f 3617 11 ())
(3619 compiler #f #f ())
(3620 diagnose-call-error 3619 7 ())
(3621 #f 3620 173 ())
(3622 compiler #f #f ())
(3623 type-check 3622 7 ())
(3624 #f 3623 121 ())
(3625 compiler #f #f ())
(3626 compile 3625 7 ())
(3627 compiler #f #f ())
(3628 compile-expression 3627 7 ())
(3629 compiler #f #f ())
(3630 define-compilator 3629 7 ())
(3631 compiler #f #f ())
(3632 ignore-values-cont? 3631 7 ())
(3633 compiler #f #f ())
(3634 deliver-value 3633 7 ())
(3635 compiler #f #f ())
(3636 compile-constant 3635 7 ())
(3637 compiler #f #f ())
(3638 return-cont? 3637 7 ())
(3639 compiler #f #f ())
(3640 fixup-source 3639 7 ())
(3641 compiler #f #f ())
(3642 maybe-push-continuation 3641 7 ())
(3643 compiler #f #f ())
(3644 make-cont 3643 7 ())
(3645 compiler #f #f ())
(3646 fall-through-cont 3645 7 ())
(3647 compiler #f #f ())
(3648 push-arguments 3647 7 ())
(3649 recur 3648 37 ())
(3650 compiler #f #f ())
(3651 compile-unknown-call 3650 7 ())
(3652 compiler #f #f ())
(3653 name-node-binding 3652 7 ())
(3654 compiler #f #f ())
(3655 compile-name-call 3654 7 ())
(3656 compiler #f #f ())
(3657 generate-trap 3656 7 ())
(3658 compiler #f #f ())
(3659 named-cont 3658 7 ())
(3660 compiler #f #f ())
(3661 push-all-with-names 3660 7 ())
(3662 compiler #f #f ())
(3663 set-lexical-offsets! 3662 7 ())
(3664 loop 3663 22 ())
(3665 compiler #f #f ())
(3666 name-node->symbol 3665 7 ())
(3667 compiler #f #f ())
(3668 return-cont 3667 7 ())
(3669 compiler #f #f ())
(3670 compile-lambda-code 3669 7 ())
(3671 compiler #f #f ())
(3672 cont-name 3671 7 ())
(3673 compiler #f #f ())
(3674 compile-redex 3673 7 ())
(3675 compiler #f #f ())
(3676 compile-call 3675 7 ())
(3677 compiler #f #f ())
(3678 compile-lambda 3677 7 ())
(3679 compiler #f #f ())
(3680 variable-env-data 3679 7 ())
(3681 level-loop 3680 26 ())
(3682 loop 3681 56 ())
(3683 loop 3682 119 ())
(3684 compiler #f #f ())
(3685 sort-list 3684 7 ())
(3686 insert 3685 11 ())
(3687 sort 3685 32 ())
(3688 compiler #f #f ())
(3689 get-variables-offsets 3688 7 ())
(3690 loop 3689 22 ())
(3691 compiler #f #f ())
(3692 compile-flat-lambda 3691 7 ())
(3693 #f 3692 26 ())
(3694 #f 3692 366 ())
(3695 compiler #f #f ())
(3696 fall-through-cont? 3695 7 ())
(3697 compiler #f #f ())
(3698 ignore-values-cont 3697 7 ())
(3699 compiler #f #f ())
(3700 set-type-check?! 3699 7 ())
(3701 compiler #f #f ())
(3702 push-all-but-last 3701 7 ())
(3703 recur 3702 25 ())
(3704 compiler #f #f ())
(3705 direct-compilator 3704 7 ())
(3706 #f 3705 6 ())
(3707 compiler #f #f ())
(3708 direct-closed-compilator 3707 7 ())
(3709 #f 3708 6 ())
(3710 compiler #f #f ())
(3711 nargs->domain 3710 7 ())
(3712 loop##392 3711 11 ())
(3713 compiler #f #f ())
(3714 get-primop-type 3713 7 ())
(3715 #f 3714 10 ())
(3716 compiler #f #f ())
(3717 simple-compilator 3716 7 ())
(3718 #f 3717 6 ())
(3719 compiler #f #f ())
(3720 simple-closed-compilator 3719 7 ())
(3721 #f 3720 6 ())
(3722 compiler #f #f ())
(3723 define-simple-primitive 3722 7 ())
(3724 compiler #f #f ())
(3725 symbol-append 3724 7 ())
(3726 compiler #f #f ())
(3727 define-stob-predicate 3726 7 ())
(3728 compiler #f #f ())
(3729 define-data-struct-primitives 3728 7 ())
(3730 def-prim 3729 8 ())
(3731 loop##394 3729 190 ())
(3732 compiler #f #f ())
(3733 define-vector-primitives 3732 7 ())
(3734 def-prim 3733 26 ())
(3735 compiler #f #f ())
(3736 n-ary-primitive-compilator 3735 7 ())
(3737 #f 3736 6 ())
(3738 compiler #f #f ())
(3739 define-n-ary-compiler-primitive 3738 7 ())
(3740 compiler #f #f ())
(3741 call-on-arg-and-id 3740 7 ())
(3742 compiler #f #f ())
(3743 call-on-args 3742 7 ())
(3744 do-arg 3743 6 ())
(3745 loop 3743 52 ())
(3746 compiler #f #f ())
(3747 make-dispatch-protocol 3746 7 ())
(3748 compiler #f #f ())
(3749 compile-definition 3748 7 ())
(3750 compiler #f #f ())
(3751 compile-form 3750 7 ())
(3752 compiler #f #f ())
(3753 compile-forms-loop 3752 7 ())
(3754 compiler #f #f ())
(3755 compile-forms 3754 7 ())
(3756 compiler #f #f ())
(3757 append-templates 3756 7 ())
(3758 #f 3757 31 ())
(3759 compiler #f #f ())
(3760 make-startup-procedure 3759 7 ())
(3761 compiler #f #f ())
(3762 evaluation #f #f ())
(3763 compile-and-run 3762 7 ())
(3764 #f 3763 61 ())
(3765 #f 3764 6 ())
(3766 evaluation #f #f ())
(3767 really-load-into 3766 7 ())
(3768 evaluation #f #f ())
(3769 load-port 3768 7 ())
(3770 evaluation #f #f ())
(3771 load 3770 7 ())
(3772 evaluation #f #f ())
(3773 eval-from-file 3772 7 ())
(3774 evaluation #f #f ())
(3775 load-into 3774 7 ())
(3776 evaluation #f #f ())
(3777 eval 3776 7 ())
(3778 scheme #f #f ())
(3779 display-conditions #f #f ())
(3780 limited-write 3779 7 ())
(3781 recur 3780 22 ())
(3782 #f 3781 145 ())
(3783 #f 3782 24 ())
(3784 display-conditions #f #f ())
(3785 &disclose-condition 3784 52 ())
(3786 display-conditions #f #f ())
(3787 display-conditions #f #f ())
(3788 display-conditions #f #f ())
(3789 display-conditions #f #f ())
(3790 display-conditions #f #f ())
(3791 really-display-condition 3790 7 ())
(3792 #f 3791 242 ())
(3793 display-conditions #f #f ())
(3794 display-condition 3793 22 ())
(3795 #f 3794 10 ())
(3796 mini-command #f #f ())
(3797 read-string 3796 7 ())
(3798 loop 3797 23 ())
(3799 mini-command #f #f ())
(3800 mini-load 3799 7 ())
(3801 mini-command #f #f ())
(3802 command-processor 3801 7 ())
(3803 loop 3802 77 ())
(3804 #f 3803 7 ())
(3805 #f 3804 6 ())
(3806 #f 3805 68 ())
(3807 #f 3804 11 ())
(3808 #f 3807 75 ())
(3809 #f 3807 197 ())
(3810 #f 3807 238 ())
(3811 #f 3810 12 ())
(3812 rts-sigevents #f #f ())
(3813 rts-sigevents #f #f ())
(3814 rts-sigevents #f #f ())
(3815 set-sigevent-type! 3814 7 ())
(3816 rts-sigevents #f #f ())
(3817 sigevent-type 3816 7 ())
(3818 rts-sigevents #f #f ())
(3819 set-sigevent-next! 3818 7 ())
(3820 rts-sigevents #f #f ())
(3821 sigevent-next 3820 7 ())
(3822 rts-sigevents #f #f ())
(3823 really-make-sigevent 3822 7 ())
(3824 rts-sigevents #f #f ())
(3825 rts-sigevents #f #f ())
(3826 sigevent? 3825 7 ())
(3827 rts-sigevents #f #f ())
(3828 make-sigevent 3827 7 ())
(3829 rts-sigevents #f #f ())
(3830 most-recent-sigevent 3829 7 ())
(3831 rts-sigevents #f #f ())
(3832 rts-next-sigevent 3831 7 ())
(3833 #f 3832 10 ())
(3834 lp 3833 15 ())
(3835 rts-sigevents #f #f ())
(3836 rts-next-sigevent/no-wait 3835 7 ())
(3837 rts-sigevents #f #f ())
(3838 register-interrupt 3837 7 ())
(3839 #f 3838 14 ())
(3840 loop##411 3839 47 ())
(3841 rts-sigevents #f #f ())
(3842 waiting-for-sigevent? 3841 7 ())
(3843 rts-sigevents #f #f ())
(3844 with-sigevents 3843 7 ())
(3845 #f 3844 30 ())
(3846 #f 3844 48 ())
(3847 #f 3844 54 ())
(3848 #f 3844 62 ())
(3849 rts-sigevents #f #f ())
(3850 schedule-timer-interrupt! 3849 7 ())
(3851 #f 3850 6 ())
(3852 rts-sigevents #f #f ())
(3853 rts-sigevents #f #f ())
(3854 export-the-record-type #f #f ())
(3855 enum-case #f #f ())
(3856 scheduler #f #f ())
(3857 decrement-counter! 3856 7 ())
(3858 scheduler #f #f ())
(3859 increment-counter! 3858 7 ())
(3860 scheduler #f #f ())
(3861 scheduler #f #f ())
(3862 make-counter 3861 7 ())
(3863 scheduler #f #f ())
(3864 handle-narrow-event 3863 7 ())
(3865 #f 3864 46 ())
(3866 #f 3865 103 ())
(3867 #f 3865 108 ())
(3868 #f 3865 113 ())
(3869 scheduler #f #f ())
(3870 round-robin-event-handler 3869 7 ())
(3871 thread-event-handler 3870 15 ())
(3872 #f 3871 111 ())
(3873 asynchronous-event-handler 3870 24 ())
(3874 next-thread 3870 33 ())
(3875 #f 3874 18 ())
(3876 scheduler #f #f ())
(3877 run-threads-with-housekeeper 3876 7 ())
(3878 #f 3877 6 ())
(3879 loop 3878 29 ())
(3880 #f 3879 6 ())
(3881 #f 3880 57 ())
(3882 scheduler #f #f ())
(3883 run-threads 3882 7 ())
(3884 #f 3883 6 ())
(3885 loop 3884 26 ())
(3886 #f 3885 6 ())
(3887 #f 3886 8 ())
(3888 root-scheduler #f #f ())
(3889 root-scheduler #f #f ())
(3890 spawn-output-forcers 3889 7 ())
(3891 #f 3890 38 ())
(3892 root-scheduler #f #f ())
(3893 call-when-deadlocked! 3892 7 ())
(3894 root-scheduler #f #f ())
(3895 root-scheduler #f #f ())
(3896 do-some-waiting 3895 7 ())
(3897 root-scheduler #f #f ())
(3898 root-scheduler #f #f ())
(3899 root-wait 3898 7 ())
(3900 #f 3899 22 ())
(3901 root-scheduler #f #f ())
(3902 scheme-exit-now 3901 7 ())
(3903 root-scheduler #f #f ())
(3904 root-scheduler #f #f ())
(3905 cheap-display-condition 3904 7 ())
(3906 #f 3905 160 ())
(3907 root-scheduler #f #f ())
(3908 root-handler 3907 7 ())
(3909 root-scheduler #f #f ())
(3910 make-root-event-handler 3909 7 ())
(3911 #f 3910 113 ())
(3912 #f 3910 118 ())
(3913 root-scheduler #f #f ())
(3914 root-scheduler 3913 7 ())
(3915 #f 3914 13 ())
(3916 #f 3915 24 ())
(3917 #f 3915 41 ())
(3918 usual-resumer #f #f ())
(3919 usual-resumer #f #f ())
(3920 initialize-rts 3919 7 ())
(3921 #f 3920 45 ())
(3922 #f 3921 7 ())
(3923 #f 3922 46 ())
(3924 #f 3923 3 ())
(3925 usual-resumer #f #f ())
(3926 usual-resumer 3925 7 ())
(3927 #f 3926 6 ())
(3928 #f 3927 15 ())
(3929 #f 3928 16 ())
(3930 initial-system #f #f ())
(3931 make-tower 3930 7 ())
(3932 initial-system #f #f ())
(3933 make-initial-package 3932 7 ())
(3934 #f 3933 17 ())
(3935 initial-system #f #f ())
(3936 initialize-interaction-environment! 3935 7 ())
(3937 initial-system #f #f ())
(3938 make-built-in-structures 3937 7 ())
(3939 #f 3938 38 ())
(3940 #f 3938 60 ())
(3941 initial-system #f #f ())
(3942 start 3941 7 ())
(3943 #f 3942 6 ())
(3944 #f 3943 6 ())
(3945 #f 3944 64 ())
(3946 usual-macros #f #f ())
(3947 find-free-names-in-syntax-rules 3946 7 ())
(3948 meta-variables 3947 13 ())
(3949 free-names 3947 22 ())
(3950 loop##422 3947 36 ())
(3951 usual-macros #f #f ())
(3952 usual-macros #f #f ())
(3953 segment-tail 3952 7 ())
(3954 loop 3953 21 ())
(3955 usual-macros #f #f ())
(3956 segment-depth 3955 7 ())
(3957 usual-macros #f #f ())
(3958 segment-template? 3957 7 ())
(3959 usual-macros #f #f ())
(3960 segment-pattern? 3959 7 ())
(3961 usual-macros #f #f ())
(3962 process-rules 3961 7 ())
(3963 make-transformer 3962 443 ())
(3964 process-rule 3962 452 ())
(3965 #f 3964 102 ())
(3966 process-match 3962 461 ())
(3967 process-segment-match 3962 470 ())
(3968 process-pattern 3962 479 ())
(3969 #f 3968 97 ())
(3970 process-template 3962 488 ())
(3971 loop##426 3970 293 ())
(3972 meta-variables 3962 497 ())
(3973 free-meta-variables 3962 506 ())
(3974 usual-macros #f #f ())
(3975 #f 3974 11 ())
(3976 usual-macros #f #f ())
(3977 #f 3976 11 ())
(3978 expand-quasiquote 3977 154 ())
(3979 finalize-quasiquote 3977 163 ())
(3980 descend-quasiquote 3977 172 ())
(3981 descend-quasiquote-pair 3977 181 ())
(3982 #f 3981 15 ())
(3983 #f 3982 15 ())
(3984 descend-quasiquote-vector 3977 190 ())
(3985 #f 3984 22 ())
(3986 interesting-to-quasiquote? 3977 199 ())
(3987 usual-macros #f #f ())
(3988 case-clause? 3987 7 ())
(3989 usual-macros #f #f ())
(3990 #f 3989 11 ())
(3991 #f 3990 28 ())
(3992 #f 3990 206 ())
(3993 usual-macros #f #f ())
(3994 #f 3993 11 ())
(3995 usual-macros #f #f ())
(3996 specs? 3995 7 ())
(3997 usual-macros #f #f ())
(3998 #f 3997 11 ())
(3999 usual-macros #f #f ())
(4000 #f 3999 11 ())
(4001 usual-macros #f #f ())
(4002 do-spec? 4001 7 ())
(4003 usual-macros #f #f ())
(4004 #f 4003 11 ())
(4005 #f 4004 228 ())
(4006 usual-macros #f #f ())
(4007 #f 4006 11 ())
(4008 recur 4007 85 ())
(4009 usual-macros #f #f ())
(4010 #f 4009 11 ())
(4011 usual-macros #f #f ())
(4012 usual-transform 4011 7 ())
(4013 usual-macros #f #f ())
(4014 define-usual-macro 4013 7 ())
(4015 usual-macros #f #f ())
(4016 strong #f #f ())
(4017 pop-vertex-edge! 4016 7 ())
(4018 strong #f #f ())
(4019 follow-edge 4018 7 ())
(4020 strong #f #f ())
(4021 unwind-stack 4020 7 ())
(4022 loop 4021 22 ())
(4023 strong #f #f ())
(4024 end-vertex 4023 7 ())
(4025 #f 4024 6 ())
(4026 strong #f #f ())
(4027 get-strong 4026 7 ())
(4028 strong #f #f ())
(4029 do-vertex 4028 7 ())
(4030 strong #f #f ())
(4031 make-vertices 4030 7 ())
(4032 maybe-slot 4031 6 ())
(4033 #f 4031 18 ())
(4034 #f 4031 36 ())
(4035 strong #f #f ())
(4036 make-vertex 4035 7 ())
(4037 strong #f #f ())
(4038 vertex? 4037 7 ())
(4039 strong #f #f ())
(4040 vertex-data 4039 7 ())
(4041 strong #f #f ())
(4042 set-vertex-edges! 4041 7 ())
(4043 strong #f #f ())
(4044 vertex-edges 4043 7 ())
(4045 strong #f #f ())
(4046 set-vertex-stack! 4045 7 ())
(4047 strong #f #f ())
(4048 vertex-stack 4047 7 ())
(4049 strong #f #f ())
(4050 set-vertex-index! 4049 7 ())
(4051 strong #f #f ())
(4052 vertex-index 4051 7 ())
(4053 strong #f #f ())
(4054 set-vertex-parent! 4053 7 ())
(4055 strong #f #f ())
(4056 vertex-parent 4055 7 ())
(4057 strong #f #f ())
(4058 set-vertex-lowpoint! 4057 7 ())
(4059 strong #f #f ())
(4060 vertex-lowpoint 4059 7 ())
(4061 strong #f #f ())
(4062 really-make-vertex 4061 7 ())
(4063 strong #f #f ())
(4064 strong #f #f ())
(4065 find-next-vertex 4064 7 ())
(4066 loop##449 4065 11 ())
(4067 strong #f #f ())
(4068 strongly-connected-components 4067 7 ())
(4069 loop 4068 52 ())
(4070 #f 4069 39 ())
(4071 #f 4069 57 ())
(4072 usages #f #f ())
(4073 insert-aliases 4072 7 ())
(4074 loop 4073 22 ())
(4075 usages #f #f ())
(4076 make-form 4075 7 ())
(4077 usages #f #f ())
(4078 #f 4077 11 ())
(4079 usages #f #f ())
(4080 form? 4079 7 ())
(4081 usages #f #f ())
(4082 form-node 4081 7 ())
(4083 usages #f #f ())
(4084 set-form-aliases! 4083 7 ())
(4085 usages #f #f ())
(4086 form-aliases 4085 7 ())
(4087 usages #f #f ())
(4088 set-form-unaliased?! 4087 7 ())
(4089 usages #f #f ())
(4090 form-unaliased? 4089 7 ())
(4091 usages #f #f ())
(4092 set-form-free! 4091 7 ())
(4093 usages #f #f ())
(4094 form-free 4093 7 ())
(4095 usages #f #f ())
(4096 set-form-temp! 4095 7 ())
(4097 usages #f #f ())
(4098 form-temp 4097 7 ())
(4099 usages #f #f ())
(4100 really-make-form 4099 7 ())
(4101 usages #f #f ())
(4102 usages #f #f ())
(4103 topologically-sort 4102 7 ())
(4104 #f 4103 13 ())
(4105 #f 4104 6 ())
(4106 #f 4104 15 ())
(4107 usages #f #f ())
(4108 maybe-make-aliased 4107 7 ())
(4109 usages #f #f ())
(4110 stuff-count 4109 7 ())
(4111 #f 4110 10 ())
(4112 usages #f #f ())
(4113 sort-forms 4112 7 ())
(4114 #f 4113 39 ())
(4115 #f 4113 71 ())
(4116 usages #f #f ())
(4117 usages #f #f ())
(4118 usages #f #f ())
(4119 usages #f #f ())
(4120 usages #f #f ())
(4121 usages #f #f ())
(4122 usages #f #f ())
(4123 usages #f #f ())
(4124 usages #f #f ())
(4125 usages #f #f ())
(4126 usage-incrementator 4125 7 ())
(4127 #f 4126 6 ())
(4128 usages #f #f ())
(4129 package-usage? 4128 7 ())
(4130 usages #f #f ())
(4131 make-package-usage 4130 7 ())
(4132 usages #f #f ())
(4133 make-usage 4132 7 ())
(4134 usages #f #f ())
(4135 usage? 4134 7 ())
(4136 usages #f #f ())
(4137 usage-name-node 4136 7 ())
(4138 usages #f #f ())
(4139 set-reference! 4138 7 ())
(4140 usages #f #f ())
(4141 usage-reference-count 4140 7 ())
(4142 usages #f #f ())
(4143 set-operator! 4142 7 ())
(4144 usages #f #f ())
(4145 usage-operator-count 4144 7 ())
(4146 usages #f #f ())
(4147 set-assignment! 4146 7 ())
(4148 usages #f #f ())
(4149 usage-assignment-count 4148 7 ())
(4150 usages #f #f ())
(4151 really-make-usage 4150 7 ())
(4152 usages #f #f ())
(4153 usages #f #f ())
(4154 #f 4153 13 ())
(4155 usages #f #f ())
(4156 #f 4155 15 ())
(4157 usages #f #f ())
(4158 #f 4157 15 ())
(4159 usages #f #f ())
(4160 #f 4159 15 ())
(4161 usages #f #f ())
(4162 #f 4161 15 ())
(4163 usages #f #f ())
(4164 #f 4163 15 ())
(4165 usages #f #f ())
(4166 #f 4165 15 ())
(4167 usages #f #f ())
(4168 analyze-letrec 4167 7 ())
(4169 #f 4168 10 ())
(4170 usages #f #f ())
(4171 #f 4170 15 ())
(4172 usages #f #f ())
(4173 #f 4172 15 ())
(4174 #f 4173 37 ())
(4175 usages #f #f ())
(4176 #f 4175 13 ())
(4177 usages #f #f ())
(4178 add-if-free 4177 7 ())
(4179 usages #f #f ())
(4180 #f 4179 13 ())
(4181 usages #f #f ())
(4182 usages #f #f ())
(4183 usages #f #f ())
(4184 usages #f #f ())
(4185 usages #f #f ())
(4186 usages #f #f ())
(4187 nothing 4186 7 ())
(4188 usages #f #f ())
(4189 define-usage-analyzer 4188 7 ())
(4190 usages #f #f ())
(4191 #f 4190 11 ())
(4192 usages #f #f ())
(4193 analyze-nodes 4192 7 ())
(4194 #f 4193 6 ())
(4195 usages #f #f ())
(4196 analyze 4195 7 ())
(4197 usages #f #f ())
(4198 find-node-usages 4197 7 ())
(4199 #f 4198 30 ())
(4200 #f 4198 44 ())
(4201 usages #f #f ())
(4202 maybe-update-known-type 4201 7 ())
(4203 usages #f #f ())
(4204 find-usages 4203 7 ())
(4205 #f 4204 23 ())
(4206 #f 4204 41 ())
(4207 #f 4206 24 ())
(4208 #f 4204 59 ())
(4209 inline #f #f ())
(4210 inline #f #f ())
(4211 inline #f #f ())
(4212 inline #f #f ())
(4213 inline #f #f ())
(4214 inline #f #f ())
(4215 get-qualified-env 4214 7 ())
(4216 inline #f #f ())
(4217 qualified->name 4216 7 ())
(4218 recur 4217 18 ())
(4219 inline #f #f ())
(4220 inline #f #f ())
(4221 inline #f #f ())
(4222 reconstitute-name 4221 7 ())
(4223 inline #f #f ())
(4224 reconstitute 4223 7 ())
(4225 label 4224 18 ())
(4226 inline #f #f ())
(4227 make-substitution 4226 7 ())
(4228 #f 4227 29 ())
(4229 inline #f #f ())
(4230 inline-transform 4229 7 ())
(4231 #f 4230 58 ())
(4232 #f 4230 66 ())
(4233 inline #f #f ())
(4234 remove-bindings 4233 7 ())
(4235 label 4234 18 ())
(4236 inline #f #f ())
(4237 unused-name 4236 7 ())
(4238 loop##476 4237 27 ())
(4239 #f 4238 10 ())
(4240 inline #f #f ())
(4241 clean-lookup 4240 7 ())
(4242 inline #f #f ())
(4243 clean-lambda 4242 7 ())
(4244 #f 4243 37 ())
(4245 recur 4243 87 ())
(4246 inline #f #f ())
(4247 clean-node 4246 7 ())
(4248 #f 4247 128 ())
(4249 #f 4247 288 ())
(4250 inline #f #f ())
(4251 make-inline-transform 4250 7 ())
(4252 #f 4251 41 ())
(4253 #f 4251 80 ())
(4254 loop##477 4253 11 ())
(4255 for-reification #f #f ())
(4256 package-define-static! 4255 7 ())
(4257 for-reification #f #f ())
(4258 transform 4257 7 ())
(4259 for-reification #f #f ())
(4260 package 4259 7 ())
(4261 loop##478 4260 73 ())
(4262 for-reification #f #f ())
(4263 simple-interface 4262 7 ())
(4264 #f 4263 12 ())
(4265 for-reification #f #f ())
(4266 primop 4265 7 ())
(4267 for-reification #f #f ())
(4268 operator 4267 7 ())
(4269 types #f #f ())
(4270 types #f #f ())
(4271 types #f #f ())
(4272 types #f #f ())
(4273 types #f #f ())
(4274 types #f #f ())
(4275 types #f #f ())
(4276 types #f #f ())
(4277 types #f #f ())
(4278 types #f #f ())
(4279 types #f #f ())
(4280 types #f #f ())
(4281 types #f #f ())
(4282 types #f #f ())
(4283 types #f #f ())
(4284 types #f #f ())
(4285 types #f #f ())
(4286 types #f #f ())
(4287 types #f #f ())
(4288 types #f #f ())
(4289 types #f #f ())
(4290 types #f #f ())
(4291 procedure 4290 7 ())
(4292 types #f #f ())
(4293 types #f #f ())
(4294 types #f #f ())
(4295 types #f #f ())
(4296 defpackage #f #f ())
(4297 note-name! 4296 7 ())
(4298 defpackage #f #f ())
(4299 set-verify-later! 4298 7 ())
(4300 defpackage #f #f ())
(4301 verify-later! 4300 7 ())
(4302 defpackage #f #f ())
(4303 *verify-later!* 4302 7 ())
(4304 defpackage #f #f ())
(4305 defpackage #f #f ())
(4306 loser 4305 7 ())
(4307 defpackage #f #f ())
(4308 make-a-package 4307 7 ())
(4309 optimizer #f #f ())
(4310 apply-optimizers 4309 7 ())
(4311 #f 4310 6 ())
(4312 optimizer #f #f ())
(4313 get-optimizer 4312 7 ())
(4314 #f 4313 6 ())
(4315 #f 4314 10 ())
(4316 #f 4315 55 ())
(4317 optimizer #f #f ())
(4318 set-optimizer! 4317 7 ())
(4319 optimizer #f #f ())
(4320 scan-package #f #f ())
(4321 check-structure 4320 7 ())
(4322 #f 4321 17 ())
(4323 scan-package #f #f ())
(4324 package-optimizer-names 4323 7 ())
(4325 #f 4324 36 ())
(4326 #f 4324 75 ())
(4327 scan-package #f #f ())
(4328 read-files 4327 7 ())
(4329 #f 4328 30 ())
(4330 scan-package #f #f ())
(4331 package-source 4330 7 ())
(4332 #f 4331 46 ())
(4333 scan-package #f #f ())
(4334 collect-packages 4333 7 ())
(4335 recur 4334 26 ())
(4336 #f 4335 150 ())
(4337 compile-packages #f #f ())
(4338 compile-packages #f #f ())
(4339 compile-packages #f #f ())
(4340 make-define-primitive-node 4339 7 ())
(4341 compile-packages #f #f ())
(4342 define-primitives 4341 7 ())
(4343 #f 4342 17 ())
(4344 #f 4342 36 ())
(4345 compile-packages #f #f ())
(4346 define-usual-transform 4345 7 ())
(4347 compile-packages #f #f ())
(4348 expand-package 4347 7 ())
(4349 #f 4348 21 ())
(4350 #f 4349 10 ())
(4351 #f 4349 28 ())
(4352 #f 4349 82 ())
(4353 #f 4352 15 ())
(4354 #f 4353 10 ())
(4355 compile-packages #f #f ())
(4356 compile-package 4355 7 ())
(4357 module-system #f #f ())
(4358 analysis #f #f ())
(4359 analysis #f #f ())
(4360 analysis #f #f ())
(4361 analysis #f #f ())
(4362 analysis #f #f ())
(4363 analysis #f #f ())
(4364 package-lookup-type 4363 7 ())
(4365 analysis #f #f ())
(4366 analysis #f #f ())
(4367 require 4366 7 ())
(4368 analysis #f #f ())
(4369 simple-literal? 4368 7 ())
(4370 analysis #f #f ())
(4371 analysis #f #f ())
(4372 analysis #f #f ())
(4373 primitive-proc? 4372 7 ())
(4374 analysis #f #f ())
(4375 really-simple-call? 4374 7 ())
(4376 analysis #f #f ())
(4377 static-value 4376 7 ())
(4378 analysis #f #f ())
(4379 #f 4378 11 ())
(4380 analysis #f #f ())
(4381 #f 4380 11 ())
(4382 loop 4381 21 ())
(4383 analysis #f #f ())
(4384 #f 4383 11 ())
(4385 analysis #f #f ())
(4386 #f 4385 11 ())
(4387 analysis #f #f ())
(4388 #f 4387 11 ())
(4389 analysis #f #f ())
(4390 #f 4389 11 ())
(4391 analysis #f #f ())
(4392 #f 4391 11 ())
(4393 analysis #f #f ())
(4394 #f 4393 11 ())
(4395 analysis #f #f ())
(4396 #f 4395 11 ())
(4397 analysis #f #f ())
(4398 #f 4397 11 ())
(4399 analysis #f #f ())
(4400 #f 4399 11 ())
(4401 analysis #f #f ())
(4402 #f 4401 11 ())
(4403 analysis #f #f ())
(4404 define-analyzer 4403 7 ())
(4405 analysis #f #f ())
(4406 #f 4405 11 ())
(4407 analysis #f #f ())
(4408 simple-list? 4407 7 ())
(4409 analysis #f #f ())
(4410 simple? 4409 7 ())
(4411 analysis #f #f ())
(4412 analysis #f #f ())
(4413 simple-lambda? 4412 7 ())
(4414 #f 4413 123 ())
(4415 analysis #f #f ())
(4416 inlinable-rhs? 4415 7 ())
(4417 analysis #f #f ())
(4418 analyze-form 4417 7 ())
(4419 analysis #f #f ())
(4420 analyze-forms 4419 7 ())
(4421 #f 4420 17 ())
(4422 analysis #f #f ())
(4423 #f 4422 11 ())
(4424 flat-environments #f #f ())
(4425 set-difference 4424 7 ())
(4426 recur 4425 18 ())
(4427 flat-environments #f #f ())
(4428 union 4427 7 ())
(4429 recur 4428 31 ())
(4430 flat-environments #f #f ())
(4431 cell-set!-primop 4430 7 ())
(4432 flat-environments #f #f ())
(4433 flat-environments #f #f ())
(4434 cell-ref-primop 4433 7 ())
(4435 flat-environments #f #f ())
(4436 flat-environments #f #f ())
(4437 make-cell-primop 4436 7 ())
(4438 flat-environments #f #f ())
(4439 flat-environments #f #f ())
(4440 flat-environments #f #f ())
(4441 flat-environments #f #f ())
(4442 flat-environments #f #f ())
(4443 flat-environments #f #f ())
(4444 flat-environments #f #f ())
(4445 flat-environments #f #f ())
(4446 flat-environments #f #f ())
(4447 flat-environments #f #f ())
(4448 flat-environments #f #f ())
(4449 make-primop-call 4448 7 ())
(4450 flat-environments #f #f ())
(4451 make-cell-set! 4450 7 ())
(4452 flat-environments #f #f ())
(4453 make-cell-ref 4452 7 ())
(4454 flat-environments #f #f ())
(4455 make-unassigned-cell 4454 7 ())
(4456 flat-environments #f #f ())
(4457 make-make-cell 4456 7 ())
(4458 flat-environments #f #f ())
(4459 #f 4458 11 ())
(4460 #f 4459 25 ())
(4461 flat-environments #f #f ())
(4462 #f 4461 11 ())
(4463 flat-environments #f #f ())
(4464 #f 4463 11 ())
(4465 flat-environments #f #f ())
(4466 #f 4465 11 ())
(4467 flat-environments #f #f ())
(4468 #f 4467 11 ())
(4469 flat-environments #f #f ())
(4470 flat-environments #f #f ())
(4471 flat-environments #f #f ())
(4472 flat-environments #f #f ())
(4473 flat-environments #f #f ())
(4474 flat-environments #f #f ())
(4475 no-sets 4474 7 ())
(4476 flat-environments #f #f ())
(4477 define-set-marker 4476 7 ())
(4478 flat-environments #f #f ())
(4479 #f 4478 11 ())
(4480 flat-environments #f #f ())
(4481 mark-set-variables! 4480 7 ())
(4482 flat-environments #f #f ())
(4483 assigned? 4482 7 ())
(4484 flat-environments #f #f ())
(4485 #f 4484 11 ())
(4486 flat-environments #f #f ())
(4487 #f 4486 11 ())
(4488 #f 4487 77 ())
(4489 #f 4487 91 ())
(4490 #f 4489 119 ())
(4491 flat-environments #f #f ())
(4492 #f 4491 11 ())
(4493 #f 4492 21 ())
(4494 flat-environments #f #f ())
(4495 #f 4494 11 ())
(4496 #f 4495 21 ())
(4497 #f 4496 6 ())
(4498 flat-environments #f #f ())
(4499 #f 4498 11 ())
(4500 #f 4499 33 ())
(4501 flat-environments #f #f ())
(4502 #f 4501 11 ())
(4503 flat-environments #f #f ())
(4504 add-cells 4503 7 ())
(4505 loop##491 4504 11 ())
(4506 flat-environments #f #f ())
(4507 convert-lambda-body 4506 7 ())
(4508 #f 4507 43 ())
(4509 flat-environments #f #f ())
(4510 flatten-lambda 4509 7 ())
(4511 #f 4510 21 ())
(4512 flat-environments #f #f ())
(4513 #f 4512 11 ())
(4514 flat-environments #f #f ())
(4515 flat-environments #f #f ())
(4516 flat-environments #f #f ())
(4517 flat-environments #f #f ())
(4518 flat-environments #f #f ())
(4519 no-free-vars 4518 7 ())
(4520 flat-environments #f #f ())
(4521 flatten-list 4520 7 ())
(4522 loop 4521 26 ())
(4523 #f 4522 39 ())
(4524 flat-environments #f #f ())
(4525 define-flattener 4524 7 ())
(4526 flat-environments #f #f ())
(4527 #f 4526 11 ())
(4528 #f 4527 6 ())
(4529 flat-environments #f #f ())
(4530 flatten-node 4529 7 ())
(4531 flat-environments #f #f ())
(4532 flatten-form 4531 7 ())
(4533 #f 4532 69 ())
(4534 #f 4532 115 ())
(4535 flat-environments #f #f ())
(4536 #f 4535 11 ())
(4537 #f 4536 6 ())
(4538 ensures-loaded #f #f ())
(4539 ensure-loaded 4538 7 ())
(4540 #f 4539 49 ())
(4541 #f 4540 56 ())
(4542 #f 4539 61 ())
(4543 #f #f #f ())
(4544 #f 4543 3 ())
(4545 get-location 4544 3 ())
(4546 #f 4544 11270 ())
(4547 #f 4544 11319 ())
(4548 #f 4544 11432 ())
(4549 #f 4544 11550 ())
(4550 #f 4544 11631 ())
(4551 conc 4550 37 ())
(4552 #f 4551 16 ())
(4553 #f 4544 12941 ())
(4554 loop 4553 115 ())
(4555 #f 4553 202 ())
(4556 #f 4553 233 ())
(4557 #f 4553 413 ())
(4558 #f 4553 471 ())
(4559 #f 4544 13329 ())
(4560 mem? 4559 217 ())
(4561 every? 4559 226 ())
(4562 #f 4559 239 ())
(4563 #f 4559 302 ())
(4564 #f 4544 13525 ())
(4565 loop##496 4564 58 ())
(4566 #f 4544 13574 ())
(4567 #f 4544 18563 ())
(4568 #f 4544 26797 ())
(4569 #f 4568 456 ())
(4570 #f 4544 27355 ())
(4571 #f 4544 27404 ())
(4572 #f 4544 27453 ())
(4573 #f 4544 27974 ())
(4574 loop 4573 90 ())
(4575 #f 4544 28131 ())
(4576 loop 4575 90 ())
(4577 #f 4544 28256 ())
(4578 loop 4577 90 ())
(4579 #f 4544 28349 ())
(4580 loop 4579 90 ())
(4581 #f 4544 28442 ())
(4582 loop 4581 90 ())
(4583 #f 4544 28535 ())
(4584 loop 4583 90 ())
(4585 #f 4544 28628 ())
(4586 loop 4585 90 ())
(4587 #f 4544 28721 ())
(4588 loop 4587 90 ())
(4589 #f 4544 28814 ())
(4590 loop 4589 90 ())
(4591 #f 4544 29510 ())
(4592 loop 4591 90 ())
(4593 #f 4544 32943 ())
(4594 #f 4544 33106 ())
(4595 #f 4544 33155 ())
(4596 #f 4544 33204 ())
(4597 #f 4544 33349 ())
(4598 #f 4544 33567 ())
(4599 #f 4544 37852 ())
(4600 #f 4544 38015 ())
(4601 #f 4544 38215 ())
(4602 #f 4544 38264 ())
(4603 #f 4544 38313 ())
(4604 #f 4603 146 ())
(4605 #f 4544 38362 ())
(4606 #f 4605 329 ())
(4607 #f 4605 403 ())
(4608 #f 4544 38700 ())
(4609 #f 4544 38749 ())
(4610 #f 4609 176 ())
(4611 parse-package-clauses 4544 38807 ())
(4612 loop 4611 76 ())
(4613 #f 4544 38816 ())
(4614 #f 4613 27 ())
(4615 #f 4614 146 ())
(4616 #f 4544 39072 ())
(4617 #f 4544 39153 ())
(4618 #f 4544 39202 ())
(4619 loop 4618 35 ())
(4620 #f 4544 39315 ())
(4621 #f 4544 39396 ())
(4622 #f 4544 39477 ())
(4623 #f 4544 39558 ())
(4624 loop 4623 51 ())
(4625 #f 4623 90 ())
(4626 #f 4623 114 ())
(4627 #f 4544 39639 ())
(4628 #f 4544 40896 ())
(4629 #f 4544 41032 ())
(4630 #f #f #f ())
-
