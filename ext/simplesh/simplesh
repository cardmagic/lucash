#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.5
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Simplesh < Racc::Parser

module_eval(<<'...end simplesh.y/module_eval...', 'simplesh.y', 63)
  
	def parse(str)
	  @q = []
	  until str.empty?
	    case str
	    when /\A\s(\.\.*)/
          @q.push [:IDENT, $1]
	    when /\A[ \t\r]+/
		when /\A(if|else|end)/i
		  @q.push [$&, $&]
		when /\A\n/
		  @q.push ['\n', '\n']
	    when /\A&&/
		  @q.push [$&, $&]
	    when /\A\-?\d+\.\d+/
	      @q.push [:NUMBER, $&.to_f]
	    when /\A\-?[\d]+/
	      @q.push [:NUMBER, $&.to_i]
	    when /\A\:([\w\-]+)/
	      @q.push [:IDENT, $1.intern]
	    when /\A[\w\-][\w\-\=]*/
          @q.push [:IDENT, $&]
        when /\A\/([^\/]+)\//
          @q.push [:IDENT, Regexp.new($1)]
	    when /\A.|\n/o
	      s = $&
	      @q.push [s, s]
	    end
	    str = $'
	  end
	  @q.push [false, '$end']
	  puts @q.inspect if ENV['DEBUG']
	  do_parse
	end

	def next_token
	  @q.shift
	end
	
...end simplesh.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    -2,    25,    37,    25,    11,    18,    11,     2,   -33,     2,
    25,     1,    54,     3,    -2,    -2,     2,    18,     7,    25,
    26,    11,    11,    25,     2,     2,    28,    29,    30,    28,
    29,    30,    28,    29,    30,    25,     1,     1,     3,     3,
    27,     2,    31,     7,     7,    31,    11,    11,    31,     2,
     2,    19,     1,    18,     3,    16,    21,    22,    23,     7,
    25,     1,    11,     3,    20,     2,     2,    18,     7,   -34,
    25,    11,    32,     1,     2,     3,     2,     1,    18,     3,
     7,    60,    25,    11,     7,    11,     2,    11,     2,    35,
     2,     1,    13,     3,    18,     1,    18,     3,     7,   nil,
    25,    11,    39,    11,     2,    11,     2,     1,     2,     3,
   nil,    21,    22,   nil,     7,    61,     1,    11,     3,   nil,
     2,   nil,    18,     7,    25,    26,    11,    52,    53,     2,
    21,    22,    21,    22,    50,    51 ]

racc_action_check = [
     5,    22,    16,    21,    22,    40,    21,    22,    39,    21,
    28,     5,    39,     5,     5,     5,    28,     5,     5,    39,
    39,     5,    39,    25,     5,    39,    42,    42,    42,    43,
    43,    43,     9,     9,     9,    31,    51,    53,    51,    53,
     8,    31,    42,    51,    53,    43,    51,    53,     9,    51,
    53,     6,     0,    38,     0,     4,     6,     6,     6,     0,
    30,    11,     0,    11,     6,     0,    30,    34,    11,    56,
    29,    11,    11,    27,    11,    27,    29,     3,    57,     3,
    27,    58,    26,    27,     3,    26,    27,     3,    26,    14,
     3,     1,     1,     1,    14,    18,    45,    18,     1,   nil,
    54,     1,    18,    54,     1,    18,    54,    20,    18,    20,
   nil,    59,    59,   nil,    20,    59,    15,    20,    15,   nil,
    20,   nil,    15,    15,     7,     7,    15,    36,    36,    15,
    55,    55,    44,    44,    33,    33 ]

racc_action_pointer = [
    41,    80,   nil,    66,    55,     0,    48,   106,    33,    28,
   nil,    50,   nil,   nil,    77,   105,     2,   nil,    84,   nil,
    96,   -15,   -17,   nil,   nil,     5,    64,    62,    -8,    52,
    42,    17,   nil,   112,    50,   nil,   113,   nil,    36,     1,
   -12,   nil,    22,    25,   124,    79,   nil,   nil,   nil,   nil,
   nil,    25,   nil,    26,    82,   122,    62,    61,    67,   103,
   nil,   nil ]

racc_action_default = [
   -30,   -30,   -31,   -30,   -35,   -30,   -35,   -33,   -32,   -19,
   -27,   -30,   -24,    -6,   -35,   -30,   -35,    -1,   -30,    -3,
   -30,   -30,   -30,    -4,   -34,   -33,   -30,   -30,   -30,   -30,
   -30,   -30,   -26,   -35,   -28,    -5,   -35,    62,   -11,   -13,
    -9,   -32,   -17,   -18,   -16,   -10,   -20,   -21,   -22,   -23,
   -25,   -30,    -7,   -30,   -30,   -14,   -32,   -29,   -35,   -35,
    -8,   -15 ]

racc_goto_table = [
     4,    14,    33,    15,    44,    17,   nil,    24,    42,    43,
   nil,    34,   nil,   nil,   nil,    36,   nil,    55,    38,   nil,
    40,    41,    41,   nil,   nil,    24,    41,    45,    41,    41,
    41,    41,    59,    46,    47,    48,    49,   nil,   nil,    56,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    57,   nil,    58,    41 ]

racc_goto_check = [
     1,     2,     8,     2,     3,     1,   nil,     4,     5,     5,
   nil,     2,   nil,   nil,   nil,     1,   nil,     3,     2,   nil,
     2,     4,     4,   nil,   nil,     4,     4,     2,     4,     4,
     4,     4,     3,     6,     6,     6,     6,   nil,   nil,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,     1,     4 ]

racc_goto_pointer = [
   nil,     0,     0,   -22,     0,   -13,     5,   nil,    -9 ]

racc_goto_default = [
   nil,   nil,     5,     6,     8,     9,    10,    12,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 26, :_reduce_none,
  1, 26, :_reduce_none,
  2, 27, :_reduce_3,
  2, 27, :_reduce_4,
  3, 27, :_reduce_5,
  2, 27, :_reduce_6,
  4, 27, :_reduce_7,
  6, 27, :_reduce_8,
  3, 27, :_reduce_9,
  3, 27, :_reduce_10,
  3, 27, :_reduce_11,
  3, 27, :_reduce_12,
  3, 27, :_reduce_13,
  4, 27, :_reduce_14,
  6, 27, :_reduce_15,
  3, 27, :_reduce_16,
  3, 28, :_reduce_17,
  3, 28, :_reduce_18,
  1, 28, :_reduce_19,
  3, 30, :_reduce_20,
  3, 30, :_reduce_21,
  3, 30, :_reduce_22,
  3, 30, :_reduce_23,
  1, 30, :_reduce_24,
  3, 32, :_reduce_25,
  2, 32, :_reduce_26,
  1, 32, :_reduce_27,
  1, 33, :_reduce_28,
  3, 33, :_reduce_29,
  0, 31, :_reduce_none,
  1, 31, :_reduce_31,
  1, 31, :_reduce_32,
  1, 29, :_reduce_33,
  2, 29, :_reduce_34 ]

racc_reduce_n = 35

racc_shift_n = 62

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  ";" => 3,
  "*" => 4,
  "/" => 5,
  "%" => 6,
  "|" => 7,
  "+" => 8,
  "-" => 9,
  "\\n" => 10,
  "(" => 11,
  ")" => 12,
  "if" => 13,
  "end" => 14,
  "else" => 15,
  "&&" => 16,
  "." => 17,
  :IDENT => 18,
  "=" => 19,
  "&" => 20,
  "[" => 21,
  "]" => 22,
  "," => 23,
  :NUMBER => 24 }

racc_nt_base = 25

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\";\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"|\"",
  "\"+\"",
  "\"-\"",
  "\"\\\\n\"",
  "\"(\"",
  "\")\"",
  "\"if\"",
  "\"end\"",
  "\"else\"",
  "\"&&\"",
  "\".\"",
  "IDENT",
  "\"=\"",
  "\"&\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "NUMBER",
  "$start",
  "program",
  "line",
  "expr",
  "command",
  "mulex",
  "term",
  "array",
  "basic_result" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

module_eval(<<'.,.,', 'simplesh.y', 16)
  def _reduce_3(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 17)
  def _reduce_4(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 18)
  def _reduce_5(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 19)
  def _reduce_6(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 20)
  def _reduce_7(val, _values)
     if val[1]; val[2]; end 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 21)
  def _reduce_8(val, _values)
     if val[1]; val[2]; else; val[4]; end 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 22)
  def _reduce_9(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 23)
  def _reduce_10(val, _values)
     do_command("#{val[0]} #{val[2]}") 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 24)
  def _reduce_11(val, _values)
     val[0].send(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 25)
  def _reduce_12(val, _values)
     val[0].send(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 26)
  def _reduce_13(val, _values)
     val[0].send(val[2]) 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 27)
  def _reduce_14(val, _values)
     val[0].send(val[2], *val[3]) 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 28)
  def _reduce_15(val, _values)
     val[0].send(val[2], *val[4]) 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 29)
  def _reduce_16(val, _values)
     $vals[val[0]] = val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 31)
  def _reduce_17(val, _values)
     val[0] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 32)
  def _reduce_18(val, _values)
     val[0] - val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 33)
  def _reduce_19(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 35)
  def _reduce_20(val, _values)
     val[0] * val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 36)
  def _reduce_21(val, _values)
     val[0] / val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 37)
  def _reduce_22(val, _values)
     val[0] % val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 38)
  def _reduce_23(val, _values)
     val[0] & val[2] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 39)
  def _reduce_24(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 41)
  def _reduce_25(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 42)
  def _reduce_26(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 43)
  def _reduce_27(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 45)
  def _reduce_28(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 46)
  def _reduce_29(val, _values)
     val[0] + [val[2]] 
  end
.,.,

# reduce 30 omitted

module_eval(<<'.,.,', 'simplesh.y', 48)
  def _reduce_31(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 50)
  def _reduce_32(val, _values)
    			if $vals[val[0]]
				return $vals[val[0]]
			else
				do_command(val[0])
			end
		
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 57)
  def _reduce_33(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 58)
  def _reduce_34(val, _values)
     "#{val[0]} #{val[1]}" 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Simplesh


require 'rubygems'
gem 'open4'
require 'open4'

$vals = {}

def do_command(command)
	case command
	when "true", "false"
		return command == "true"
	when /^cd (.*)$/
		return Dir.chdir($1)
	end

	r = []
	er_t = nil
	in_t = nil
	o_t = nil
	p = Open4::popen4(command) do |pid, stdin, stdout, stderr|
		er_t = Thread.new do
			loop do
				$stderr.print stderr.read(stderr.stat.size)
				$stderr.flush
			end
		end

		in_t = Thread.new do
			loop do
				data = gets
				stdin.write(data)
			end
		end
	
		o_t = Thread.new do
			loop do
				r << stdout.read(stdout.stat.size)
			end
		end
	end
	er_t.kill
	in_t.kill
	o_t.kill
	r.join("")
rescue Errno::ENOENT, TypeError
	command
end

parser = Simplesh.new
puts
puts 'type "Q" to quit.'
puts
while true
  puts
  print '? '
  if str = gets
    break if /q/i =~ str
    begin
      puts parser.parse(str)
    rescue ParseError
      puts $!
    end
  else
    exit
  end
end
