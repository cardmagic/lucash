#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.5
# from Racc grammer file "".
#

require 'racc/parser.rb'
class Simplesh < Racc::Parser

module_eval(<<'...end simplesh.y/module_eval...', 'simplesh.y', 58)
  
	def parse(str)
	  @q = []
	  until str.empty?
	    case str
	    when /\A\s(\.\.*)/
          @q.push [:IDENT, $1]
	    when /\A[ \t\r]+/
		  when /\A(if|else|end)/i
		    @q.push [$&, $&]
		  when /\A\n/
		    @q.push ['\n', '\n']
	    when /\A&&/
		    @q.push [$&, $&]
	    when /\A<-/
		    @q.push [$&, $&]
	    when /\A\-?\d+\.\d+/
	      @q.push [:NUMBER, $&.to_f]
	    when /\A\-?[\d]+/
	      @q.push [:NUMBER, $&.to_i]
	    when /\A\:([\w\-]+)/
	      @q.push [:IDENT, $1.intern]
	    when /\A[\w\-][\w\-\=]*/
        @q.push [:IDENT, $&]
      when /\A\/([^\/]+)\//
        @q.push [:IDENT, Regexp.new($1)]
	    when /\A.|\n/o
	      s = $&
	      @q.push [s, s]
	    end
	    str = $'
	  end
	  @q.push [false, '$end']
	  puts @q.inspect if ENV['DEBUG']
	  do_parse
	end

	def next_token
	  @q.shift
	end
	
...end simplesh.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   -34,   -34,   -34,   -34,   -34,   -34,    21,    34,    38,    59,
   -35,    23,    23,     4,   -34,    20,    34,    35,    32,     2,
    12,   -35,     4,     3,    23,     5,    21,    34,    39,    12,
     9,    42,     3,     2,     5,    20,     4,    19,    23,     9,
    21,    12,     2,    21,     3,     4,     5,    36,    23,    20,
    12,     9,    20,     3,     2,     5,    64,     4,    34,    23,
     9,    21,    12,     2,     4,     3,     4,     5,    40,    55,
    20,    23,     9,    23,    12,     2,    14,     3,     4,     5,
    34,    35,    32,    12,     9,    34,     3,     2,     5,    34,
     4,     4,     2,     9,   nil,     4,     2,   nil,    21,     4,
    25,    26,    27,    28,    34,    30,    31,    20,   nil,    24,
     4,    57,    58,    34,     3,    29,     5,   nil,     3,     4,
     5,     9,   nil,   nil,     2,     9,   nil,     4,     2,   nil,
     3,     4,     5,   nil,     3,   nil,     5,     9,   nil,   nil,
     2,     9,   nil,     4,     2,   nil,     3,     4,     5,   nil,
     3,   nil,     5,    44,   nil,   nil,     2,     9,   nil,     4,
     2,   nil,   nil,     4,     3,    16,     5,   nil,    26,    27,
    28,     9,    30,    31,     2,   nil,   nil,     4,    65,    26,
    27,    28,   nil,    30,    31 ]

racc_action_check = [
    44,    44,    44,    44,    44,    44,    15,    27,    13,    44,
    61,    53,    54,    27,    44,    15,    44,    44,    44,    44,
     0,    61,    44,     0,    52,     0,    22,    34,    15,    18,
     0,    19,    18,     0,    18,    22,     0,     6,    18,    18,
     6,    39,    18,    62,    39,    18,    39,    10,    43,     6,
     7,    39,    62,     7,    39,     7,    62,    39,    26,     7,
     7,    37,     2,     7,    26,     2,     7,     2,    17,    37,
    37,    49,     2,    17,    12,     2,     2,    12,     2,    12,
     9,     9,     9,    58,    12,    28,    58,    12,    58,    59,
    12,    28,    59,    58,   nil,    59,    58,   nil,    41,    58,
     8,     8,     8,     8,    31,     8,     8,    41,   nil,     8,
    31,    41,    41,    30,     5,     8,     5,   nil,    32,    30,
    32,     5,   nil,   nil,     5,    32,   nil,     5,    32,   nil,
    29,    32,    29,   nil,    35,   nil,    35,    29,   nil,   nil,
    29,    35,   nil,    29,    35,   nil,    23,    35,    23,   nil,
    36,   nil,    36,    23,   nil,   nil,    23,    36,   nil,    23,
    36,   nil,   nil,    36,     3,     3,     3,   nil,    63,    63,
    63,     3,    63,    63,     3,   nil,   nil,     3,    63,    60,
    60,    60,   nil,    60,    60 ]

racc_action_pointer = [
    10,   nil,    52,   151,   nil,   101,    37,    40,    97,    60,
    40,   nil,    64,   -16,   nil,     3,   nil,    54,    19,    31,
   nil,   nil,    23,   133,   nil,   nil,    38,   -13,    65,   117,
    93,    84,   105,   nil,     7,   121,   137,    58,   nil,    31,
   nil,    95,   nil,    29,    -4,   nil,   nil,   nil,   nil,    52,
   nil,   nil,     5,    -8,    -7,   nil,   nil,   nil,    73,    69,
   175,     3,    40,   164,   nil,   nil ]

racc_action_default = [
   -36,   -26,   -36,   -36,   -32,   -36,   -36,    -3,    -6,   -34,
   -33,   -29,   -36,   -36,   -28,   -30,   -10,   -36,   -36,   -36,
    -4,    -5,    -1,   -36,    -8,    -7,   -36,   -36,   -36,   -36,
   -36,   -36,   -36,   -35,   -34,   -36,   -36,   -36,   -27,   -36,
    -9,   -36,    66,   -15,   -16,   -33,   -23,   -24,   -25,   -13,
   -21,   -22,   -20,   -19,   -14,    -2,   -31,   -11,   -36,   -36,
   -17,   -33,   -36,   -36,   -12,   -18 ]

racc_goto_table = [
     6,    13,    33,   nil,    46,    47,    48,    22,    50,    51,
    60,   nil,    37,    17,   nil,    18,   nil,   nil,    41,    45,
    45,    45,   nil,    45,    45,    63,   nil,    33,   nil,   nil,
   nil,   nil,   nil,    43,   nil,   nil,   nil,    61,    56,    49,
   nil,   nil,    52,   nil,   nil,    53,    54,   nil,   nil,   nil,
   nil,   nil,    45,   nil,   nil,   nil,   nil,   nil,    62 ]

racc_goto_check = [
     1,     7,     4,   nil,     5,     5,     5,     1,     5,     5,
     3,   nil,     1,     2,   nil,     2,   nil,   nil,     1,     4,
     4,     4,   nil,     4,     4,     3,   nil,     4,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,     4,     7,     2,
   nil,   nil,     2,   nil,   nil,     2,     2,   nil,   nil,   nil,
   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,    10,   -34,    -7,   -22,   nil,    -1 ]

racc_goto_default = [
   nil,    15,     7,     8,    10,    11,     1,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 28, :_reduce_1,
  3, 28, :_reduce_2,
  1, 28, :_reduce_3,
  2, 28, :_reduce_4,
  2, 28, :_reduce_5,
  1, 29, :_reduce_6,
  2, 29, :_reduce_7,
  2, 29, :_reduce_8,
  3, 29, :_reduce_9,
  2, 29, :_reduce_10,
  4, 29, :_reduce_11,
  6, 29, :_reduce_12,
  3, 29, :_reduce_13,
  3, 29, :_reduce_14,
  3, 29, :_reduce_15,
  3, 29, :_reduce_16,
  4, 29, :_reduce_17,
  6, 29, :_reduce_18,
  3, 29, :_reduce_19,
  3, 29, :_reduce_20,
  3, 30, :_reduce_21,
  3, 30, :_reduce_22,
  3, 30, :_reduce_23,
  3, 30, :_reduce_24,
  3, 30, :_reduce_25,
  1, 30, :_reduce_26,
  3, 33, :_reduce_27,
  2, 33, :_reduce_28,
  1, 33, :_reduce_29,
  1, 34, :_reduce_30,
  3, 34, :_reduce_31,
  1, 32, :_reduce_32,
  1, 32, :_reduce_33,
  1, 31, :_reduce_34,
  2, 31, :_reduce_35 ]

racc_reduce_n = 36

racc_shift_n = 66

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  ";" => 3,
  "*" => 4,
  "/" => 5,
  "%" => 6,
  "|" => 7,
  "+" => 8,
  "-" => 9,
  "{" => 10,
  "}" => 11,
  "\\n" => 12,
  "(" => 13,
  ")" => 14,
  "if" => 15,
  "end" => 16,
  "else" => 17,
  "&&" => 18,
  "." => 19,
  :IDENT => 20,
  "=" => 21,
  "<-" => 22,
  "[" => 23,
  "]" => 24,
  "," => 25,
  :NUMBER => 26 }

racc_nt_base = 27

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\";\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"|\"",
  "\"+\"",
  "\"-\"",
  "\"{\"",
  "\"}\"",
  "\"\\\\n\"",
  "\"(\"",
  "\")\"",
  "\"if\"",
  "\"end\"",
  "\"else\"",
  "\"&&\"",
  "\".\"",
  "IDENT",
  "\"=\"",
  "\"<-\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "NUMBER",
  "$start",
  "program",
  "line",
  "expr",
  "command",
  "atom",
  "array",
  "basic_result" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'simplesh.y', 13)
  def _reduce_1(val, _values)
     [:program, [val[0], *val[1][1]]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 14)
  def _reduce_2(val, _values)
     [:block, val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 15)
  def _reduce_3(val, _values)
     [:program, [val[0]]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 16)
  def _reduce_4(val, _values)
     [:program, [val[0]]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 17)
  def _reduce_5(val, _values)
     [:program, [val[0]]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 19)
  def _reduce_6(val, _values)
     [:line, val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 20)
  def _reduce_7(val, _values)
     [:line, val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 21)
  def _reduce_8(val, _values)
     [:line, val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 22)
  def _reduce_9(val, _values)
     [:line, val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 23)
  def _reduce_10(val, _values)
     [:empty_parens] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 24)
  def _reduce_11(val, _values)
     [:if, val[1], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 25)
  def _reduce_12(val, _values)
     [:if_else, val[1], val[2], val[4]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 26)
  def _reduce_13(val, _values)
     [:and, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 27)
  def _reduce_14(val, _values)
     [:pipe, [:line, val[0]], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 28)
  def _reduce_15(val, _values)
     [:method, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 29)
  def _reduce_16(val, _values)
     [:method, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 30)
  def _reduce_17(val, _values)
     [:method_with_args, val[0], val[2], val[3]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 31)
  def _reduce_18(val, _values)
     [:method_with_args, val[0], val[2], val[4]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 32)
  def _reduce_19(val, _values)
     [:assignment, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 33)
  def _reduce_20(val, _values)
     [:functional_assignment, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 35)
  def _reduce_21(val, _values)
     [:add, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 36)
  def _reduce_22(val, _values)
     [:subtract, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 37)
  def _reduce_23(val, _values)
     [:multiply, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 38)
  def _reduce_24(val, _values)
     [:divide, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 39)
  def _reduce_25(val, _values)
     [:mod, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 40)
  def _reduce_26(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 42)
  def _reduce_27(val, _values)
     [:array, val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 43)
  def _reduce_28(val, _values)
     [:empty_array] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 44)
  def _reduce_29(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 46)
  def _reduce_30(val, _values)
     [:splat, [val[0]]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 47)
  def _reduce_31(val, _values)
     [:splat, [val[0], *val[2][1]]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 49)
  def _reduce_32(val, _values)
     [:number, val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 50)
  def _reduce_33(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 52)
  def _reduce_34(val, _values)
     [:value, [val[0]]] 
  end
.,.,

module_eval(<<'.,.,', 'simplesh.y', 53)
  def _reduce_35(val, _values)
     [:value, [val[0], *val[1][1]]] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class Simplesh


require 'rubygems'
gem 'open4'
require 'open4'
require 'pp'

$vals = {}

def simplesh_eval(ast)
  case ast[0]
  when :program
    ast[1].map {|stmt| simplesh_eval(stmt)}.last
  when :line
    simplesh_eval(ast[1])
  when :and
    if simplesh_eval(ast[1])
      simplesh_eval(ast[2])
    end
  when :if
    if simplesh_eval(ast[1])
      simplesh_eval(ast[2])
    end
  when :if_else
    if simplesh_eval(ast[1])
      simplesh_eval(ast[2])
    else
      simplesh_eval(ast[3])
    end
  when :for
    for i in (simplesh_eval(ast.from)..simplesh_eval(ast.to))
      $vals[ast.ident.lexeme] = i
      simplesh_eval(ast.statements)
    end
  when :assignment
    $vals[ast[1]] = simplesh_eval(ast[2])
  when :functional_assignment
    $vals[ast[1]] = ast[2]
  when :add
    simplesh_eval(ast[1]) + simplesh_eval(ast[2])
  when :block
    simplesh_eval(ast[1])
  when :subtract
    simplesh_eval(ast[1]) - simplesh_eval(ast[2])
  when :multiply
    simplesh_eval(ast[1]) * simplesh_eval(ast[2])
  when :divide
    simplesh_eval(ast[1]) / simplesh_eval(ast[2])
  when :mod
    simplesh_eval(ast[1]) % simplesh_eval(ast[2])
  when :array
    simplesh_eval(ast[1])
  when :splat
    ast[1].map{|a| simplesh_eval(a)}
  when :string
    ast[1]
  when :value
    case ast[1][0]
    when "false"
      false
    when "true"
      true
    else
      ast[1]
    end
  when :number
    puts "*********"
    ast[1]
  end
end

def do_command(command)
	case command
	when "true", "false"
		return command == "true"
	when /^cd (.*)$/
		return Dir.chdir($1)
	end

	r = []
	er_t = nil
	in_t = nil
	o_t = nil
	p = Open4::popen4(command) do |pid, stdin, stdout, stderr|
		er_t = Thread.new do
			loop do
				$stderr.print stderr.read(stderr.stat.size)
				$stderr.flush
			end
		end

		in_t = Thread.new do
			loop do
				data = gets
				stdin.write(data)
			end
		end
	
		o_t = Thread.new do
			loop do
				r << stdout.read(stdout.stat.size)
			end
		end
	end
	er_t.kill
	in_t.kill
	o_t.kill
	r.join("")
rescue Errno::ENOENT, TypeError
	command
end

parser = Simplesh.new
puts
puts 'type "Q" to quit.'
puts
while true
  puts
  print '? '
  if str = gets
    break if /q/i =~ str
    begin
      p = parser.parse(str)
      r = simplesh_eval(p)
      puts p.inspect if ENV['DEBUG']
      puts r.inspect
    rescue ParseError
      puts $!
    end
  else
    exit
  end
end
