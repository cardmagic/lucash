# $Id: simplesh.y 2112 2008-05-14 13:29:32Z cardmagic $
#
# Very simple shell.

Grammar RockSimpleSh
Tokens
  Blank      = /(( )|(\t)|(\v))+/                     [:Skip]
  Var        = /[A-Z]([A-Z]|\d)*/
  Number     = /\d+(\.\d+)?/
  String     = /"[^\r\n]*"/
  Newline    = /(\r\n)|(\r)|(\n)|(;)/

Productions
  Statements  -> Statement+          [Statements: statements]
  Statement   -> 'if' Condition Newline
                  Statements
                  ('else' Newline Statements)?
                'end' Newline     [If: _,condition,_,statements,optelse,_,_]
              |  'for' Var ':=' Expr 'to' Expr Newline
                   Statements
                 'next' Newline      [For: _,ident,_,from,_,to,_,statements,_,_]
              |  'print' (Expr | String) Newline
                                     [Print: _,message,_]
              |  'puts' Newline   [PrintLn]
              |  Identifier '=' Expr Newline
                                     [Assignment: ident,_,expression,_]
              |  Identifier '<-' Expr Newline
                                      [FunctionalAssignment: ident,_,expression,_]
  Condition   -> Expr ('<' | '>' | '==') Expr     
                                      [Condition: left, op, right]
  Expr        -> Array ('+'|'-'|'*'|'/'|'%') Array 
                                      [BinExpr: left,op,right]
  Array       -> '[' BasicResult ']' [ArrayStruct: _,data,_]
              | Atom
  BasicResult -> Statement [BasicArrayData: data]
              | Statement ',' BasicResult [ArrayData: data,_,array_data]
  Atom        -> Number              [^]
              |  Command             [^: command]
              |  '(' Statement ')'   [^: _,statement,_]
  Command     -> Var                 [^]
              | Var Command          [CommandData: var,command]