.TH "set" 1 "13 Jan 2008" "Version 1.23.0" "fish" \" -*- nroff -*-
.ad l
.nh
.SH NAME
set - handle environment variables.
.PP
.SS "Synopsis"
.PP
.nf

set [SCOPE_OPTIONS]
set [OPTIONS] VARIABLE_NAME VALUES...
set [OPTIONS] VARIABLE_NAME[INDICES]... VALUES...
set (-q | --query) [SCOPE_OPTIONS] VARIABLE_NAMES...
set (-e | --erase) [SCOPE_OPTIONS] VARIABLE_NAME
set (-e | --erase) [SCOPE_OPTIONS] VARIABLE_NAME[INDICES]...
.fi
.PP
.PP
The \fCset\fP builtin causes fish to assign the variable \fCVARIABLE_NAME\fP the values \fCVALUES...\fP.
.SS "Description"
.IP "\(bu" 2
\fC-e\fP or \fC--erase\fP causes the specified environment variable to be erased
.IP "\(bu" 2
\fC-l\fP or \fC--local\fP forces the specified environment variable to be given a scope that is local to the current block, even if a variable with the given name exists and is non-local
.IP "\(bu" 2
\fC-g\fP or \fC--global\fP causes the specified environment variable to be given a global scope. Non-global variables disappear when the block they belong to ends
.IP "\(bu" 2
\fC-U\fP or \fC--universal\fP causes the specified environment variable to be given a universal scope. If this option is supplied, the variable will be shared between all the current users fish instances on the current computer, and will be preserved across restarts of the shell.
.IP "\(bu" 2
\fC-n\fP or \fC--names\fP List only the names of all defined variables, not their value
.IP "\(bu" 2
\fC-q\fP or \fC--query\fP test if the specified variable names are defined. Does not output anything, but the builtins exit status is the number of variables specified that were not defined.
.IP "\(bu" 2
\fC-u\fP or \fC--unexport\fP causes the specified environment not to be exported to child processes
.IP "\(bu" 2
\fC-x\fP or \fC--export\fP causes the specified environment variable to be exported to child processes
.PP
.PP
If set is called with no arguments, the names and values of all environment variables are printed. If some of the scope or export flags have been given, only the variables matching the specified scope are printed.
.PP
If a variable is set to more than one value, the variable will be an array with the specified elements. If a variable is set to zero elements, it will become an array with zero elements.
.PP
If the variable name is one or more array elements, such as \fCPATH[1 3 7]\fP, only those array elements specified will be changed. When array indices are specified to set, multiple arguments may be used to specify additional indexes, e.g. \fCset PATH[1] PATH[4] /bin /sbin\fP. If you specify a negative index when expanding or assigning to an array variable, the index will be calculated from the end of the array. For example, the index -1 means the last index of an array.
.PP
The scoping rules when creating or updating a variable are:
.PP
.IP "1." 4
If a variable is explicitly set to either universal, global or local, that setting will be honored. If a variable of the same name exists in a different scope, that variable will not be changed.
.IP "2." 4
If a variable is not explicitly set to be either universal, global or local, but has been previously defined, the previous variable scope is used.
.IP "3." 4
If a variable is not explicitly set to be either universal, global or local and has never before been defined, the variable will be local to the currently executing functions. If no function is executing, the variable will be global.
.PP
.PP
The exporting rules when creating or updating a variable are identical to the scoping rules for variables:
.PP
.IP "1." 4
If a variable is explicitly set to either be exported or not exported, that setting will be honored.
.IP "2." 4
If a variable is not explicitly set to be exported or not exported, but has been previously defined, the previous exporting rule for the variable is kept.
.IP "3." 4
If a variable is not explicitly set to be either exported or unexported and has never before been defined, the variable will not be exported.
.PP
.PP
In query mode, the scope to be examined can be specified.
.PP
In erase mode, if variable indices are specified, only the specified slices of the array variable will be erased. When erasing an entire variable (i.e. no slicing), the scope of the variable to be erased can be specified. That way, a global variable can be erased even if a local variable with the same name exists. Scope can not be specified when erasing a slice of an array. The innermost scope is always used.
.PP
The set command requires all switch arguments to come before any non-switch arguments. For example, \fCset flags -l\fP will have the effect of setting the value of the variable \fCflags\fP to '-l', not making the variable local.
.PP
In assignment mode, set exits with an exit status of zero it the variable assignments where sucessfully performed, with a non-zero exit status otherwise. In query mode, the exit status is the number of variables that where not found. In erase mode, set exits with a zero exit status in case of success, with a non-zero exit status if the commandline was invalid, if the variable was write-protected or if the variable did not exist.
.SS "Example"
\fCset -xg\fP will print all global, exported variables.
.PP
\fCset foo hi\fP sets the value of the variable foo to be hi.
.PP
\fCset -e smurf\fP removes the variable \fCsmurf\fP.
.PP
\fCset PATH[4] ~/bin\fP changes the fourth element of the \fCPATH\fP array to \fC~/bin\fP 
