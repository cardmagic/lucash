#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.5
# from Racc grammer file "".
#

require 'racc/parser.rb'
class LucashGrammar < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 51)

require 'lucash/parser'

include Lucash::Parser

def next_token
  @q.shift
end

...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,     6,     7,     4,     6,     7,    36,    12,    53,     3,
     4,    11,     5,     2,     6,     7,     6,     7,    11,    12,
     2,     3,     4,     6,     7,     6,     7,     6,     7,    52,
    11,     5,     2,    14,     4,     6,     7,    18,    12,    19,
     3,     4,    11,     5,     2,    19,    19,     6,     7,    11,
    12,     2,     3,     4,     6,     7,     6,     7,    55,    56,
    19,    11,     5,     2,    19,     4,     6,     7,    19,    12,
    37,     3,     4,    11,     5,     2,    39,    59,     6,     7,
    11,    12,     2,     3,     4,     6,     7,   nil,   nil,    19,
   nil,   nil,    11,     5,     2,   nil,     4,     6,     7,   nil,
    12,   nil,     3,     4,    11,     5,     2,   nil,   nil,     6,
     7,    11,    12,     2,     3,     4,     6,     7,   nil,   nil,
   nil,   nil,   nil,    11,    33,     2,   nil,   nil,     6,     7,
    23,    24,    26,   nil,    29,    31,    11,   nil,     2,   nil,
   nil,     6,     7,   nil,   nil,   nil,   nil,    11,   nil,     2,
   nil,   nil,     6,     7,    22,    23,    24,    26,    28,    29,
    31,   nil,   nil,    21,     4,   nil,   nil,    25,    27,   nil,
    30,    32,    11,     4,     2,   nil,   nil,     6,     7,   nil,
   nil,    11,   nil,     2,   nil,   nil,     6,     7,    23,    24,
    26,   nil,    29,    31 ]

racc_action_check = [
     0,    29,    29,     4,    24,    24,    13,     0,    35,     0,
     0,     4,     2,     4,    23,    23,     4,     4,     0,     2,
     0,     2,     2,     0,     0,    26,    26,    31,    31,    34,
     2,    16,     2,     2,    32,     2,     2,     8,    16,    44,
    16,    16,    32,    56,    32,    46,    16,    32,    32,    16,
    56,    16,    56,    56,    16,    16,     7,     7,    38,    38,
    47,    56,    37,    56,    49,    30,    56,    56,    51,    37,
    15,    37,    37,    30,     9,    30,    18,    58,    30,    30,
    37,     9,    37,     9,     9,    37,    37,   nil,   nil,     9,
   nil,   nil,     9,    12,     9,   nil,    28,     9,     9,   nil,
    12,   nil,    12,    12,    28,    11,    28,   nil,   nil,    28,
    28,    12,    11,    12,    11,    11,    12,    12,   nil,   nil,
   nil,   nil,   nil,    11,    11,    11,   nil,   nil,    11,    11,
    40,    40,    40,   nil,    40,    40,    19,   nil,    19,   nil,
   nil,    19,    19,   nil,   nil,   nil,   nil,    40,   nil,    40,
   nil,   nil,    40,    40,    10,    10,    10,    10,    10,    10,
    10,   nil,   nil,    10,    25,   nil,   nil,    10,    10,   nil,
    10,    10,    25,    27,    25,   nil,   nil,    25,    25,   nil,
   nil,    27,   nil,    27,   nil,   nil,    27,    27,    57,    57,
    57,   nil,    57,    57 ]

racc_action_pointer = [
    -3,   nil,     9,   nil,   -10,   nil,   nil,    30,    37,    71,
   151,   102,    90,   -18,   nil,    45,    28,   nil,    76,   115,
   nil,   nil,   nil,   -12,   -22,   151,    -1,   160,    83,   -25,
    52,     1,    21,   nil,     7,    -3,   nil,    59,    44,   nil,
   126,   nil,   nil,   nil,    21,   nil,    27,    42,   nil,    46,
   nil,    50,   nil,   nil,   nil,   nil,    40,   184,    63,   nil ]

racc_action_default = [
   -34,   -28,   -34,    -4,   -34,    -5,   -31,   -32,   -34,    -3,
    -6,   -34,   -34,   -34,   -27,   -29,   -34,   -33,   -34,   -34,
    -1,    -8,    -7,   -34,   -34,   -34,   -34,   -34,   -34,   -34,
   -34,   -34,   -34,   -25,   -34,   -34,   -26,   -34,   -34,    60,
   -17,   -14,   -21,   -22,   -11,   -23,   -13,   -12,   -19,   -15,
   -20,   -16,   -24,    -2,   -30,    -9,   -34,   -18,   -34,   -10 ]

racc_goto_table = [
     8,    13,    16,    41,   nil,    17,   nil,   nil,   nil,    20,
    34,    40,    35,   nil,   nil,   nil,    38,   nil,   nil,   nil,
   nil,    42,    43,    44,    45,    46,    47,    48,    49,    50,
    51,   nil,    57,   nil,   nil,   nil,    54,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    58 ]

racc_goto_check = [
     1,     6,     2,     4,   nil,     5,   nil,   nil,   nil,     1,
     6,     3,     1,   nil,   nil,   nil,     1,   nil,   nil,   nil,
   nil,     5,     5,     2,     5,     2,     2,     5,     2,     5,
     2,   nil,     3,   nil,   nil,   nil,     6,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     1 ]

racc_goto_pointer = [
   nil,     0,    -2,    -8,   -16,    -2,    -1 ]

racc_goto_default = [
   nil,    15,     9,    10,   nil,     1,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 29, :_reduce_1,
  3, 29, :_reduce_2,
  1, 29, :_reduce_3,
  1, 29, :_reduce_4,
  1, 29, :_reduce_5,
  1, 30, :_reduce_6,
  2, 30, :_reduce_7,
  2, 30, :_reduce_8,
  4, 30, :_reduce_9,
  6, 30, :_reduce_10,
  3, 30, :_reduce_11,
  3, 30, :_reduce_12,
  3, 30, :_reduce_13,
  3, 30, :_reduce_14,
  3, 30, :_reduce_15,
  3, 30, :_reduce_16,
  1, 32, :_reduce_17,
  2, 32, :_reduce_18,
  3, 31, :_reduce_19,
  3, 31, :_reduce_20,
  3, 31, :_reduce_21,
  3, 31, :_reduce_22,
  3, 31, :_reduce_23,
  3, 31, :_reduce_24,
  2, 31, :_reduce_25,
  3, 31, :_reduce_26,
  2, 31, :_reduce_27,
  1, 31, :_reduce_28,
  1, 34, :_reduce_29,
  3, 34, :_reduce_30,
  1, 33, :_reduce_31,
  1, 33, :_reduce_32,
  2, 33, :_reduce_33 ]

racc_reduce_n = 34

racc_shift_n = 60

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  ";" => 3,
  "*" => 4,
  "/" => 5,
  "%" => 6,
  "|" => 7,
  "+" => 8,
  "-" => 9,
  "{" => 10,
  "}" => 11,
  "\\n" => 12,
  "if" => 13,
  "end" => 14,
  "else" => 15,
  "&&" => 16,
  "||" => 17,
  "." => 18,
  "=" => 19,
  "<-" => 20,
  "(" => 21,
  ")" => 22,
  "[" => 23,
  "]" => 24,
  "," => 25,
  :NUMBER => 26,
  :IDENT => 27 }

racc_nt_base = 28

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\";\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"|\"",
  "\"+\"",
  "\"-\"",
  "\"{\"",
  "\"}\"",
  "\"\\\\n\"",
  "\"if\"",
  "\"end\"",
  "\"else\"",
  "\"&&\"",
  "\"||\"",
  "\".\"",
  "\"=\"",
  "\"<-\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\",\"",
  "NUMBER",
  "IDENT",
  "$start",
  "program",
  "line",
  "expr",
  "method_call",
  "atom",
  "basic_result" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 9)
  def _reduce_1(val, _values)
     [:program, [val[0], *val[1][1]]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 10)
  def _reduce_2(val, _values)
     [:block, val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 11)
  def _reduce_3(val, _values)
     [:program, [val[0]]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 12)
  def _reduce_4(val, _values)
     [:program, []] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 13)
  def _reduce_5(val, _values)
     [:program, []] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 15)
  def _reduce_6(val, _values)
     [:line, val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 16)
  def _reduce_7(val, _values)
     [:line, val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 17)
  def _reduce_8(val, _values)
     [:line, val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 18)
  def _reduce_9(val, _values)
     [:if, val[1], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 19)
  def _reduce_10(val, _values)
     [:if_else, val[1], val[2], val[4]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 20)
  def _reduce_11(val, _values)
     [:and, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 21)
  def _reduce_12(val, _values)
     [:pipe, [:line, val[0]], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 22)
  def _reduce_13(val, _values)
     [:or, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 23)
  def _reduce_14(val, _values)
     [:method, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 24)
  def _reduce_15(val, _values)
     [:assignment, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 25)
  def _reduce_16(val, _values)
     [:functional_assignment, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 27)
  def _reduce_17(val, _values)
     [:method_call, val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 28)
  def _reduce_18(val, _values)
     [:method_call, val[0], val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 30)
  def _reduce_19(val, _values)
     [:add, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 31)
  def _reduce_20(val, _values)
     [:subtract, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 32)
  def _reduce_21(val, _values)
     [:multiply, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 33)
  def _reduce_22(val, _values)
     [:divide, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 34)
  def _reduce_23(val, _values)
     [:mod, val[0], val[2]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 35)
  def _reduce_24(val, _values)
     [:line, val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 36)
  def _reduce_25(val, _values)
     [:empty_parens] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 37)
  def _reduce_26(val, _values)
     [:array, val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 38)
  def _reduce_27(val, _values)
     [:empty_array] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 39)
  def _reduce_28(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 41)
  def _reduce_29(val, _values)
     [:splat, [val[0]]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 42)
  def _reduce_30(val, _values)
     [:splat, [val[0], *val[2][1]]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_31(val, _values)
     [:number, val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_32(val, _values)
     [:value, [val[0]]] 
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_33(val, _values)
     [:value, [val[0], *val[1][1]]] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class LucashGrammar


